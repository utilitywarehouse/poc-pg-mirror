// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// Letter represents a row from 'equinox.letters'.
type Letter struct {
	Letterfilename   sql.NullString `json:"letterfilename"`   // letterfilename
	Letcategory      sql.NullString `json:"letcategory"`      // letcategory
	Letothercategory sql.NullString `json:"letothercategory"` // letothercategory
	Letsimplexduplex sql.NullString `json:"letsimplexduplex"` // letsimplexduplex
	Letsuspend       sql.NullString `json:"letsuspend"`       // letsuspend
	Letsuspendreason sql.NullString `json:"letsuspendreason"` // letsuspendreason
	Letsuspendreaso2 sql.NullInt64  `json:"letsuspendreaso2"` // letsuspendreaso2
	Letcatstrategy   sql.NullString `json:"letcatstrategy"`   // letcatstrategy
	Letsparechar2    sql.NullString `json:"letsparechar2"`    // letsparechar2
	Letpending       sql.NullInt64  `json:"letpending"`       // letpending
	Letsparenum1     sql.NullInt64  `json:"letsparenum1"`     // letsparenum1
	Letsparenum2     sql.NullInt64  `json:"letsparenum2"`     // letsparenum2
	Letdescription   sql.NullString `json:"letdescription"`   // letdescription
	EquinoxLrn       int64          `json:"equinox_lrn"`      // equinox_lrn
	EquinoxSec       sql.NullInt64  `json:"equinox_sec"`      // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Letter exists in the database.
func (l *Letter) Exists() bool {
	return l._exists
}

// Deleted provides information if the Letter has been deleted from the database.
func (l *Letter) Deleted() bool {
	return l._deleted
}

// Insert inserts the Letter to the database.
func (l *Letter) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if l._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.letters (` +
		`letterfilename, letcategory, letothercategory, letsimplexduplex, letsuspend, letsuspendreason, letsuspendreaso2, letcatstrategy, letsparechar2, letpending, letsparenum1, letsparenum2, letdescription, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, l.Letterfilename, l.Letcategory, l.Letothercategory, l.Letsimplexduplex, l.Letsuspend, l.Letsuspendreason, l.Letsuspendreaso2, l.Letcatstrategy, l.Letsparechar2, l.Letpending, l.Letsparenum1, l.Letsparenum2, l.Letdescription, l.EquinoxSec)
	err = db.QueryRow(sqlstr, l.Letterfilename, l.Letcategory, l.Letothercategory, l.Letsimplexduplex, l.Letsuspend, l.Letsuspendreason, l.Letsuspendreaso2, l.Letcatstrategy, l.Letsparechar2, l.Letpending, l.Letsparenum1, l.Letsparenum2, l.Letdescription, l.EquinoxSec).Scan(&l.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	l._exists = true

	return nil
}

// Update updates the Letter in the database.
func (l *Letter) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !l._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if l._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.letters SET (` +
		`letterfilename, letcategory, letothercategory, letsimplexduplex, letsuspend, letsuspendreason, letsuspendreaso2, letcatstrategy, letsparechar2, letpending, letsparenum1, letsparenum2, letdescription, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14` +
		`) WHERE equinox_lrn = $15`

	// run query
	XOLog(sqlstr, l.Letterfilename, l.Letcategory, l.Letothercategory, l.Letsimplexduplex, l.Letsuspend, l.Letsuspendreason, l.Letsuspendreaso2, l.Letcatstrategy, l.Letsparechar2, l.Letpending, l.Letsparenum1, l.Letsparenum2, l.Letdescription, l.EquinoxSec, l.EquinoxLrn)
	_, err = db.Exec(sqlstr, l.Letterfilename, l.Letcategory, l.Letothercategory, l.Letsimplexduplex, l.Letsuspend, l.Letsuspendreason, l.Letsuspendreaso2, l.Letcatstrategy, l.Letsparechar2, l.Letpending, l.Letsparenum1, l.Letsparenum2, l.Letdescription, l.EquinoxSec, l.EquinoxLrn)
	return err
}

// Save saves the Letter to the database.
func (l *Letter) Save(db XODB) error {
	if l.Exists() {
		return l.Update(db)
	}

	return l.Insert(db)
}

// Upsert performs an upsert for Letter.
//
// NOTE: PostgreSQL 9.5+ only
func (l *Letter) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if l._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.letters (` +
		`letterfilename, letcategory, letothercategory, letsimplexduplex, letsuspend, letsuspendreason, letsuspendreaso2, letcatstrategy, letsparechar2, letpending, letsparenum1, letsparenum2, letdescription, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`letterfilename, letcategory, letothercategory, letsimplexduplex, letsuspend, letsuspendreason, letsuspendreaso2, letcatstrategy, letsparechar2, letpending, letsparenum1, letsparenum2, letdescription, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.letterfilename, EXCLUDED.letcategory, EXCLUDED.letothercategory, EXCLUDED.letsimplexduplex, EXCLUDED.letsuspend, EXCLUDED.letsuspendreason, EXCLUDED.letsuspendreaso2, EXCLUDED.letcatstrategy, EXCLUDED.letsparechar2, EXCLUDED.letpending, EXCLUDED.letsparenum1, EXCLUDED.letsparenum2, EXCLUDED.letdescription, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, l.Letterfilename, l.Letcategory, l.Letothercategory, l.Letsimplexduplex, l.Letsuspend, l.Letsuspendreason, l.Letsuspendreaso2, l.Letcatstrategy, l.Letsparechar2, l.Letpending, l.Letsparenum1, l.Letsparenum2, l.Letdescription, l.EquinoxLrn, l.EquinoxSec)
	_, err = db.Exec(sqlstr, l.Letterfilename, l.Letcategory, l.Letothercategory, l.Letsimplexduplex, l.Letsuspend, l.Letsuspendreason, l.Letsuspendreaso2, l.Letcatstrategy, l.Letsparechar2, l.Letpending, l.Letsparenum1, l.Letsparenum2, l.Letdescription, l.EquinoxLrn, l.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	l._exists = true

	return nil
}

// Delete deletes the Letter from the database.
func (l *Letter) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !l._exists {
		return nil
	}

	// if deleted, bail
	if l._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.letters WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, l.EquinoxLrn)
	_, err = db.Exec(sqlstr, l.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	l._deleted = true

	return nil
}

// LetterByEquinoxLrn retrieves a row from 'equinox.letters' as a Letter.
//
// Generated from index 'letters_pkey'.
func LetterByEquinoxLrn(db XODB, equinoxLrn int64) (*Letter, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`letterfilename, letcategory, letothercategory, letsimplexduplex, letsuspend, letsuspendreason, letsuspendreaso2, letcatstrategy, letsparechar2, letpending, letsparenum1, letsparenum2, letdescription, equinox_lrn, equinox_sec ` +
		`FROM equinox.letters ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	l := Letter{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&l.Letterfilename, &l.Letcategory, &l.Letothercategory, &l.Letsimplexduplex, &l.Letsuspend, &l.Letsuspendreason, &l.Letsuspendreaso2, &l.Letcatstrategy, &l.Letsparechar2, &l.Letpending, &l.Letsparenum1, &l.Letsparenum2, &l.Letdescription, &l.EquinoxLrn, &l.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &l, nil
}
