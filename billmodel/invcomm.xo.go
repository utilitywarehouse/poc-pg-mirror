// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/lib/pq"
)

// Invcomm represents a row from 'equinox.invcomm'.
type Invcomm struct {
	Icbillno         sql.NullString  `json:"icbillno"`         // icbillno
	Iccustaccountno  sql.NullString  `json:"iccustaccountno"`  // iccustaccountno
	Ictelephony      sql.NullFloat64 `json:"ictelephony"`      // ictelephony
	Icenergy         sql.NullFloat64 `json:"icenergy"`         // icenergy
	Icwlr            sql.NullFloat64 `json:"icwlr"`            // icwlr
	Icbroadcall1     sql.NullFloat64 `json:"icbroadcall1"`     // icbroadcall1
	Icbroadcall2     sql.NullFloat64 `json:"icbroadcall2"`     // icbroadcall2
	Icbroadcall3     sql.NullFloat64 `json:"icbroadcall3"`     // icbroadcall3
	Icbroadcall4     sql.NullFloat64 `json:"icbroadcall4"`     // icbroadcall4
	Icgoldmembership sql.NullFloat64 `json:"icgoldmembership"` // icgoldmembership
	Icsilvermembersh sql.NullFloat64 `json:"icsilvermembersh"` // icsilvermembersh
	Icbillsperiod    sql.NullString  `json:"icbillsperiod"`    // icbillsperiod
	Iccomispaid      pq.NullTime     `json:"iccomispaid"`      // iccomispaid
	Icmobile1        sql.NullFloat64 `json:"icmobile1"`        // icmobile1
	Icmobile2        sql.NullFloat64 `json:"icmobile2"`        // icmobile2
	Icmobile3        sql.NullFloat64 `json:"icmobile3"`        // icmobile3
	Icmobile4        sql.NullFloat64 `json:"icmobile4"`        // icmobile4
	Icvaluepay       sql.NullFloat64 `json:"icvaluepay"`       // icvaluepay
	Iccashback       sql.NullFloat64 `json:"iccashback"`       // iccashback
	Icfit            sql.NullFloat64 `json:"icfit"`            // icfit
	Iceligibleservs  sql.NullString  `json:"iceligibleservs"`  // iceligibleservs
	Icsparechar2     sql.NullString  `json:"icsparechar2"`     // icsparechar2
	Icsparechar3     sql.NullString  `json:"icsparechar3"`     // icsparechar3
	Icsparedate2     pq.NullTime     `json:"icsparedate2"`     // icsparedate2
	Icservstel       sql.NullInt64   `json:"icservstel"`       // icservstel
	Icservsmob       sql.NullInt64   `json:"icservsmob"`       // icservsmob
	Icservsbband     sql.NullInt64   `json:"icservsbband"`     // icservsbband
	Icservsenergy    sql.NullInt64   `json:"icservsenergy"`    // icservsenergy
	EquinoxLrn       int64           `json:"equinox_lrn"`      // equinox_lrn
	EquinoxSec       sql.NullInt64   `json:"equinox_sec"`      // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Invcomm exists in the database.
func (i *Invcomm) Exists() bool {
	return i._exists
}

// Deleted provides information if the Invcomm has been deleted from the database.
func (i *Invcomm) Deleted() bool {
	return i._deleted
}

// Insert inserts the Invcomm to the database.
func (i *Invcomm) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if i._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.invcomm (` +
		`icbillno, iccustaccountno, ictelephony, icenergy, icwlr, icbroadcall1, icbroadcall2, icbroadcall3, icbroadcall4, icgoldmembership, icsilvermembersh, icbillsperiod, iccomispaid, icmobile1, icmobile2, icmobile3, icmobile4, icvaluepay, iccashback, icfit, iceligibleservs, icsparechar2, icsparechar3, icsparedate2, icservstel, icservsmob, icservsbband, icservsenergy, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, i.Icbillno, i.Iccustaccountno, i.Ictelephony, i.Icenergy, i.Icwlr, i.Icbroadcall1, i.Icbroadcall2, i.Icbroadcall3, i.Icbroadcall4, i.Icgoldmembership, i.Icsilvermembersh, i.Icbillsperiod, i.Iccomispaid, i.Icmobile1, i.Icmobile2, i.Icmobile3, i.Icmobile4, i.Icvaluepay, i.Iccashback, i.Icfit, i.Iceligibleservs, i.Icsparechar2, i.Icsparechar3, i.Icsparedate2, i.Icservstel, i.Icservsmob, i.Icservsbband, i.Icservsenergy, i.EquinoxSec)
	err = db.QueryRow(sqlstr, i.Icbillno, i.Iccustaccountno, i.Ictelephony, i.Icenergy, i.Icwlr, i.Icbroadcall1, i.Icbroadcall2, i.Icbroadcall3, i.Icbroadcall4, i.Icgoldmembership, i.Icsilvermembersh, i.Icbillsperiod, i.Iccomispaid, i.Icmobile1, i.Icmobile2, i.Icmobile3, i.Icmobile4, i.Icvaluepay, i.Iccashback, i.Icfit, i.Iceligibleservs, i.Icsparechar2, i.Icsparechar3, i.Icsparedate2, i.Icservstel, i.Icservsmob, i.Icservsbband, i.Icservsenergy, i.EquinoxSec).Scan(&i.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	i._exists = true

	return nil
}

// Update updates the Invcomm in the database.
func (i *Invcomm) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !i._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if i._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.invcomm SET (` +
		`icbillno, iccustaccountno, ictelephony, icenergy, icwlr, icbroadcall1, icbroadcall2, icbroadcall3, icbroadcall4, icgoldmembership, icsilvermembersh, icbillsperiod, iccomispaid, icmobile1, icmobile2, icmobile3, icmobile4, icvaluepay, iccashback, icfit, iceligibleservs, icsparechar2, icsparechar3, icsparedate2, icservstel, icservsmob, icservsbband, icservsenergy, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29` +
		`) WHERE equinox_lrn = $30`

	// run query
	XOLog(sqlstr, i.Icbillno, i.Iccustaccountno, i.Ictelephony, i.Icenergy, i.Icwlr, i.Icbroadcall1, i.Icbroadcall2, i.Icbroadcall3, i.Icbroadcall4, i.Icgoldmembership, i.Icsilvermembersh, i.Icbillsperiod, i.Iccomispaid, i.Icmobile1, i.Icmobile2, i.Icmobile3, i.Icmobile4, i.Icvaluepay, i.Iccashback, i.Icfit, i.Iceligibleservs, i.Icsparechar2, i.Icsparechar3, i.Icsparedate2, i.Icservstel, i.Icservsmob, i.Icservsbband, i.Icservsenergy, i.EquinoxSec, i.EquinoxLrn)
	_, err = db.Exec(sqlstr, i.Icbillno, i.Iccustaccountno, i.Ictelephony, i.Icenergy, i.Icwlr, i.Icbroadcall1, i.Icbroadcall2, i.Icbroadcall3, i.Icbroadcall4, i.Icgoldmembership, i.Icsilvermembersh, i.Icbillsperiod, i.Iccomispaid, i.Icmobile1, i.Icmobile2, i.Icmobile3, i.Icmobile4, i.Icvaluepay, i.Iccashback, i.Icfit, i.Iceligibleservs, i.Icsparechar2, i.Icsparechar3, i.Icsparedate2, i.Icservstel, i.Icservsmob, i.Icservsbband, i.Icservsenergy, i.EquinoxSec, i.EquinoxLrn)
	return err
}

// Save saves the Invcomm to the database.
func (i *Invcomm) Save(db XODB) error {
	if i.Exists() {
		return i.Update(db)
	}

	return i.Insert(db)
}

// Upsert performs an upsert for Invcomm.
//
// NOTE: PostgreSQL 9.5+ only
func (i *Invcomm) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if i._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.invcomm (` +
		`icbillno, iccustaccountno, ictelephony, icenergy, icwlr, icbroadcall1, icbroadcall2, icbroadcall3, icbroadcall4, icgoldmembership, icsilvermembersh, icbillsperiod, iccomispaid, icmobile1, icmobile2, icmobile3, icmobile4, icvaluepay, iccashback, icfit, iceligibleservs, icsparechar2, icsparechar3, icsparedate2, icservstel, icservsmob, icservsbband, icservsenergy, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`icbillno, iccustaccountno, ictelephony, icenergy, icwlr, icbroadcall1, icbroadcall2, icbroadcall3, icbroadcall4, icgoldmembership, icsilvermembersh, icbillsperiod, iccomispaid, icmobile1, icmobile2, icmobile3, icmobile4, icvaluepay, iccashback, icfit, iceligibleservs, icsparechar2, icsparechar3, icsparedate2, icservstel, icservsmob, icservsbband, icservsenergy, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.icbillno, EXCLUDED.iccustaccountno, EXCLUDED.ictelephony, EXCLUDED.icenergy, EXCLUDED.icwlr, EXCLUDED.icbroadcall1, EXCLUDED.icbroadcall2, EXCLUDED.icbroadcall3, EXCLUDED.icbroadcall4, EXCLUDED.icgoldmembership, EXCLUDED.icsilvermembersh, EXCLUDED.icbillsperiod, EXCLUDED.iccomispaid, EXCLUDED.icmobile1, EXCLUDED.icmobile2, EXCLUDED.icmobile3, EXCLUDED.icmobile4, EXCLUDED.icvaluepay, EXCLUDED.iccashback, EXCLUDED.icfit, EXCLUDED.iceligibleservs, EXCLUDED.icsparechar2, EXCLUDED.icsparechar3, EXCLUDED.icsparedate2, EXCLUDED.icservstel, EXCLUDED.icservsmob, EXCLUDED.icservsbband, EXCLUDED.icservsenergy, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, i.Icbillno, i.Iccustaccountno, i.Ictelephony, i.Icenergy, i.Icwlr, i.Icbroadcall1, i.Icbroadcall2, i.Icbroadcall3, i.Icbroadcall4, i.Icgoldmembership, i.Icsilvermembersh, i.Icbillsperiod, i.Iccomispaid, i.Icmobile1, i.Icmobile2, i.Icmobile3, i.Icmobile4, i.Icvaluepay, i.Iccashback, i.Icfit, i.Iceligibleservs, i.Icsparechar2, i.Icsparechar3, i.Icsparedate2, i.Icservstel, i.Icservsmob, i.Icservsbband, i.Icservsenergy, i.EquinoxLrn, i.EquinoxSec)
	_, err = db.Exec(sqlstr, i.Icbillno, i.Iccustaccountno, i.Ictelephony, i.Icenergy, i.Icwlr, i.Icbroadcall1, i.Icbroadcall2, i.Icbroadcall3, i.Icbroadcall4, i.Icgoldmembership, i.Icsilvermembersh, i.Icbillsperiod, i.Iccomispaid, i.Icmobile1, i.Icmobile2, i.Icmobile3, i.Icmobile4, i.Icvaluepay, i.Iccashback, i.Icfit, i.Iceligibleservs, i.Icsparechar2, i.Icsparechar3, i.Icsparedate2, i.Icservstel, i.Icservsmob, i.Icservsbband, i.Icservsenergy, i.EquinoxLrn, i.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	i._exists = true

	return nil
}

// Delete deletes the Invcomm from the database.
func (i *Invcomm) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !i._exists {
		return nil
	}

	// if deleted, bail
	if i._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.invcomm WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, i.EquinoxLrn)
	_, err = db.Exec(sqlstr, i.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	i._deleted = true

	return nil
}

// InvcommByEquinoxLrn retrieves a row from 'equinox.invcomm' as a Invcomm.
//
// Generated from index 'invcomm_pkey'.
func InvcommByEquinoxLrn(db XODB, equinoxLrn int64) (*Invcomm, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`icbillno, iccustaccountno, ictelephony, icenergy, icwlr, icbroadcall1, icbroadcall2, icbroadcall3, icbroadcall4, icgoldmembership, icsilvermembersh, icbillsperiod, iccomispaid, icmobile1, icmobile2, icmobile3, icmobile4, icvaluepay, iccashback, icfit, iceligibleservs, icsparechar2, icsparechar3, icsparedate2, icservstel, icservsmob, icservsbband, icservsenergy, equinox_lrn, equinox_sec ` +
		`FROM equinox.invcomm ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	i := Invcomm{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&i.Icbillno, &i.Iccustaccountno, &i.Ictelephony, &i.Icenergy, &i.Icwlr, &i.Icbroadcall1, &i.Icbroadcall2, &i.Icbroadcall3, &i.Icbroadcall4, &i.Icgoldmembership, &i.Icsilvermembersh, &i.Icbillsperiod, &i.Iccomispaid, &i.Icmobile1, &i.Icmobile2, &i.Icmobile3, &i.Icmobile4, &i.Icvaluepay, &i.Iccashback, &i.Icfit, &i.Iceligibleservs, &i.Icsparechar2, &i.Icsparechar3, &i.Icsparedate2, &i.Icservstel, &i.Icservsmob, &i.Icservsbband, &i.Icservsenergy, &i.EquinoxLrn, &i.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &i, nil
}
