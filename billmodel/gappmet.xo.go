// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/lib/pq"
)

// Gappmet represents a row from 'equinox.gappmet'.
type Gappmet struct {
	Gammsn          sql.NullString  `json:"gammsn"`          // gammsn
	Gaminstalldate  pq.NullTime     `json:"gaminstalldate"`  // gaminstalldate
	Gamremovedate   pq.NullTime     `json:"gamremovedate"`   // gamremovedate
	Gamcf           sql.NullFloat64 `json:"gamcf"`           // gamcf
	Gamiorm         sql.NullString  `json:"gamiorm"`         // gamiorm
	Gamrf           sql.NullFloat64 `json:"gamrf"`           // gamrf
	Gamreadingunits sql.NullInt64   `json:"gamreadingunits"` // gamreadingunits
	Gamdials        sql.NullInt64   `json:"gamdials"`        // gamdials
	EquinoxPrn      sql.NullInt64   `json:"equinox_prn"`     // equinox_prn
	EquinoxLrn      int64           `json:"equinox_lrn"`     // equinox_lrn
	EquinoxSec      sql.NullInt64   `json:"equinox_sec"`     // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Gappmet exists in the database.
func (g *Gappmet) Exists() bool {
	return g._exists
}

// Deleted provides information if the Gappmet has been deleted from the database.
func (g *Gappmet) Deleted() bool {
	return g._deleted
}

// Insert inserts the Gappmet to the database.
func (g *Gappmet) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if g._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.gappmet (` +
		`gammsn, gaminstalldate, gamremovedate, gamcf, gamiorm, gamrf, gamreadingunits, gamdials, equinox_prn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, g.Gammsn, g.Gaminstalldate, g.Gamremovedate, g.Gamcf, g.Gamiorm, g.Gamrf, g.Gamreadingunits, g.Gamdials, g.EquinoxPrn, g.EquinoxSec)
	err = db.QueryRow(sqlstr, g.Gammsn, g.Gaminstalldate, g.Gamremovedate, g.Gamcf, g.Gamiorm, g.Gamrf, g.Gamreadingunits, g.Gamdials, g.EquinoxPrn, g.EquinoxSec).Scan(&g.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	g._exists = true

	return nil
}

// Update updates the Gappmet in the database.
func (g *Gappmet) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !g._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if g._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.gappmet SET (` +
		`gammsn, gaminstalldate, gamremovedate, gamcf, gamiorm, gamrf, gamreadingunits, gamdials, equinox_prn, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10` +
		`) WHERE equinox_lrn = $11`

	// run query
	XOLog(sqlstr, g.Gammsn, g.Gaminstalldate, g.Gamremovedate, g.Gamcf, g.Gamiorm, g.Gamrf, g.Gamreadingunits, g.Gamdials, g.EquinoxPrn, g.EquinoxSec, g.EquinoxLrn)
	_, err = db.Exec(sqlstr, g.Gammsn, g.Gaminstalldate, g.Gamremovedate, g.Gamcf, g.Gamiorm, g.Gamrf, g.Gamreadingunits, g.Gamdials, g.EquinoxPrn, g.EquinoxSec, g.EquinoxLrn)
	return err
}

// Save saves the Gappmet to the database.
func (g *Gappmet) Save(db XODB) error {
	if g.Exists() {
		return g.Update(db)
	}

	return g.Insert(db)
}

// Upsert performs an upsert for Gappmet.
//
// NOTE: PostgreSQL 9.5+ only
func (g *Gappmet) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if g._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.gappmet (` +
		`gammsn, gaminstalldate, gamremovedate, gamcf, gamiorm, gamrf, gamreadingunits, gamdials, equinox_prn, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`gammsn, gaminstalldate, gamremovedate, gamcf, gamiorm, gamrf, gamreadingunits, gamdials, equinox_prn, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.gammsn, EXCLUDED.gaminstalldate, EXCLUDED.gamremovedate, EXCLUDED.gamcf, EXCLUDED.gamiorm, EXCLUDED.gamrf, EXCLUDED.gamreadingunits, EXCLUDED.gamdials, EXCLUDED.equinox_prn, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, g.Gammsn, g.Gaminstalldate, g.Gamremovedate, g.Gamcf, g.Gamiorm, g.Gamrf, g.Gamreadingunits, g.Gamdials, g.EquinoxPrn, g.EquinoxLrn, g.EquinoxSec)
	_, err = db.Exec(sqlstr, g.Gammsn, g.Gaminstalldate, g.Gamremovedate, g.Gamcf, g.Gamiorm, g.Gamrf, g.Gamreadingunits, g.Gamdials, g.EquinoxPrn, g.EquinoxLrn, g.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	g._exists = true

	return nil
}

// Delete deletes the Gappmet from the database.
func (g *Gappmet) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !g._exists {
		return nil
	}

	// if deleted, bail
	if g._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.gappmet WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, g.EquinoxLrn)
	_, err = db.Exec(sqlstr, g.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	g._deleted = true

	return nil
}

// GappmetByEquinoxLrn retrieves a row from 'equinox.gappmet' as a Gappmet.
//
// Generated from index 'gappmet_pkey'.
func GappmetByEquinoxLrn(db XODB, equinoxLrn int64) (*Gappmet, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`gammsn, gaminstalldate, gamremovedate, gamcf, gamiorm, gamrf, gamreadingunits, gamdials, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.gappmet ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	g := Gappmet{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&g.Gammsn, &g.Gaminstalldate, &g.Gamremovedate, &g.Gamcf, &g.Gamiorm, &g.Gamrf, &g.Gamreadingunits, &g.Gamdials, &g.EquinoxPrn, &g.EquinoxLrn, &g.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &g, nil
}
