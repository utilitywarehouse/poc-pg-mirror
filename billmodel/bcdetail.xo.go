// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// Bcdetail represents a row from 'equinox.bcdetail'.
type Bcdetail struct {
	Bcdcodeid     sql.NullInt64   `json:"bcdcodeid"`     // bcdcodeid
	Bcdcode       sql.NullString  `json:"bcdcode"`       // bcdcode
	Bcdtariff     sql.NullString  `json:"bcdtariff"`     // bcdtariff
	Bcdsubtariff  sql.NullString  `json:"bcdsubtariff"`  // bcdsubtariff
	Bcdrouting    sql.NullString  `json:"bcdrouting"`    // bcdrouting
	Bcdminspend   sql.NullString  `json:"bcdminspend"`   // bcdminspend
	Bcdoptioncode sql.NullString  `json:"bcdoptioncode"` // bcdoptioncode
	Bcdcount      sql.NullInt64   `json:"bcdcount"`      // bcdcount
	Bcdgross      sql.NullFloat64 `json:"bcdgross"`      // bcdgross
	Bcdnett       sql.NullFloat64 `json:"bcdnett"`       // bcdnett
	Bcdsparen1    sql.NullFloat64 `json:"bcdsparen1"`    // bcdsparen1
	Bcdsparec1    sql.NullString  `json:"bcdsparec1"`    // bcdsparec1
	EquinoxPrn    sql.NullInt64   `json:"equinox_prn"`   // equinox_prn
	EquinoxLrn    int64           `json:"equinox_lrn"`   // equinox_lrn
	EquinoxSec    sql.NullInt64   `json:"equinox_sec"`   // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Bcdetail exists in the database.
func (b *Bcdetail) Exists() bool {
	return b._exists
}

// Deleted provides information if the Bcdetail has been deleted from the database.
func (b *Bcdetail) Deleted() bool {
	return b._deleted
}

// Insert inserts the Bcdetail to the database.
func (b *Bcdetail) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if b._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.bcdetail (` +
		`bcdcodeid, bcdcode, bcdtariff, bcdsubtariff, bcdrouting, bcdminspend, bcdoptioncode, bcdcount, bcdgross, bcdnett, bcdsparen1, bcdsparec1, equinox_prn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, b.Bcdcodeid, b.Bcdcode, b.Bcdtariff, b.Bcdsubtariff, b.Bcdrouting, b.Bcdminspend, b.Bcdoptioncode, b.Bcdcount, b.Bcdgross, b.Bcdnett, b.Bcdsparen1, b.Bcdsparec1, b.EquinoxPrn, b.EquinoxSec)
	err = db.QueryRow(sqlstr, b.Bcdcodeid, b.Bcdcode, b.Bcdtariff, b.Bcdsubtariff, b.Bcdrouting, b.Bcdminspend, b.Bcdoptioncode, b.Bcdcount, b.Bcdgross, b.Bcdnett, b.Bcdsparen1, b.Bcdsparec1, b.EquinoxPrn, b.EquinoxSec).Scan(&b.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	b._exists = true

	return nil
}

// Update updates the Bcdetail in the database.
func (b *Bcdetail) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !b._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if b._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.bcdetail SET (` +
		`bcdcodeid, bcdcode, bcdtariff, bcdsubtariff, bcdrouting, bcdminspend, bcdoptioncode, bcdcount, bcdgross, bcdnett, bcdsparen1, bcdsparec1, equinox_prn, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14` +
		`) WHERE equinox_lrn = $15`

	// run query
	XOLog(sqlstr, b.Bcdcodeid, b.Bcdcode, b.Bcdtariff, b.Bcdsubtariff, b.Bcdrouting, b.Bcdminspend, b.Bcdoptioncode, b.Bcdcount, b.Bcdgross, b.Bcdnett, b.Bcdsparen1, b.Bcdsparec1, b.EquinoxPrn, b.EquinoxSec, b.EquinoxLrn)
	_, err = db.Exec(sqlstr, b.Bcdcodeid, b.Bcdcode, b.Bcdtariff, b.Bcdsubtariff, b.Bcdrouting, b.Bcdminspend, b.Bcdoptioncode, b.Bcdcount, b.Bcdgross, b.Bcdnett, b.Bcdsparen1, b.Bcdsparec1, b.EquinoxPrn, b.EquinoxSec, b.EquinoxLrn)
	return err
}

// Save saves the Bcdetail to the database.
func (b *Bcdetail) Save(db XODB) error {
	if b.Exists() {
		return b.Update(db)
	}

	return b.Insert(db)
}

// Upsert performs an upsert for Bcdetail.
//
// NOTE: PostgreSQL 9.5+ only
func (b *Bcdetail) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if b._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.bcdetail (` +
		`bcdcodeid, bcdcode, bcdtariff, bcdsubtariff, bcdrouting, bcdminspend, bcdoptioncode, bcdcount, bcdgross, bcdnett, bcdsparen1, bcdsparec1, equinox_prn, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`bcdcodeid, bcdcode, bcdtariff, bcdsubtariff, bcdrouting, bcdminspend, bcdoptioncode, bcdcount, bcdgross, bcdnett, bcdsparen1, bcdsparec1, equinox_prn, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.bcdcodeid, EXCLUDED.bcdcode, EXCLUDED.bcdtariff, EXCLUDED.bcdsubtariff, EXCLUDED.bcdrouting, EXCLUDED.bcdminspend, EXCLUDED.bcdoptioncode, EXCLUDED.bcdcount, EXCLUDED.bcdgross, EXCLUDED.bcdnett, EXCLUDED.bcdsparen1, EXCLUDED.bcdsparec1, EXCLUDED.equinox_prn, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, b.Bcdcodeid, b.Bcdcode, b.Bcdtariff, b.Bcdsubtariff, b.Bcdrouting, b.Bcdminspend, b.Bcdoptioncode, b.Bcdcount, b.Bcdgross, b.Bcdnett, b.Bcdsparen1, b.Bcdsparec1, b.EquinoxPrn, b.EquinoxLrn, b.EquinoxSec)
	_, err = db.Exec(sqlstr, b.Bcdcodeid, b.Bcdcode, b.Bcdtariff, b.Bcdsubtariff, b.Bcdrouting, b.Bcdminspend, b.Bcdoptioncode, b.Bcdcount, b.Bcdgross, b.Bcdnett, b.Bcdsparen1, b.Bcdsparec1, b.EquinoxPrn, b.EquinoxLrn, b.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	b._exists = true

	return nil
}

// Delete deletes the Bcdetail from the database.
func (b *Bcdetail) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !b._exists {
		return nil
	}

	// if deleted, bail
	if b._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.bcdetail WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, b.EquinoxLrn)
	_, err = db.Exec(sqlstr, b.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	b._deleted = true

	return nil
}

// BcdetailByEquinoxLrn retrieves a row from 'equinox.bcdetail' as a Bcdetail.
//
// Generated from index 'bcdetail_pkey'.
func BcdetailByEquinoxLrn(db XODB, equinoxLrn int64) (*Bcdetail, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`bcdcodeid, bcdcode, bcdtariff, bcdsubtariff, bcdrouting, bcdminspend, bcdoptioncode, bcdcount, bcdgross, bcdnett, bcdsparen1, bcdsparec1, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.bcdetail ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	b := Bcdetail{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&b.Bcdcodeid, &b.Bcdcode, &b.Bcdtariff, &b.Bcdsubtariff, &b.Bcdrouting, &b.Bcdminspend, &b.Bcdoptioncode, &b.Bcdcount, &b.Bcdgross, &b.Bcdnett, &b.Bcdsparen1, &b.Bcdsparec1, &b.EquinoxPrn, &b.EquinoxLrn, &b.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &b, nil
}
