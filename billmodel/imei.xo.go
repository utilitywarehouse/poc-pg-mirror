// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/lib/pq"
)

// Imei represents a row from 'equinox.imei'.
type Imei struct {
	ImeiIemi        sql.NullString  `json:"imei_iemi"`        // imei_iemi
	ImeiMake        sql.NullString  `json:"imei_make"`        // imei_make
	ImeiModel       sql.NullString  `json:"imei_model"`       // imei_model
	ImeiReplacecost sql.NullFloat64 `json:"imei_replacecost"` // imei_replacecost
	ImeiRPC         sql.NullInt64   `json:"imei_rpc"`         // imei_rpc
	ImeiMpNone      sql.NullFloat64 `json:"imei_mp_none"`     // imei_mp_none
	ImeiMp1         sql.NullFloat64 `json:"imei_mp_1"`        // imei_mp_1
	ImeiMp2         sql.NullFloat64 `json:"imei_mp_2"`        // imei_mp_2
	ImeiMp3         sql.NullFloat64 `json:"imei_mp_3"`        // imei_mp_3
	ImeiRPCCode     sql.NullString  `json:"imei_rpc_code"`    // imei_rpc_code
	ImeiSubLevel    sql.NullString  `json:"imei_sub_level"`   // imei_sub_level
	ImeiSparen1     sql.NullFloat64 `json:"imei_sparen1"`     // imei_sparen1
	ImeiDateentered pq.NullTime     `json:"imei_dateentered"` // imei_dateentered
	ImeiSupplier    sql.NullString  `json:"imei_supplier"`    // imei_supplier
	ImeiUpc         sql.NullString  `json:"imei_upc"`         // imei_upc
	EquinoxLrn      int64           `json:"equinox_lrn"`      // equinox_lrn
	EquinoxSec      sql.NullInt64   `json:"equinox_sec"`      // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Imei exists in the database.
func (i *Imei) Exists() bool {
	return i._exists
}

// Deleted provides information if the Imei has been deleted from the database.
func (i *Imei) Deleted() bool {
	return i._deleted
}

// Insert inserts the Imei to the database.
func (i *Imei) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if i._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.imei (` +
		`imei_iemi, imei_make, imei_model, imei_replacecost, imei_rpc, imei_mp_none, imei_mp_1, imei_mp_2, imei_mp_3, imei_rpc_code, imei_sub_level, imei_sparen1, imei_dateentered, imei_supplier, imei_upc, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, i.ImeiIemi, i.ImeiMake, i.ImeiModel, i.ImeiReplacecost, i.ImeiRPC, i.ImeiMpNone, i.ImeiMp1, i.ImeiMp2, i.ImeiMp3, i.ImeiRPCCode, i.ImeiSubLevel, i.ImeiSparen1, i.ImeiDateentered, i.ImeiSupplier, i.ImeiUpc, i.EquinoxSec)
	err = db.QueryRow(sqlstr, i.ImeiIemi, i.ImeiMake, i.ImeiModel, i.ImeiReplacecost, i.ImeiRPC, i.ImeiMpNone, i.ImeiMp1, i.ImeiMp2, i.ImeiMp3, i.ImeiRPCCode, i.ImeiSubLevel, i.ImeiSparen1, i.ImeiDateentered, i.ImeiSupplier, i.ImeiUpc, i.EquinoxSec).Scan(&i.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	i._exists = true

	return nil
}

// Update updates the Imei in the database.
func (i *Imei) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !i._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if i._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.imei SET (` +
		`imei_iemi, imei_make, imei_model, imei_replacecost, imei_rpc, imei_mp_none, imei_mp_1, imei_mp_2, imei_mp_3, imei_rpc_code, imei_sub_level, imei_sparen1, imei_dateentered, imei_supplier, imei_upc, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16` +
		`) WHERE equinox_lrn = $17`

	// run query
	XOLog(sqlstr, i.ImeiIemi, i.ImeiMake, i.ImeiModel, i.ImeiReplacecost, i.ImeiRPC, i.ImeiMpNone, i.ImeiMp1, i.ImeiMp2, i.ImeiMp3, i.ImeiRPCCode, i.ImeiSubLevel, i.ImeiSparen1, i.ImeiDateentered, i.ImeiSupplier, i.ImeiUpc, i.EquinoxSec, i.EquinoxLrn)
	_, err = db.Exec(sqlstr, i.ImeiIemi, i.ImeiMake, i.ImeiModel, i.ImeiReplacecost, i.ImeiRPC, i.ImeiMpNone, i.ImeiMp1, i.ImeiMp2, i.ImeiMp3, i.ImeiRPCCode, i.ImeiSubLevel, i.ImeiSparen1, i.ImeiDateentered, i.ImeiSupplier, i.ImeiUpc, i.EquinoxSec, i.EquinoxLrn)
	return err
}

// Save saves the Imei to the database.
func (i *Imei) Save(db XODB) error {
	if i.Exists() {
		return i.Update(db)
	}

	return i.Insert(db)
}

// Upsert performs an upsert for Imei.
//
// NOTE: PostgreSQL 9.5+ only
func (i *Imei) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if i._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.imei (` +
		`imei_iemi, imei_make, imei_model, imei_replacecost, imei_rpc, imei_mp_none, imei_mp_1, imei_mp_2, imei_mp_3, imei_rpc_code, imei_sub_level, imei_sparen1, imei_dateentered, imei_supplier, imei_upc, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`imei_iemi, imei_make, imei_model, imei_replacecost, imei_rpc, imei_mp_none, imei_mp_1, imei_mp_2, imei_mp_3, imei_rpc_code, imei_sub_level, imei_sparen1, imei_dateentered, imei_supplier, imei_upc, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.imei_iemi, EXCLUDED.imei_make, EXCLUDED.imei_model, EXCLUDED.imei_replacecost, EXCLUDED.imei_rpc, EXCLUDED.imei_mp_none, EXCLUDED.imei_mp_1, EXCLUDED.imei_mp_2, EXCLUDED.imei_mp_3, EXCLUDED.imei_rpc_code, EXCLUDED.imei_sub_level, EXCLUDED.imei_sparen1, EXCLUDED.imei_dateentered, EXCLUDED.imei_supplier, EXCLUDED.imei_upc, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, i.ImeiIemi, i.ImeiMake, i.ImeiModel, i.ImeiReplacecost, i.ImeiRPC, i.ImeiMpNone, i.ImeiMp1, i.ImeiMp2, i.ImeiMp3, i.ImeiRPCCode, i.ImeiSubLevel, i.ImeiSparen1, i.ImeiDateentered, i.ImeiSupplier, i.ImeiUpc, i.EquinoxLrn, i.EquinoxSec)
	_, err = db.Exec(sqlstr, i.ImeiIemi, i.ImeiMake, i.ImeiModel, i.ImeiReplacecost, i.ImeiRPC, i.ImeiMpNone, i.ImeiMp1, i.ImeiMp2, i.ImeiMp3, i.ImeiRPCCode, i.ImeiSubLevel, i.ImeiSparen1, i.ImeiDateentered, i.ImeiSupplier, i.ImeiUpc, i.EquinoxLrn, i.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	i._exists = true

	return nil
}

// Delete deletes the Imei from the database.
func (i *Imei) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !i._exists {
		return nil
	}

	// if deleted, bail
	if i._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.imei WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, i.EquinoxLrn)
	_, err = db.Exec(sqlstr, i.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	i._deleted = true

	return nil
}

// ImeiByEquinoxLrn retrieves a row from 'equinox.imei' as a Imei.
//
// Generated from index 'imei_pkey'.
func ImeiByEquinoxLrn(db XODB, equinoxLrn int64) (*Imei, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`imei_iemi, imei_make, imei_model, imei_replacecost, imei_rpc, imei_mp_none, imei_mp_1, imei_mp_2, imei_mp_3, imei_rpc_code, imei_sub_level, imei_sparen1, imei_dateentered, imei_supplier, imei_upc, equinox_lrn, equinox_sec ` +
		`FROM equinox.imei ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	i := Imei{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&i.ImeiIemi, &i.ImeiMake, &i.ImeiModel, &i.ImeiReplacecost, &i.ImeiRPC, &i.ImeiMpNone, &i.ImeiMp1, &i.ImeiMp2, &i.ImeiMp3, &i.ImeiRPCCode, &i.ImeiSubLevel, &i.ImeiSparen1, &i.ImeiDateentered, &i.ImeiSupplier, &i.ImeiUpc, &i.EquinoxLrn, &i.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &i, nil
}
