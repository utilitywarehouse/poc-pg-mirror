// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// Hol2014o represents a row from 'equinox.hol2014o'.
type Hol2014o struct {
	Hol14opartnerid sql.NullString `json:"hol14opartnerid"` // hol14opartnerid
	EquinoxLrn      int64          `json:"equinox_lrn"`     // equinox_lrn
	EquinoxSec      sql.NullInt64  `json:"equinox_sec"`     // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Hol2014o exists in the database.
func (h *Hol2014o) Exists() bool {
	return h._exists
}

// Deleted provides information if the Hol2014o has been deleted from the database.
func (h *Hol2014o) Deleted() bool {
	return h._deleted
}

// Insert inserts the Hol2014o to the database.
func (h *Hol2014o) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if h._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.hol2014o (` +
		`hol14opartnerid, equinox_sec` +
		`) VALUES (` +
		`$1, $2` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, h.Hol14opartnerid, h.EquinoxSec)
	err = db.QueryRow(sqlstr, h.Hol14opartnerid, h.EquinoxSec).Scan(&h.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	h._exists = true

	return nil
}

// Update updates the Hol2014o in the database.
func (h *Hol2014o) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !h._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if h._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.hol2014o SET (` +
		`hol14opartnerid, equinox_sec` +
		`) = ( ` +
		`$1, $2` +
		`) WHERE equinox_lrn = $3`

	// run query
	XOLog(sqlstr, h.Hol14opartnerid, h.EquinoxSec, h.EquinoxLrn)
	_, err = db.Exec(sqlstr, h.Hol14opartnerid, h.EquinoxSec, h.EquinoxLrn)
	return err
}

// Save saves the Hol2014o to the database.
func (h *Hol2014o) Save(db XODB) error {
	if h.Exists() {
		return h.Update(db)
	}

	return h.Insert(db)
}

// Upsert performs an upsert for Hol2014o.
//
// NOTE: PostgreSQL 9.5+ only
func (h *Hol2014o) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if h._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.hol2014o (` +
		`hol14opartnerid, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`hol14opartnerid, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.hol14opartnerid, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, h.Hol14opartnerid, h.EquinoxLrn, h.EquinoxSec)
	_, err = db.Exec(sqlstr, h.Hol14opartnerid, h.EquinoxLrn, h.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	h._exists = true

	return nil
}

// Delete deletes the Hol2014o from the database.
func (h *Hol2014o) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !h._exists {
		return nil
	}

	// if deleted, bail
	if h._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.hol2014o WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, h.EquinoxLrn)
	_, err = db.Exec(sqlstr, h.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	h._deleted = true

	return nil
}

// Hol2014oByEquinoxLrn retrieves a row from 'equinox.hol2014o' as a Hol2014o.
//
// Generated from index 'hol2014o_pkey'.
func Hol2014oByEquinoxLrn(db XODB, equinoxLrn int64) (*Hol2014o, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`hol14opartnerid, equinox_lrn, equinox_sec ` +
		`FROM equinox.hol2014o ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	h := Hol2014o{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&h.Hol14opartnerid, &h.EquinoxLrn, &h.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &h, nil
}
