// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// Whldcomm represents a row from 'equinox.whldcomm'.
type Whldcomm struct {
	Wcpartnerid      sql.NullString  `json:"wcpartnerid"`      // wcpartnerid
	Wcperiodwithheld sql.NullString  `json:"wcperiodwithheld"` // wcperiodwithheld
	Wcperiodpaid     sql.NullString  `json:"wcperiodpaid"`     // wcperiodpaid
	Wctype           sql.NullString  `json:"wctype"`           // wctype
	Wcstatus         sql.NullString  `json:"wcstatus"`         // wcstatus
	Wcamount         sql.NullFloat64 `json:"wcamount"`         // wcamount
	EquinoxLrn       int64           `json:"equinox_lrn"`      // equinox_lrn
	EquinoxSec       sql.NullInt64   `json:"equinox_sec"`      // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Whldcomm exists in the database.
func (w *Whldcomm) Exists() bool {
	return w._exists
}

// Deleted provides information if the Whldcomm has been deleted from the database.
func (w *Whldcomm) Deleted() bool {
	return w._deleted
}

// Insert inserts the Whldcomm to the database.
func (w *Whldcomm) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if w._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.whldcomm (` +
		`wcpartnerid, wcperiodwithheld, wcperiodpaid, wctype, wcstatus, wcamount, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, w.Wcpartnerid, w.Wcperiodwithheld, w.Wcperiodpaid, w.Wctype, w.Wcstatus, w.Wcamount, w.EquinoxSec)
	err = db.QueryRow(sqlstr, w.Wcpartnerid, w.Wcperiodwithheld, w.Wcperiodpaid, w.Wctype, w.Wcstatus, w.Wcamount, w.EquinoxSec).Scan(&w.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	w._exists = true

	return nil
}

// Update updates the Whldcomm in the database.
func (w *Whldcomm) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !w._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if w._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.whldcomm SET (` +
		`wcpartnerid, wcperiodwithheld, wcperiodpaid, wctype, wcstatus, wcamount, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`) WHERE equinox_lrn = $8`

	// run query
	XOLog(sqlstr, w.Wcpartnerid, w.Wcperiodwithheld, w.Wcperiodpaid, w.Wctype, w.Wcstatus, w.Wcamount, w.EquinoxSec, w.EquinoxLrn)
	_, err = db.Exec(sqlstr, w.Wcpartnerid, w.Wcperiodwithheld, w.Wcperiodpaid, w.Wctype, w.Wcstatus, w.Wcamount, w.EquinoxSec, w.EquinoxLrn)
	return err
}

// Save saves the Whldcomm to the database.
func (w *Whldcomm) Save(db XODB) error {
	if w.Exists() {
		return w.Update(db)
	}

	return w.Insert(db)
}

// Upsert performs an upsert for Whldcomm.
//
// NOTE: PostgreSQL 9.5+ only
func (w *Whldcomm) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if w._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.whldcomm (` +
		`wcpartnerid, wcperiodwithheld, wcperiodpaid, wctype, wcstatus, wcamount, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`wcpartnerid, wcperiodwithheld, wcperiodpaid, wctype, wcstatus, wcamount, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.wcpartnerid, EXCLUDED.wcperiodwithheld, EXCLUDED.wcperiodpaid, EXCLUDED.wctype, EXCLUDED.wcstatus, EXCLUDED.wcamount, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, w.Wcpartnerid, w.Wcperiodwithheld, w.Wcperiodpaid, w.Wctype, w.Wcstatus, w.Wcamount, w.EquinoxLrn, w.EquinoxSec)
	_, err = db.Exec(sqlstr, w.Wcpartnerid, w.Wcperiodwithheld, w.Wcperiodpaid, w.Wctype, w.Wcstatus, w.Wcamount, w.EquinoxLrn, w.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	w._exists = true

	return nil
}

// Delete deletes the Whldcomm from the database.
func (w *Whldcomm) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !w._exists {
		return nil
	}

	// if deleted, bail
	if w._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.whldcomm WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, w.EquinoxLrn)
	_, err = db.Exec(sqlstr, w.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	w._deleted = true

	return nil
}

// WhldcommByEquinoxLrn retrieves a row from 'equinox.whldcomm' as a Whldcomm.
//
// Generated from index 'whldcomm_pkey'.
func WhldcommByEquinoxLrn(db XODB, equinoxLrn int64) (*Whldcomm, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`wcpartnerid, wcperiodwithheld, wcperiodpaid, wctype, wcstatus, wcamount, equinox_lrn, equinox_sec ` +
		`FROM equinox.whldcomm ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	w := Whldcomm{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&w.Wcpartnerid, &w.Wcperiodwithheld, &w.Wcperiodpaid, &w.Wctype, &w.Wcstatus, &w.Wcamount, &w.EquinoxLrn, &w.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &w, nil
}
