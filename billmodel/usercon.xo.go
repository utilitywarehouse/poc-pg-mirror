// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"

	"github.com/lib/pq"
)

// Usercon represents a row from 'equinox.usercons'.
type Usercon struct {
	Userconsid       sql.NullInt64  `json:"userconsid"`       // userconsid
	Userconslogin    sql.NullString `json:"userconslogin"`    // userconslogin
	Userconsname     sql.NullString `json:"userconsname"`     // userconsname
	Userconsintime   pq.NullTime    `json:"userconsintime"`   // userconsintime
	Userconsindate   pq.NullTime    `json:"userconsindate"`   // userconsindate
	Userconsouttime  pq.NullTime    `json:"userconsouttime"`  // userconsouttime
	Userconsoutdate  pq.NullTime    `json:"userconsoutdate"`  // userconsoutdate
	Userconsclient   sql.NullString `json:"userconsclient"`   // userconsclient
	Userconsdeptid   sql.NullString `json:"userconsdeptid"`   // userconsdeptid
	Userconsdeptname sql.NullString `json:"userconsdeptname"` // userconsdeptname
	Userconsapp      sql.NullString `json:"userconsapp"`      // userconsapp
	Userconsaddition sql.NullInt64  `json:"userconsaddition"` // userconsaddition
	Userconsmachine  sql.NullString `json:"userconsmachine"`  // userconsmachine
	Userconsclientdr sql.NullString `json:"userconsclientdr"` // userconsclientdr
	Userconsusrgrp   sql.NullString `json:"userconsusrgrp"`   // userconsusrgrp
	Userconsspared1  pq.NullTime    `json:"userconsspared1"`  // userconsspared1
	Userconssparec1  sql.NullString `json:"userconssparec1"`  // userconssparec1
	EquinoxLrn       int64          `json:"equinox_lrn"`      // equinox_lrn
	EquinoxSec       sql.NullInt64  `json:"equinox_sec"`      // equinox_sec
}

func AllUsercon(db XODB, callback func(x Usercon) bool) error {

	// sql query
	const sqlstr = `SELECT ` +
		`userconsid, userconslogin, userconsname, userconsintime, userconsindate, userconsouttime, userconsoutdate, userconsclient, userconsdeptid, userconsdeptname, userconsapp, userconsaddition, userconsmachine, userconsclientdr, userconsusrgrp, userconsspared1, userconssparec1, equinox_lrn, equinox_sec ` +
		`FROM equinox.usercons `

	q, err := db.Query(sqlstr)

	if err != nil {
		return err
	}
	defer q.Close()

	// load results
	for q.Next() {
		u := Usercon{}

		// scan
		err = q.Scan(&u.Userconsid, &u.Userconslogin, &u.Userconsname, &u.Userconsintime, &u.Userconsindate, &u.Userconsouttime, &u.Userconsoutdate, &u.Userconsclient, &u.Userconsdeptid, &u.Userconsdeptname, &u.Userconsapp, &u.Userconsaddition, &u.Userconsmachine, &u.Userconsclientdr, &u.Userconsusrgrp, &u.Userconsspared1, &u.Userconssparec1, &u.EquinoxLrn, &u.EquinoxSec)
		if err != nil {
			return err
		}
		if !callback(u) {
			return nil
		}
	}

	return nil
}

// UserconByEquinoxLrn retrieves a row from 'equinox.usercons' as a Usercon.
//
// Generated from index 'usercons_pkey'.
func UserconByEquinoxLrn(db XODB, equinoxLrn int64) (*Usercon, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`userconsid, userconslogin, userconsname, userconsintime, userconsindate, userconsouttime, userconsoutdate, userconsclient, userconsdeptid, userconsdeptname, userconsapp, userconsaddition, userconsmachine, userconsclientdr, userconsusrgrp, userconsspared1, userconssparec1, equinox_lrn, equinox_sec ` +
		`FROM equinox.usercons ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	u := Usercon{}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&u.Userconsid, &u.Userconslogin, &u.Userconsname, &u.Userconsintime, &u.Userconsindate, &u.Userconsouttime, &u.Userconsoutdate, &u.Userconsclient, &u.Userconsdeptid, &u.Userconsdeptname, &u.Userconsapp, &u.Userconsaddition, &u.Userconsmachine, &u.Userconsclientdr, &u.Userconsusrgrp, &u.Userconsspared1, &u.Userconssparec1, &u.EquinoxLrn, &u.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &u, nil
}
