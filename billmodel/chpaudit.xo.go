// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/lib/pq"
)

// Chpaudit represents a row from 'equinox.chpaudit'.
type Chpaudit struct {
	Chpauddt     pq.NullTime    `json:"chpauddt"`     // chpauddt
	Chpaudtm     pq.NullTime    `json:"chpaudtm"`     // chpaudtm
	Chpauduser   sql.NullString `json:"chpauduser"`   // chpauduser
	Chpaudaction sql.NullInt64  `json:"chpaudaction"` // chpaudaction
	EquinoxPrn   sql.NullInt64  `json:"equinox_prn"`  // equinox_prn
	EquinoxLrn   int64          `json:"equinox_lrn"`  // equinox_lrn
	EquinoxSec   sql.NullInt64  `json:"equinox_sec"`  // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Chpaudit exists in the database.
func (c *Chpaudit) Exists() bool {
	return c._exists
}

// Deleted provides information if the Chpaudit has been deleted from the database.
func (c *Chpaudit) Deleted() bool {
	return c._deleted
}

// Insert inserts the Chpaudit to the database.
func (c *Chpaudit) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.chpaudit (` +
		`chpauddt, chpaudtm, chpauduser, chpaudaction, equinox_prn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, c.Chpauddt, c.Chpaudtm, c.Chpauduser, c.Chpaudaction, c.EquinoxPrn, c.EquinoxSec)
	err = db.QueryRow(sqlstr, c.Chpauddt, c.Chpaudtm, c.Chpauduser, c.Chpaudaction, c.EquinoxPrn, c.EquinoxSec).Scan(&c.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Update updates the Chpaudit in the database.
func (c *Chpaudit) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if c._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.chpaudit SET (` +
		`chpauddt, chpaudtm, chpauduser, chpaudaction, equinox_prn, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6` +
		`) WHERE equinox_lrn = $7`

	// run query
	XOLog(sqlstr, c.Chpauddt, c.Chpaudtm, c.Chpauduser, c.Chpaudaction, c.EquinoxPrn, c.EquinoxSec, c.EquinoxLrn)
	_, err = db.Exec(sqlstr, c.Chpauddt, c.Chpaudtm, c.Chpauduser, c.Chpaudaction, c.EquinoxPrn, c.EquinoxSec, c.EquinoxLrn)
	return err
}

// Save saves the Chpaudit to the database.
func (c *Chpaudit) Save(db XODB) error {
	if c.Exists() {
		return c.Update(db)
	}

	return c.Insert(db)
}

// Upsert performs an upsert for Chpaudit.
//
// NOTE: PostgreSQL 9.5+ only
func (c *Chpaudit) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.chpaudit (` +
		`chpauddt, chpaudtm, chpauduser, chpaudaction, equinox_prn, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`chpauddt, chpaudtm, chpauduser, chpaudaction, equinox_prn, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.chpauddt, EXCLUDED.chpaudtm, EXCLUDED.chpauduser, EXCLUDED.chpaudaction, EXCLUDED.equinox_prn, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, c.Chpauddt, c.Chpaudtm, c.Chpauduser, c.Chpaudaction, c.EquinoxPrn, c.EquinoxLrn, c.EquinoxSec)
	_, err = db.Exec(sqlstr, c.Chpauddt, c.Chpaudtm, c.Chpauduser, c.Chpaudaction, c.EquinoxPrn, c.EquinoxLrn, c.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Delete deletes the Chpaudit from the database.
func (c *Chpaudit) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return nil
	}

	// if deleted, bail
	if c._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.chpaudit WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, c.EquinoxLrn)
	_, err = db.Exec(sqlstr, c.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	c._deleted = true

	return nil
}

// ChpauditByEquinoxLrn retrieves a row from 'equinox.chpaudit' as a Chpaudit.
//
// Generated from index 'chpaudit_pkey'.
func ChpauditByEquinoxLrn(db XODB, equinoxLrn int64) (*Chpaudit, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`chpauddt, chpaudtm, chpauduser, chpaudaction, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.chpaudit ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	c := Chpaudit{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&c.Chpauddt, &c.Chpaudtm, &c.Chpauduser, &c.Chpaudaction, &c.EquinoxPrn, &c.EquinoxLrn, &c.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &c, nil
}
