// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// Promo represents a row from 'equinox.promo'.
type Promo struct {
	PromoCode  sql.NullString `json:"promo_code"`  // promo_code
	EquinoxLrn int64          `json:"equinox_lrn"` // equinox_lrn
	EquinoxSec sql.NullInt64  `json:"equinox_sec"` // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Promo exists in the database.
func (p *Promo) Exists() bool {
	return p._exists
}

// Deleted provides information if the Promo has been deleted from the database.
func (p *Promo) Deleted() bool {
	return p._deleted
}

// Insert inserts the Promo to the database.
func (p *Promo) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if p._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.promo (` +
		`promo_code, equinox_sec` +
		`) VALUES (` +
		`$1, $2` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, p.PromoCode, p.EquinoxSec)
	err = db.QueryRow(sqlstr, p.PromoCode, p.EquinoxSec).Scan(&p.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	p._exists = true

	return nil
}

// Update updates the Promo in the database.
func (p *Promo) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if p._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.promo SET (` +
		`promo_code, equinox_sec` +
		`) = ( ` +
		`$1, $2` +
		`) WHERE equinox_lrn = $3`

	// run query
	XOLog(sqlstr, p.PromoCode, p.EquinoxSec, p.EquinoxLrn)
	_, err = db.Exec(sqlstr, p.PromoCode, p.EquinoxSec, p.EquinoxLrn)
	return err
}

// Save saves the Promo to the database.
func (p *Promo) Save(db XODB) error {
	if p.Exists() {
		return p.Update(db)
	}

	return p.Insert(db)
}

// Upsert performs an upsert for Promo.
//
// NOTE: PostgreSQL 9.5+ only
func (p *Promo) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if p._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.promo (` +
		`promo_code, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`promo_code, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.promo_code, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, p.PromoCode, p.EquinoxLrn, p.EquinoxSec)
	_, err = db.Exec(sqlstr, p.PromoCode, p.EquinoxLrn, p.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	p._exists = true

	return nil
}

// Delete deletes the Promo from the database.
func (p *Promo) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return nil
	}

	// if deleted, bail
	if p._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.promo WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, p.EquinoxLrn)
	_, err = db.Exec(sqlstr, p.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	p._deleted = true

	return nil
}

// PromoByEquinoxLrn retrieves a row from 'equinox.promo' as a Promo.
//
// Generated from index 'promo_pkey'.
func PromoByEquinoxLrn(db XODB, equinoxLrn int64) (*Promo, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`promo_code, equinox_lrn, equinox_sec ` +
		`FROM equinox.promo ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	p := Promo{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&p.PromoCode, &p.EquinoxLrn, &p.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &p, nil
}
