// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"

	"github.com/lib/pq"
)

// Ammerch represents a row from 'equinox.ammerch'.
type Ammerch struct {
	Ammercid       sql.NullString `json:"ammercid"`       // ammercid
	Ammercname     sql.NullString `json:"ammercname"`     // ammercname
	Ammercdatefrom pq.NullTime    `json:"ammercdatefrom"` // ammercdatefrom
	Ammercdateto   pq.NullTime    `json:"ammercdateto"`   // ammercdateto
	EquinoxPrn     sql.NullInt64  `json:"equinox_prn"`    // equinox_prn
	EquinoxLrn     int64          `json:"equinox_lrn"`    // equinox_lrn
	EquinoxSec     sql.NullInt64  `json:"equinox_sec"`    // equinox_sec
}

func AllAmmerch(db XODB, callback func(x Ammerch) bool) error {

	// sql query
	const sqlstr = `SELECT ` +
		`ammercid, ammercname, ammercdatefrom, ammercdateto, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.ammerch `

	q, err := db.Query(sqlstr)

	if err != nil {
		return err
	}
	defer q.Close()

	// load results
	for q.Next() {
		a := Ammerch{}

		// scan
		err = q.Scan(&a.Ammercid, &a.Ammercname, &a.Ammercdatefrom, &a.Ammercdateto, &a.EquinoxPrn, &a.EquinoxLrn, &a.EquinoxSec)
		if err != nil {
			return err
		}
		if !callback(a) {
			return nil
		}
	}

	return nil
}

// AmmerchByEquinoxLrn retrieves a row from 'equinox.ammerch' as a Ammerch.
//
// Generated from index 'ammerch_pkey'.
func AmmerchByEquinoxLrn(db XODB, equinoxLrn int64) (*Ammerch, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`ammercid, ammercname, ammercdatefrom, ammercdateto, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.ammerch ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	a := Ammerch{}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&a.Ammercid, &a.Ammercname, &a.Ammercdatefrom, &a.Ammercdateto, &a.EquinoxPrn, &a.EquinoxLrn, &a.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &a, nil
}
