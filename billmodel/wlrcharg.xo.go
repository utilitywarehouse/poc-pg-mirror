// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// Wlrcharg represents a row from 'equinox.wlrcharg'.
type Wlrcharg struct {
	Wlrwa          sql.NullString `json:"wlrwa"`          // wlrwa
	Wlrw0          sql.NullString `json:"wlrw0"`          // wlrw0
	Wlrw1          sql.NullString `json:"wlrw1"`          // wlrw1
	Wlrw2          sql.NullString `json:"wlrw2"`          // wlrw2
	Wlrw3          sql.NullString `json:"wlrw3"`          // wlrw3
	Wlrw4          sql.NullString `json:"wlrw4"`          // wlrw4
	Wlrw5          sql.NullString `json:"wlrw5"`          // wlrw5
	Wlrw6          sql.NullString `json:"wlrw6"`          // wlrw6
	Wlrcnf         sql.NullString `json:"wlrcnf"`         // wlrcnf
	Wlrchargetype  sql.NullString `json:"wlrchargetype"`  // wlrchargetype
	Wlrbillcnfcode sql.NullString `json:"wlrbillcnfcode"` // wlrbillcnfcode
	Wlredrcode     sql.NullString `json:"wlredrcode"`     // wlredrcode
	Wlrw0t         sql.NullString `json:"wlrw0t"`         // wlrw0t
	Wlrw1t         sql.NullString `json:"wlrw1t"`         // wlrw1t
	Wlrw2t         sql.NullString `json:"wlrw2t"`         // wlrw2t
	Wlrw3t         sql.NullString `json:"wlrw3t"`         // wlrw3t
	Wlrw4t         sql.NullString `json:"wlrw4t"`         // wlrw4t
	Wlrw5t         sql.NullString `json:"wlrw5t"`         // wlrw5t
	Wlrw6t         sql.NullString `json:"wlrw6t"`         // wlrw6t
	EquinoxLrn     int64          `json:"equinox_lrn"`    // equinox_lrn
	EquinoxSec     sql.NullInt64  `json:"equinox_sec"`    // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Wlrcharg exists in the database.
func (w *Wlrcharg) Exists() bool {
	return w._exists
}

// Deleted provides information if the Wlrcharg has been deleted from the database.
func (w *Wlrcharg) Deleted() bool {
	return w._deleted
}

// Insert inserts the Wlrcharg to the database.
func (w *Wlrcharg) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if w._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.wlrcharg (` +
		`wlrwa, wlrw0, wlrw1, wlrw2, wlrw3, wlrw4, wlrw5, wlrw6, wlrcnf, wlrchargetype, wlrbillcnfcode, wlredrcode, wlrw0t, wlrw1t, wlrw2t, wlrw3t, wlrw4t, wlrw5t, wlrw6t, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, w.Wlrwa, w.Wlrw0, w.Wlrw1, w.Wlrw2, w.Wlrw3, w.Wlrw4, w.Wlrw5, w.Wlrw6, w.Wlrcnf, w.Wlrchargetype, w.Wlrbillcnfcode, w.Wlredrcode, w.Wlrw0t, w.Wlrw1t, w.Wlrw2t, w.Wlrw3t, w.Wlrw4t, w.Wlrw5t, w.Wlrw6t, w.EquinoxSec)
	err = db.QueryRow(sqlstr, w.Wlrwa, w.Wlrw0, w.Wlrw1, w.Wlrw2, w.Wlrw3, w.Wlrw4, w.Wlrw5, w.Wlrw6, w.Wlrcnf, w.Wlrchargetype, w.Wlrbillcnfcode, w.Wlredrcode, w.Wlrw0t, w.Wlrw1t, w.Wlrw2t, w.Wlrw3t, w.Wlrw4t, w.Wlrw5t, w.Wlrw6t, w.EquinoxSec).Scan(&w.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	w._exists = true

	return nil
}

// Update updates the Wlrcharg in the database.
func (w *Wlrcharg) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !w._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if w._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.wlrcharg SET (` +
		`wlrwa, wlrw0, wlrw1, wlrw2, wlrw3, wlrw4, wlrw5, wlrw6, wlrcnf, wlrchargetype, wlrbillcnfcode, wlredrcode, wlrw0t, wlrw1t, wlrw2t, wlrw3t, wlrw4t, wlrw5t, wlrw6t, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20` +
		`) WHERE equinox_lrn = $21`

	// run query
	XOLog(sqlstr, w.Wlrwa, w.Wlrw0, w.Wlrw1, w.Wlrw2, w.Wlrw3, w.Wlrw4, w.Wlrw5, w.Wlrw6, w.Wlrcnf, w.Wlrchargetype, w.Wlrbillcnfcode, w.Wlredrcode, w.Wlrw0t, w.Wlrw1t, w.Wlrw2t, w.Wlrw3t, w.Wlrw4t, w.Wlrw5t, w.Wlrw6t, w.EquinoxSec, w.EquinoxLrn)
	_, err = db.Exec(sqlstr, w.Wlrwa, w.Wlrw0, w.Wlrw1, w.Wlrw2, w.Wlrw3, w.Wlrw4, w.Wlrw5, w.Wlrw6, w.Wlrcnf, w.Wlrchargetype, w.Wlrbillcnfcode, w.Wlredrcode, w.Wlrw0t, w.Wlrw1t, w.Wlrw2t, w.Wlrw3t, w.Wlrw4t, w.Wlrw5t, w.Wlrw6t, w.EquinoxSec, w.EquinoxLrn)
	return err
}

// Save saves the Wlrcharg to the database.
func (w *Wlrcharg) Save(db XODB) error {
	if w.Exists() {
		return w.Update(db)
	}

	return w.Insert(db)
}

// Upsert performs an upsert for Wlrcharg.
//
// NOTE: PostgreSQL 9.5+ only
func (w *Wlrcharg) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if w._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.wlrcharg (` +
		`wlrwa, wlrw0, wlrw1, wlrw2, wlrw3, wlrw4, wlrw5, wlrw6, wlrcnf, wlrchargetype, wlrbillcnfcode, wlredrcode, wlrw0t, wlrw1t, wlrw2t, wlrw3t, wlrw4t, wlrw5t, wlrw6t, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`wlrwa, wlrw0, wlrw1, wlrw2, wlrw3, wlrw4, wlrw5, wlrw6, wlrcnf, wlrchargetype, wlrbillcnfcode, wlredrcode, wlrw0t, wlrw1t, wlrw2t, wlrw3t, wlrw4t, wlrw5t, wlrw6t, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.wlrwa, EXCLUDED.wlrw0, EXCLUDED.wlrw1, EXCLUDED.wlrw2, EXCLUDED.wlrw3, EXCLUDED.wlrw4, EXCLUDED.wlrw5, EXCLUDED.wlrw6, EXCLUDED.wlrcnf, EXCLUDED.wlrchargetype, EXCLUDED.wlrbillcnfcode, EXCLUDED.wlredrcode, EXCLUDED.wlrw0t, EXCLUDED.wlrw1t, EXCLUDED.wlrw2t, EXCLUDED.wlrw3t, EXCLUDED.wlrw4t, EXCLUDED.wlrw5t, EXCLUDED.wlrw6t, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, w.Wlrwa, w.Wlrw0, w.Wlrw1, w.Wlrw2, w.Wlrw3, w.Wlrw4, w.Wlrw5, w.Wlrw6, w.Wlrcnf, w.Wlrchargetype, w.Wlrbillcnfcode, w.Wlredrcode, w.Wlrw0t, w.Wlrw1t, w.Wlrw2t, w.Wlrw3t, w.Wlrw4t, w.Wlrw5t, w.Wlrw6t, w.EquinoxLrn, w.EquinoxSec)
	_, err = db.Exec(sqlstr, w.Wlrwa, w.Wlrw0, w.Wlrw1, w.Wlrw2, w.Wlrw3, w.Wlrw4, w.Wlrw5, w.Wlrw6, w.Wlrcnf, w.Wlrchargetype, w.Wlrbillcnfcode, w.Wlredrcode, w.Wlrw0t, w.Wlrw1t, w.Wlrw2t, w.Wlrw3t, w.Wlrw4t, w.Wlrw5t, w.Wlrw6t, w.EquinoxLrn, w.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	w._exists = true

	return nil
}

// Delete deletes the Wlrcharg from the database.
func (w *Wlrcharg) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !w._exists {
		return nil
	}

	// if deleted, bail
	if w._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.wlrcharg WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, w.EquinoxLrn)
	_, err = db.Exec(sqlstr, w.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	w._deleted = true

	return nil
}

// WlrchargByEquinoxLrn retrieves a row from 'equinox.wlrcharg' as a Wlrcharg.
//
// Generated from index 'wlrcharg_pkey'.
func WlrchargByEquinoxLrn(db XODB, equinoxLrn int64) (*Wlrcharg, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`wlrwa, wlrw0, wlrw1, wlrw2, wlrw3, wlrw4, wlrw5, wlrw6, wlrcnf, wlrchargetype, wlrbillcnfcode, wlredrcode, wlrw0t, wlrw1t, wlrw2t, wlrw3t, wlrw4t, wlrw5t, wlrw6t, equinox_lrn, equinox_sec ` +
		`FROM equinox.wlrcharg ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	w := Wlrcharg{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&w.Wlrwa, &w.Wlrw0, &w.Wlrw1, &w.Wlrw2, &w.Wlrw3, &w.Wlrw4, &w.Wlrw5, &w.Wlrw6, &w.Wlrcnf, &w.Wlrchargetype, &w.Wlrbillcnfcode, &w.Wlredrcode, &w.Wlrw0t, &w.Wlrw1t, &w.Wlrw2t, &w.Wlrw3t, &w.Wlrw4t, &w.Wlrw5t, &w.Wlrw6t, &w.EquinoxLrn, &w.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &w, nil
}
