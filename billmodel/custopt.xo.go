// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/lib/pq"
)

// Custopt represents a row from 'equinox.custopts'.
type Custopt struct {
	Custrmoptid      sql.NullString  `json:"custrmoptid"`      // custrmoptid
	Custrmsetup      sql.NullFloat64 `json:"custrmsetup"`      // custrmsetup
	Custrmmonthly    sql.NullFloat64 `json:"custrmmonthly"`    // custrmmonthly
	Custrmfreemins   sql.NullInt64   `json:"custrmfreemins"`   // custrmfreemins
	Custrmstartdate  pq.NullTime     `json:"custrmstartdate"`  // custrmstartdate
	Custrmenddate    pq.NullTime     `json:"custrmenddate"`    // custrmenddate
	Custrmpaiduntil  pq.NullTime     `json:"custrmpaiduntil"`  // custrmpaiduntil
	Custrmpayuntil   pq.NullTime     `json:"custrmpayuntil"`   // custrmpayuntil
	Custrmprorata    sql.NullInt64   `json:"custrmprorata"`    // custrmprorata
	Custrmmonthsadv  sql.NullInt64   `json:"custrmmonthsadv"`  // custrmmonthsadv
	Custrmoneoffbill sql.NullFloat64 `json:"custrmoneoffbill"` // custrmoneoffbill
	Custrmspecdeal   sql.NullInt64   `json:"custrmspecdeal"`   // custrmspecdeal
	Custrmpduntilbr  pq.NullTime     `json:"custrmpduntilbr"`  // custrmpduntilbr
	Custrmsparec1    sql.NullString  `json:"custrmsparec1"`    // custrmsparec1
	Custrmspared1    pq.NullTime     `json:"custrmspared1"`    // custrmspared1
	Custrmdiscband   sql.NullString  `json:"custrmdiscband"`   // custrmdiscband
	Custrmdiscpercen sql.NullInt64   `json:"custrmdiscpercen"` // custrmdiscpercen
	Custrmwlrorder   sql.NullString  `json:"custrmwlrorder"`   // custrmwlrorder
	Custrmquantity   sql.NullInt64   `json:"custrmquantity"`   // custrmquantity
	Custrmsparen1    sql.NullFloat64 `json:"custrmsparen1"`    // custrmsparen1
	EquinoxPrn       sql.NullInt64   `json:"equinox_prn"`      // equinox_prn
	EquinoxLrn       int64           `json:"equinox_lrn"`      // equinox_lrn
	EquinoxSec       sql.NullInt64   `json:"equinox_sec"`      // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Custopt exists in the database.
func (c *Custopt) Exists() bool {
	return c._exists
}

// Deleted provides information if the Custopt has been deleted from the database.
func (c *Custopt) Deleted() bool {
	return c._deleted
}

// Insert inserts the Custopt to the database.
func (c *Custopt) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.custopts (` +
		`custrmoptid, custrmsetup, custrmmonthly, custrmfreemins, custrmstartdate, custrmenddate, custrmpaiduntil, custrmpayuntil, custrmprorata, custrmmonthsadv, custrmoneoffbill, custrmspecdeal, custrmpduntilbr, custrmsparec1, custrmspared1, custrmdiscband, custrmdiscpercen, custrmwlrorder, custrmquantity, custrmsparen1, equinox_prn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, c.Custrmoptid, c.Custrmsetup, c.Custrmmonthly, c.Custrmfreemins, c.Custrmstartdate, c.Custrmenddate, c.Custrmpaiduntil, c.Custrmpayuntil, c.Custrmprorata, c.Custrmmonthsadv, c.Custrmoneoffbill, c.Custrmspecdeal, c.Custrmpduntilbr, c.Custrmsparec1, c.Custrmspared1, c.Custrmdiscband, c.Custrmdiscpercen, c.Custrmwlrorder, c.Custrmquantity, c.Custrmsparen1, c.EquinoxPrn, c.EquinoxSec)
	err = db.QueryRow(sqlstr, c.Custrmoptid, c.Custrmsetup, c.Custrmmonthly, c.Custrmfreemins, c.Custrmstartdate, c.Custrmenddate, c.Custrmpaiduntil, c.Custrmpayuntil, c.Custrmprorata, c.Custrmmonthsadv, c.Custrmoneoffbill, c.Custrmspecdeal, c.Custrmpduntilbr, c.Custrmsparec1, c.Custrmspared1, c.Custrmdiscband, c.Custrmdiscpercen, c.Custrmwlrorder, c.Custrmquantity, c.Custrmsparen1, c.EquinoxPrn, c.EquinoxSec).Scan(&c.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Update updates the Custopt in the database.
func (c *Custopt) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if c._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.custopts SET (` +
		`custrmoptid, custrmsetup, custrmmonthly, custrmfreemins, custrmstartdate, custrmenddate, custrmpaiduntil, custrmpayuntil, custrmprorata, custrmmonthsadv, custrmoneoffbill, custrmspecdeal, custrmpduntilbr, custrmsparec1, custrmspared1, custrmdiscband, custrmdiscpercen, custrmwlrorder, custrmquantity, custrmsparen1, equinox_prn, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22` +
		`) WHERE equinox_lrn = $23`

	// run query
	XOLog(sqlstr, c.Custrmoptid, c.Custrmsetup, c.Custrmmonthly, c.Custrmfreemins, c.Custrmstartdate, c.Custrmenddate, c.Custrmpaiduntil, c.Custrmpayuntil, c.Custrmprorata, c.Custrmmonthsadv, c.Custrmoneoffbill, c.Custrmspecdeal, c.Custrmpduntilbr, c.Custrmsparec1, c.Custrmspared1, c.Custrmdiscband, c.Custrmdiscpercen, c.Custrmwlrorder, c.Custrmquantity, c.Custrmsparen1, c.EquinoxPrn, c.EquinoxSec, c.EquinoxLrn)
	_, err = db.Exec(sqlstr, c.Custrmoptid, c.Custrmsetup, c.Custrmmonthly, c.Custrmfreemins, c.Custrmstartdate, c.Custrmenddate, c.Custrmpaiduntil, c.Custrmpayuntil, c.Custrmprorata, c.Custrmmonthsadv, c.Custrmoneoffbill, c.Custrmspecdeal, c.Custrmpduntilbr, c.Custrmsparec1, c.Custrmspared1, c.Custrmdiscband, c.Custrmdiscpercen, c.Custrmwlrorder, c.Custrmquantity, c.Custrmsparen1, c.EquinoxPrn, c.EquinoxSec, c.EquinoxLrn)
	return err
}

// Save saves the Custopt to the database.
func (c *Custopt) Save(db XODB) error {
	if c.Exists() {
		return c.Update(db)
	}

	return c.Insert(db)
}

// Upsert performs an upsert for Custopt.
//
// NOTE: PostgreSQL 9.5+ only
func (c *Custopt) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.custopts (` +
		`custrmoptid, custrmsetup, custrmmonthly, custrmfreemins, custrmstartdate, custrmenddate, custrmpaiduntil, custrmpayuntil, custrmprorata, custrmmonthsadv, custrmoneoffbill, custrmspecdeal, custrmpduntilbr, custrmsparec1, custrmspared1, custrmdiscband, custrmdiscpercen, custrmwlrorder, custrmquantity, custrmsparen1, equinox_prn, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`custrmoptid, custrmsetup, custrmmonthly, custrmfreemins, custrmstartdate, custrmenddate, custrmpaiduntil, custrmpayuntil, custrmprorata, custrmmonthsadv, custrmoneoffbill, custrmspecdeal, custrmpduntilbr, custrmsparec1, custrmspared1, custrmdiscband, custrmdiscpercen, custrmwlrorder, custrmquantity, custrmsparen1, equinox_prn, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.custrmoptid, EXCLUDED.custrmsetup, EXCLUDED.custrmmonthly, EXCLUDED.custrmfreemins, EXCLUDED.custrmstartdate, EXCLUDED.custrmenddate, EXCLUDED.custrmpaiduntil, EXCLUDED.custrmpayuntil, EXCLUDED.custrmprorata, EXCLUDED.custrmmonthsadv, EXCLUDED.custrmoneoffbill, EXCLUDED.custrmspecdeal, EXCLUDED.custrmpduntilbr, EXCLUDED.custrmsparec1, EXCLUDED.custrmspared1, EXCLUDED.custrmdiscband, EXCLUDED.custrmdiscpercen, EXCLUDED.custrmwlrorder, EXCLUDED.custrmquantity, EXCLUDED.custrmsparen1, EXCLUDED.equinox_prn, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, c.Custrmoptid, c.Custrmsetup, c.Custrmmonthly, c.Custrmfreemins, c.Custrmstartdate, c.Custrmenddate, c.Custrmpaiduntil, c.Custrmpayuntil, c.Custrmprorata, c.Custrmmonthsadv, c.Custrmoneoffbill, c.Custrmspecdeal, c.Custrmpduntilbr, c.Custrmsparec1, c.Custrmspared1, c.Custrmdiscband, c.Custrmdiscpercen, c.Custrmwlrorder, c.Custrmquantity, c.Custrmsparen1, c.EquinoxPrn, c.EquinoxLrn, c.EquinoxSec)
	_, err = db.Exec(sqlstr, c.Custrmoptid, c.Custrmsetup, c.Custrmmonthly, c.Custrmfreemins, c.Custrmstartdate, c.Custrmenddate, c.Custrmpaiduntil, c.Custrmpayuntil, c.Custrmprorata, c.Custrmmonthsadv, c.Custrmoneoffbill, c.Custrmspecdeal, c.Custrmpduntilbr, c.Custrmsparec1, c.Custrmspared1, c.Custrmdiscband, c.Custrmdiscpercen, c.Custrmwlrorder, c.Custrmquantity, c.Custrmsparen1, c.EquinoxPrn, c.EquinoxLrn, c.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Delete deletes the Custopt from the database.
func (c *Custopt) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return nil
	}

	// if deleted, bail
	if c._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.custopts WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, c.EquinoxLrn)
	_, err = db.Exec(sqlstr, c.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	c._deleted = true

	return nil
}

// CustoptByEquinoxLrn retrieves a row from 'equinox.custopts' as a Custopt.
//
// Generated from index 'custopts_pkey'.
func CustoptByEquinoxLrn(db XODB, equinoxLrn int64) (*Custopt, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`custrmoptid, custrmsetup, custrmmonthly, custrmfreemins, custrmstartdate, custrmenddate, custrmpaiduntil, custrmpayuntil, custrmprorata, custrmmonthsadv, custrmoneoffbill, custrmspecdeal, custrmpduntilbr, custrmsparec1, custrmspared1, custrmdiscband, custrmdiscpercen, custrmwlrorder, custrmquantity, custrmsparen1, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.custopts ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	c := Custopt{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&c.Custrmoptid, &c.Custrmsetup, &c.Custrmmonthly, &c.Custrmfreemins, &c.Custrmstartdate, &c.Custrmenddate, &c.Custrmpaiduntil, &c.Custrmpayuntil, &c.Custrmprorata, &c.Custrmmonthsadv, &c.Custrmoneoffbill, &c.Custrmspecdeal, &c.Custrmpduntilbr, &c.Custrmsparec1, &c.Custrmspared1, &c.Custrmdiscband, &c.Custrmdiscpercen, &c.Custrmwlrorder, &c.Custrmquantity, &c.Custrmsparen1, &c.EquinoxPrn, &c.EquinoxLrn, &c.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &c, nil
}
