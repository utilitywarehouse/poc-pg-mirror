// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// OTrain represents a row from 'equinox.o_train'.
type OTrain struct {
	OtEventid  sql.NullString `json:"ot_eventid"`  // ot_eventid
	OtExecid   sql.NullString `json:"ot_execid"`   // ot_execid
	OtName     sql.NullString `json:"ot_name"`     // ot_name
	EquinoxPrn sql.NullInt64  `json:"equinox_prn"` // equinox_prn
	EquinoxLrn int64          `json:"equinox_lrn"` // equinox_lrn
	EquinoxSec sql.NullInt64  `json:"equinox_sec"` // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the OTrain exists in the database.
func (ot *OTrain) Exists() bool {
	return ot._exists
}

// Deleted provides information if the OTrain has been deleted from the database.
func (ot *OTrain) Deleted() bool {
	return ot._deleted
}

// Insert inserts the OTrain to the database.
func (ot *OTrain) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if ot._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.o_train (` +
		`ot_eventid, ot_execid, ot_name, equinox_prn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, ot.OtEventid, ot.OtExecid, ot.OtName, ot.EquinoxPrn, ot.EquinoxSec)
	err = db.QueryRow(sqlstr, ot.OtEventid, ot.OtExecid, ot.OtName, ot.EquinoxPrn, ot.EquinoxSec).Scan(&ot.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	ot._exists = true

	return nil
}

// Update updates the OTrain in the database.
func (ot *OTrain) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ot._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if ot._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.o_train SET (` +
		`ot_eventid, ot_execid, ot_name, equinox_prn, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5` +
		`) WHERE equinox_lrn = $6`

	// run query
	XOLog(sqlstr, ot.OtEventid, ot.OtExecid, ot.OtName, ot.EquinoxPrn, ot.EquinoxSec, ot.EquinoxLrn)
	_, err = db.Exec(sqlstr, ot.OtEventid, ot.OtExecid, ot.OtName, ot.EquinoxPrn, ot.EquinoxSec, ot.EquinoxLrn)
	return err
}

// Save saves the OTrain to the database.
func (ot *OTrain) Save(db XODB) error {
	if ot.Exists() {
		return ot.Update(db)
	}

	return ot.Insert(db)
}

// Upsert performs an upsert for OTrain.
//
// NOTE: PostgreSQL 9.5+ only
func (ot *OTrain) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if ot._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.o_train (` +
		`ot_eventid, ot_execid, ot_name, equinox_prn, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`ot_eventid, ot_execid, ot_name, equinox_prn, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.ot_eventid, EXCLUDED.ot_execid, EXCLUDED.ot_name, EXCLUDED.equinox_prn, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, ot.OtEventid, ot.OtExecid, ot.OtName, ot.EquinoxPrn, ot.EquinoxLrn, ot.EquinoxSec)
	_, err = db.Exec(sqlstr, ot.OtEventid, ot.OtExecid, ot.OtName, ot.EquinoxPrn, ot.EquinoxLrn, ot.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	ot._exists = true

	return nil
}

// Delete deletes the OTrain from the database.
func (ot *OTrain) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ot._exists {
		return nil
	}

	// if deleted, bail
	if ot._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.o_train WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, ot.EquinoxLrn)
	_, err = db.Exec(sqlstr, ot.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	ot._deleted = true

	return nil
}

// OTrainByEquinoxLrn retrieves a row from 'equinox.o_train' as a OTrain.
//
// Generated from index 'o_train_pkey'.
func OTrainByEquinoxLrn(db XODB, equinoxLrn int64) (*OTrain, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`ot_eventid, ot_execid, ot_name, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.o_train ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	ot := OTrain{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&ot.OtEventid, &ot.OtExecid, &ot.OtName, &ot.EquinoxPrn, &ot.EquinoxLrn, &ot.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &ot, nil
}
