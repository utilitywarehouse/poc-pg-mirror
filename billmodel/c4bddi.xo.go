// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/lib/pq"
)

// C4bddi represents a row from 'equinox.c4bddi'.
type C4bddi struct {
	C4bddiaccountno  sql.NullString `json:"c4bddiaccountno"`  // c4bddiaccountno
	C4bddiclifrom    sql.NullString `json:"c4bddiclifrom"`    // c4bddiclifrom
	C4bddiclito      sql.NullString `json:"c4bddiclito"`      // c4bddiclito
	C4bddiclibase    sql.NullString `json:"c4bddiclibase"`    // c4bddiclibase
	C4bnddistartdate pq.NullTime    `json:"c4bnddistartdate"` // c4bnddistartdate
	C4bddienddate    pq.NullTime    `json:"c4bddienddate"`    // c4bddienddate
	EquinoxLrn       int64          `json:"equinox_lrn"`      // equinox_lrn
	EquinoxSec       sql.NullInt64  `json:"equinox_sec"`      // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the C4bddi exists in the database.
func (c *C4bddi) Exists() bool {
	return c._exists
}

// Deleted provides information if the C4bddi has been deleted from the database.
func (c *C4bddi) Deleted() bool {
	return c._deleted
}

// Insert inserts the C4bddi to the database.
func (c *C4bddi) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.c4bddi (` +
		`c4bddiaccountno, c4bddiclifrom, c4bddiclito, c4bddiclibase, c4bnddistartdate, c4bddienddate, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, c.C4bddiaccountno, c.C4bddiclifrom, c.C4bddiclito, c.C4bddiclibase, c.C4bnddistartdate, c.C4bddienddate, c.EquinoxSec)
	err = db.QueryRow(sqlstr, c.C4bddiaccountno, c.C4bddiclifrom, c.C4bddiclito, c.C4bddiclibase, c.C4bnddistartdate, c.C4bddienddate, c.EquinoxSec).Scan(&c.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Update updates the C4bddi in the database.
func (c *C4bddi) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if c._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.c4bddi SET (` +
		`c4bddiaccountno, c4bddiclifrom, c4bddiclito, c4bddiclibase, c4bnddistartdate, c4bddienddate, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`) WHERE equinox_lrn = $8`

	// run query
	XOLog(sqlstr, c.C4bddiaccountno, c.C4bddiclifrom, c.C4bddiclito, c.C4bddiclibase, c.C4bnddistartdate, c.C4bddienddate, c.EquinoxSec, c.EquinoxLrn)
	_, err = db.Exec(sqlstr, c.C4bddiaccountno, c.C4bddiclifrom, c.C4bddiclito, c.C4bddiclibase, c.C4bnddistartdate, c.C4bddienddate, c.EquinoxSec, c.EquinoxLrn)
	return err
}

// Save saves the C4bddi to the database.
func (c *C4bddi) Save(db XODB) error {
	if c.Exists() {
		return c.Update(db)
	}

	return c.Insert(db)
}

// Upsert performs an upsert for C4bddi.
//
// NOTE: PostgreSQL 9.5+ only
func (c *C4bddi) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.c4bddi (` +
		`c4bddiaccountno, c4bddiclifrom, c4bddiclito, c4bddiclibase, c4bnddistartdate, c4bddienddate, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`c4bddiaccountno, c4bddiclifrom, c4bddiclito, c4bddiclibase, c4bnddistartdate, c4bddienddate, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.c4bddiaccountno, EXCLUDED.c4bddiclifrom, EXCLUDED.c4bddiclito, EXCLUDED.c4bddiclibase, EXCLUDED.c4bnddistartdate, EXCLUDED.c4bddienddate, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, c.C4bddiaccountno, c.C4bddiclifrom, c.C4bddiclito, c.C4bddiclibase, c.C4bnddistartdate, c.C4bddienddate, c.EquinoxLrn, c.EquinoxSec)
	_, err = db.Exec(sqlstr, c.C4bddiaccountno, c.C4bddiclifrom, c.C4bddiclito, c.C4bddiclibase, c.C4bnddistartdate, c.C4bddienddate, c.EquinoxLrn, c.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Delete deletes the C4bddi from the database.
func (c *C4bddi) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return nil
	}

	// if deleted, bail
	if c._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.c4bddi WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, c.EquinoxLrn)
	_, err = db.Exec(sqlstr, c.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	c._deleted = true

	return nil
}

// C4bddiByEquinoxLrn retrieves a row from 'equinox.c4bddi' as a C4bddi.
//
// Generated from index 'c4bddi_pkey'.
func C4bddiByEquinoxLrn(db XODB, equinoxLrn int64) (*C4bddi, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`c4bddiaccountno, c4bddiclifrom, c4bddiclito, c4bddiclibase, c4bnddistartdate, c4bddienddate, equinox_lrn, equinox_sec ` +
		`FROM equinox.c4bddi ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	c := C4bddi{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&c.C4bddiaccountno, &c.C4bddiclifrom, &c.C4bddiclito, &c.C4bddiclibase, &c.C4bnddistartdate, &c.C4bddienddate, &c.EquinoxLrn, &c.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &c, nil
}
