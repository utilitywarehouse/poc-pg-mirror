// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"

	"github.com/lib/pq"
)

// Gdcharge represents a row from 'equinox.gdcharge'.
type Gdcharge struct {
	Gdcstartdate pq.NullTime     `json:"gdcstartdate"` // gdcstartdate
	Gdcenddate   pq.NullTime     `json:"gdcenddate"`   // gdcenddate
	Gdcprovid    sql.NullString  `json:"gdcprovid"`    // gdcprovid
	Gdcrate      sql.NullFloat64 `json:"gdcrate"`      // gdcrate
	EquinoxPrn   sql.NullInt64   `json:"equinox_prn"`  // equinox_prn
	EquinoxLrn   int64           `json:"equinox_lrn"`  // equinox_lrn
	EquinoxSec   sql.NullInt64   `json:"equinox_sec"`  // equinox_sec
}

func AllGdcharge(db XODB, callback func(x Gdcharge) bool) error {

	// sql query
	const sqlstr = `SELECT ` +
		`gdcstartdate, gdcenddate, gdcprovid, gdcrate, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.gdcharge `

	q, err := db.Query(sqlstr)

	if err != nil {
		return err
	}
	defer q.Close()

	// load results
	for q.Next() {
		g := Gdcharge{}

		// scan
		err = q.Scan(&g.Gdcstartdate, &g.Gdcenddate, &g.Gdcprovid, &g.Gdcrate, &g.EquinoxPrn, &g.EquinoxLrn, &g.EquinoxSec)
		if err != nil {
			return err
		}
		if !callback(g) {
			return nil
		}
	}

	return nil
}

// GdchargeByEquinoxLrn retrieves a row from 'equinox.gdcharge' as a Gdcharge.
//
// Generated from index 'gdcharge_pkey'.
func GdchargeByEquinoxLrn(db XODB, equinoxLrn int64) (*Gdcharge, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`gdcstartdate, gdcenddate, gdcprovid, gdcrate, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.gdcharge ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	g := Gdcharge{}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&g.Gdcstartdate, &g.Gdcenddate, &g.Gdcprovid, &g.Gdcrate, &g.EquinoxPrn, &g.EquinoxLrn, &g.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &g, nil
}
