// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"

	"github.com/lib/pq"
)

// Udcpay represents a row from 'equinox.udcpay'.
type Udcpay struct {
	Udcpayment      sql.NullFloat64 `json:"udcpayment"`      // udcpayment
	Udcpaymentdate  pq.NullTime     `json:"udcpaymentdate"`  // udcpaymentdate
	Udcpaymenttype  sql.NullString  `json:"udcpaymenttype"`  // udcpaymenttype
	Udcpaymenttime  pq.NullTime     `json:"udcpaymenttime"`  // udcpaymenttime
	Udcpaymentno    sql.NullInt64   `json:"udcpaymentno"`    // udcpaymentno
	Udcpayvspcode   sql.NullString  `json:"udcpayvspcode"`   // udcpayvspcode
	Udcpaybankcode  sql.NullString  `json:"udcpaybankcode"`  // udcpaybankcode
	Udcpaymentvalid sql.NullString  `json:"udcpaymentvalid"` // udcpaymentvalid
	Udcpayledsys    sql.NullInt64   `json:"udcpayledsys"`    // udcpayledsys
	EquinoxPrn      sql.NullInt64   `json:"equinox_prn"`     // equinox_prn
	EquinoxLrn      int64           `json:"equinox_lrn"`     // equinox_lrn
	EquinoxSec      sql.NullInt64   `json:"equinox_sec"`     // equinox_sec
}

func AllUdcpay(db XODB, callback func(x Udcpay) bool) error {

	// sql query
	const sqlstr = `SELECT ` +
		`udcpayment, udcpaymentdate, udcpaymenttype, udcpaymenttime, udcpaymentno, udcpayvspcode, udcpaybankcode, udcpaymentvalid, udcpayledsys, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.udcpay `

	q, err := db.Query(sqlstr)

	if err != nil {
		return err
	}
	defer q.Close()

	// load results
	for q.Next() {
		u := Udcpay{}

		// scan
		err = q.Scan(&u.Udcpayment, &u.Udcpaymentdate, &u.Udcpaymenttype, &u.Udcpaymenttime, &u.Udcpaymentno, &u.Udcpayvspcode, &u.Udcpaybankcode, &u.Udcpaymentvalid, &u.Udcpayledsys, &u.EquinoxPrn, &u.EquinoxLrn, &u.EquinoxSec)
		if err != nil {
			return err
		}
		if !callback(u) {
			return nil
		}
	}

	return nil
}

// UdcpayByEquinoxLrn retrieves a row from 'equinox.udcpay' as a Udcpay.
//
// Generated from index 'udcpay_pkey'.
func UdcpayByEquinoxLrn(db XODB, equinoxLrn int64) (*Udcpay, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`udcpayment, udcpaymentdate, udcpaymenttype, udcpaymenttime, udcpaymentno, udcpayvspcode, udcpaybankcode, udcpaymentvalid, udcpayledsys, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.udcpay ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	u := Udcpay{}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&u.Udcpayment, &u.Udcpaymentdate, &u.Udcpaymenttype, &u.Udcpaymenttime, &u.Udcpaymentno, &u.Udcpayvspcode, &u.Udcpaybankcode, &u.Udcpaymentvalid, &u.Udcpayledsys, &u.EquinoxPrn, &u.EquinoxLrn, &u.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &u, nil
}
