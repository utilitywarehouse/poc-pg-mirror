// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/lib/pq"
)

// Gfit represents a row from 'equinox.gfit'.
type Gfit struct {
	Gfitid           sql.NullString  `json:"gfitid"`           // gfitid
	Gfitgenid        sql.NullString  `json:"gfitgenid"`        // gfitgenid
	Gfitmcsnum       sql.NullString  `json:"gfitmcsnum"`       // gfitmcsnum
	Gfitenddate      pq.NullTime     `json:"gfitenddate"`      // gfitenddate
	Gfittariffcode   sql.NullString  `json:"gfittariffcode"`   // gfittariffcode
	Gfittariffdescrp sql.NullString  `json:"gfittariffdescrp"` // gfittariffdescrp
	Gfittariffrate   sql.NullFloat64 `json:"gfittariffrate"`   // gfittariffrate
	Gfitextariffrate sql.NullFloat64 `json:"gfitextariffrate"` // gfitextariffrate
	Gfitpaystatus    sql.NullInt64   `json:"gfitpaystatus"`    // gfitpaystatus
	Gfitconfirmation pq.NullTime     `json:"gfitconfirmation"` // gfitconfirmation
	Gfitcommisiond   pq.NullTime     `json:"gfitcommisiond"`   // gfitcommisiond
	Gfiteligibility  pq.NullTime     `json:"gfiteligibility"`  // gfiteligibility
	Gfiteligibilend  pq.NullTime     `json:"gfiteligibilend"`  // gfiteligibilend
	Gfittechnoltype  sql.NullString  `json:"gfittechnoltype"`  // gfittechnoltype
	Gfitcustaccno    sql.NullString  `json:"gfitcustaccno"`    // gfitcustaccno
	Gfitenergyref    sql.NullString  `json:"gfitenergyref"`    // gfitenergyref
	Gfitinstallcap   sql.NullFloat64 `json:"gfitinstallcap"`   // gfitinstallcap
	Gfitnetcap       sql.NullFloat64 `json:"gfitnetcap"`       // gfitnetcap
	Gfitmetermodel   sql.NullString  `json:"gfitmetermodel"`   // gfitmetermodel
	Gfitexmetermod   sql.NullString  `json:"gfitexmetermod"`   // gfitexmetermod
	Gfitmetermanuf   sql.NullString  `json:"gfitmetermanuf"`   // gfitmetermanuf
	Gfitexmeterman   sql.NullString  `json:"gfitexmeterman"`   // gfitexmeterman
	Gfitexmetermpan  sql.NullString  `json:"gfitexmetermpan"`  // gfitexmetermpan
	Gfitmeterserial  sql.NullString  `json:"gfitmeterserial"`  // gfitmeterserial
	Gfitexmeterser   sql.NullString  `json:"gfitexmeterser"`   // gfitexmeterser
	Gfitmeterlocatio sql.NullInt64   `json:"gfitmeterlocatio"` // gfitmeterlocatio
	Gfitexmeterloc   sql.NullInt64   `json:"gfitexmeterloc"`   // gfitexmeterloc
	Gfitinstaller    sql.NullString  `json:"gfitinstaller"`    // gfitinstaller
	Gfitinstallphone sql.NullString  `json:"gfitinstallphone"` // gfitinstallphone
	Gfitinstalltype  sql.NullString  `json:"gfitinstalltype"`  // gfitinstalltype
	Gfitexref        sql.NullString  `json:"gfitexref"`        // gfitexref
	Gfitgrantref     sql.NullString  `json:"gfitgrantref"`     // gfitgrantref
	Gfitsparec4      sql.NullString  `json:"gfitsparec4"`      // gfitsparec4
	Gfitsigneddate   pq.NullTime     `json:"gfitsigneddate"`   // gfitsigneddate
	Gfitgrantdate    pq.NullTime     `json:"gfitgrantdate"`    // gfitgrantdate
	Gfitchglicdate   pq.NullTime     `json:"gfitchglicdate"`   // gfitchglicdate
	Gfitappdate      pq.NullTime     `json:"gfitappdate"`      // gfitappdate
	Gfiteayield      sql.NullFloat64 `json:"gfiteayield"`      // gfiteayield
	Gfitexeayield    sql.NullFloat64 `json:"gfitexeayield"`    // gfitexeayield
	Gfitstartread    sql.NullFloat64 `json:"gfitstartread"`    // gfitstartread
	Gfitexstartread  sql.NullFloat64 `json:"gfitexstartread"`  // gfitexstartread
	Gfitgridref      sql.NullString  `json:"gfitgridref"`      // gfitgridref
	Gfitsitedescrip  sql.NullString  `json:"gfitsitedescrip"`  // gfitsitedescrip
	Gfitgrantrepaid  sql.NullInt64   `json:"gfitgrantrepaid"`  // gfitgrantrepaid
	Gfitoffgrid      sql.NullInt64   `json:"gfitoffgrid"`      // gfitoffgrid
	Gfitquartnom     sql.NullInt64   `json:"gfitquartnom"`     // gfitquartnom
	Gfitexdeemed     sql.NullInt64   `json:"gfitexdeemed"`     // gfitexdeemed
	Gfitsigdate      pq.NullTime     `json:"gfitsigdate"`      // gfitsigdate
	Gfitnotes        sql.NullInt64   `json:"gfitnotes"`        // gfitnotes
	Gfitchkdate      pq.NullTime     `json:"gfitchkdate"`      // gfitchkdate
	Gfitepcrating    sql.NullString  `json:"gfitepcrating"`    // gfitepcrating
	Gfitepccertno    sql.NullString  `json:"gfitepccertno"`    // gfitepccertno
	Gfitgenpay25     sql.NullString  `json:"gfitgenpay25"`     // gfitgenpay25
	EquinoxPrn       sql.NullInt64   `json:"equinox_prn"`      // equinox_prn
	EquinoxLrn       int64           `json:"equinox_lrn"`      // equinox_lrn
	EquinoxSec       sql.NullInt64   `json:"equinox_sec"`      // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Gfit exists in the database.
func (g *Gfit) Exists() bool {
	return g._exists
}

// Deleted provides information if the Gfit has been deleted from the database.
func (g *Gfit) Deleted() bool {
	return g._deleted
}

// Insert inserts the Gfit to the database.
func (g *Gfit) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if g._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.gfit (` +
		`gfitid, gfitgenid, gfitmcsnum, gfitenddate, gfittariffcode, gfittariffdescrp, gfittariffrate, gfitextariffrate, gfitpaystatus, gfitconfirmation, gfitcommisiond, gfiteligibility, gfiteligibilend, gfittechnoltype, gfitcustaccno, gfitenergyref, gfitinstallcap, gfitnetcap, gfitmetermodel, gfitexmetermod, gfitmetermanuf, gfitexmeterman, gfitexmetermpan, gfitmeterserial, gfitexmeterser, gfitmeterlocatio, gfitexmeterloc, gfitinstaller, gfitinstallphone, gfitinstalltype, gfitexref, gfitgrantref, gfitsparec4, gfitsigneddate, gfitgrantdate, gfitchglicdate, gfitappdate, gfiteayield, gfitexeayield, gfitstartread, gfitexstartread, gfitgridref, gfitsitedescrip, gfitgrantrepaid, gfitoffgrid, gfitquartnom, gfitexdeemed, gfitsigdate, gfitnotes, gfitchkdate, gfitepcrating, gfitepccertno, gfitgenpay25, equinox_prn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46, $47, $48, $49, $50, $51, $52, $53, $54, $55` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, g.Gfitid, g.Gfitgenid, g.Gfitmcsnum, g.Gfitenddate, g.Gfittariffcode, g.Gfittariffdescrp, g.Gfittariffrate, g.Gfitextariffrate, g.Gfitpaystatus, g.Gfitconfirmation, g.Gfitcommisiond, g.Gfiteligibility, g.Gfiteligibilend, g.Gfittechnoltype, g.Gfitcustaccno, g.Gfitenergyref, g.Gfitinstallcap, g.Gfitnetcap, g.Gfitmetermodel, g.Gfitexmetermod, g.Gfitmetermanuf, g.Gfitexmeterman, g.Gfitexmetermpan, g.Gfitmeterserial, g.Gfitexmeterser, g.Gfitmeterlocatio, g.Gfitexmeterloc, g.Gfitinstaller, g.Gfitinstallphone, g.Gfitinstalltype, g.Gfitexref, g.Gfitgrantref, g.Gfitsparec4, g.Gfitsigneddate, g.Gfitgrantdate, g.Gfitchglicdate, g.Gfitappdate, g.Gfiteayield, g.Gfitexeayield, g.Gfitstartread, g.Gfitexstartread, g.Gfitgridref, g.Gfitsitedescrip, g.Gfitgrantrepaid, g.Gfitoffgrid, g.Gfitquartnom, g.Gfitexdeemed, g.Gfitsigdate, g.Gfitnotes, g.Gfitchkdate, g.Gfitepcrating, g.Gfitepccertno, g.Gfitgenpay25, g.EquinoxPrn, g.EquinoxSec)
	err = db.QueryRow(sqlstr, g.Gfitid, g.Gfitgenid, g.Gfitmcsnum, g.Gfitenddate, g.Gfittariffcode, g.Gfittariffdescrp, g.Gfittariffrate, g.Gfitextariffrate, g.Gfitpaystatus, g.Gfitconfirmation, g.Gfitcommisiond, g.Gfiteligibility, g.Gfiteligibilend, g.Gfittechnoltype, g.Gfitcustaccno, g.Gfitenergyref, g.Gfitinstallcap, g.Gfitnetcap, g.Gfitmetermodel, g.Gfitexmetermod, g.Gfitmetermanuf, g.Gfitexmeterman, g.Gfitexmetermpan, g.Gfitmeterserial, g.Gfitexmeterser, g.Gfitmeterlocatio, g.Gfitexmeterloc, g.Gfitinstaller, g.Gfitinstallphone, g.Gfitinstalltype, g.Gfitexref, g.Gfitgrantref, g.Gfitsparec4, g.Gfitsigneddate, g.Gfitgrantdate, g.Gfitchglicdate, g.Gfitappdate, g.Gfiteayield, g.Gfitexeayield, g.Gfitstartread, g.Gfitexstartread, g.Gfitgridref, g.Gfitsitedescrip, g.Gfitgrantrepaid, g.Gfitoffgrid, g.Gfitquartnom, g.Gfitexdeemed, g.Gfitsigdate, g.Gfitnotes, g.Gfitchkdate, g.Gfitepcrating, g.Gfitepccertno, g.Gfitgenpay25, g.EquinoxPrn, g.EquinoxSec).Scan(&g.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	g._exists = true

	return nil
}

// Update updates the Gfit in the database.
func (g *Gfit) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !g._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if g._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.gfit SET (` +
		`gfitid, gfitgenid, gfitmcsnum, gfitenddate, gfittariffcode, gfittariffdescrp, gfittariffrate, gfitextariffrate, gfitpaystatus, gfitconfirmation, gfitcommisiond, gfiteligibility, gfiteligibilend, gfittechnoltype, gfitcustaccno, gfitenergyref, gfitinstallcap, gfitnetcap, gfitmetermodel, gfitexmetermod, gfitmetermanuf, gfitexmeterman, gfitexmetermpan, gfitmeterserial, gfitexmeterser, gfitmeterlocatio, gfitexmeterloc, gfitinstaller, gfitinstallphone, gfitinstalltype, gfitexref, gfitgrantref, gfitsparec4, gfitsigneddate, gfitgrantdate, gfitchglicdate, gfitappdate, gfiteayield, gfitexeayield, gfitstartread, gfitexstartread, gfitgridref, gfitsitedescrip, gfitgrantrepaid, gfitoffgrid, gfitquartnom, gfitexdeemed, gfitsigdate, gfitnotes, gfitchkdate, gfitepcrating, gfitepccertno, gfitgenpay25, equinox_prn, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46, $47, $48, $49, $50, $51, $52, $53, $54, $55` +
		`) WHERE equinox_lrn = $56`

	// run query
	XOLog(sqlstr, g.Gfitid, g.Gfitgenid, g.Gfitmcsnum, g.Gfitenddate, g.Gfittariffcode, g.Gfittariffdescrp, g.Gfittariffrate, g.Gfitextariffrate, g.Gfitpaystatus, g.Gfitconfirmation, g.Gfitcommisiond, g.Gfiteligibility, g.Gfiteligibilend, g.Gfittechnoltype, g.Gfitcustaccno, g.Gfitenergyref, g.Gfitinstallcap, g.Gfitnetcap, g.Gfitmetermodel, g.Gfitexmetermod, g.Gfitmetermanuf, g.Gfitexmeterman, g.Gfitexmetermpan, g.Gfitmeterserial, g.Gfitexmeterser, g.Gfitmeterlocatio, g.Gfitexmeterloc, g.Gfitinstaller, g.Gfitinstallphone, g.Gfitinstalltype, g.Gfitexref, g.Gfitgrantref, g.Gfitsparec4, g.Gfitsigneddate, g.Gfitgrantdate, g.Gfitchglicdate, g.Gfitappdate, g.Gfiteayield, g.Gfitexeayield, g.Gfitstartread, g.Gfitexstartread, g.Gfitgridref, g.Gfitsitedescrip, g.Gfitgrantrepaid, g.Gfitoffgrid, g.Gfitquartnom, g.Gfitexdeemed, g.Gfitsigdate, g.Gfitnotes, g.Gfitchkdate, g.Gfitepcrating, g.Gfitepccertno, g.Gfitgenpay25, g.EquinoxPrn, g.EquinoxSec, g.EquinoxLrn)
	_, err = db.Exec(sqlstr, g.Gfitid, g.Gfitgenid, g.Gfitmcsnum, g.Gfitenddate, g.Gfittariffcode, g.Gfittariffdescrp, g.Gfittariffrate, g.Gfitextariffrate, g.Gfitpaystatus, g.Gfitconfirmation, g.Gfitcommisiond, g.Gfiteligibility, g.Gfiteligibilend, g.Gfittechnoltype, g.Gfitcustaccno, g.Gfitenergyref, g.Gfitinstallcap, g.Gfitnetcap, g.Gfitmetermodel, g.Gfitexmetermod, g.Gfitmetermanuf, g.Gfitexmeterman, g.Gfitexmetermpan, g.Gfitmeterserial, g.Gfitexmeterser, g.Gfitmeterlocatio, g.Gfitexmeterloc, g.Gfitinstaller, g.Gfitinstallphone, g.Gfitinstalltype, g.Gfitexref, g.Gfitgrantref, g.Gfitsparec4, g.Gfitsigneddate, g.Gfitgrantdate, g.Gfitchglicdate, g.Gfitappdate, g.Gfiteayield, g.Gfitexeayield, g.Gfitstartread, g.Gfitexstartread, g.Gfitgridref, g.Gfitsitedescrip, g.Gfitgrantrepaid, g.Gfitoffgrid, g.Gfitquartnom, g.Gfitexdeemed, g.Gfitsigdate, g.Gfitnotes, g.Gfitchkdate, g.Gfitepcrating, g.Gfitepccertno, g.Gfitgenpay25, g.EquinoxPrn, g.EquinoxSec, g.EquinoxLrn)
	return err
}

// Save saves the Gfit to the database.
func (g *Gfit) Save(db XODB) error {
	if g.Exists() {
		return g.Update(db)
	}

	return g.Insert(db)
}

// Upsert performs an upsert for Gfit.
//
// NOTE: PostgreSQL 9.5+ only
func (g *Gfit) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if g._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.gfit (` +
		`gfitid, gfitgenid, gfitmcsnum, gfitenddate, gfittariffcode, gfittariffdescrp, gfittariffrate, gfitextariffrate, gfitpaystatus, gfitconfirmation, gfitcommisiond, gfiteligibility, gfiteligibilend, gfittechnoltype, gfitcustaccno, gfitenergyref, gfitinstallcap, gfitnetcap, gfitmetermodel, gfitexmetermod, gfitmetermanuf, gfitexmeterman, gfitexmetermpan, gfitmeterserial, gfitexmeterser, gfitmeterlocatio, gfitexmeterloc, gfitinstaller, gfitinstallphone, gfitinstalltype, gfitexref, gfitgrantref, gfitsparec4, gfitsigneddate, gfitgrantdate, gfitchglicdate, gfitappdate, gfiteayield, gfitexeayield, gfitstartread, gfitexstartread, gfitgridref, gfitsitedescrip, gfitgrantrepaid, gfitoffgrid, gfitquartnom, gfitexdeemed, gfitsigdate, gfitnotes, gfitchkdate, gfitepcrating, gfitepccertno, gfitgenpay25, equinox_prn, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46, $47, $48, $49, $50, $51, $52, $53, $54, $55, $56` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`gfitid, gfitgenid, gfitmcsnum, gfitenddate, gfittariffcode, gfittariffdescrp, gfittariffrate, gfitextariffrate, gfitpaystatus, gfitconfirmation, gfitcommisiond, gfiteligibility, gfiteligibilend, gfittechnoltype, gfitcustaccno, gfitenergyref, gfitinstallcap, gfitnetcap, gfitmetermodel, gfitexmetermod, gfitmetermanuf, gfitexmeterman, gfitexmetermpan, gfitmeterserial, gfitexmeterser, gfitmeterlocatio, gfitexmeterloc, gfitinstaller, gfitinstallphone, gfitinstalltype, gfitexref, gfitgrantref, gfitsparec4, gfitsigneddate, gfitgrantdate, gfitchglicdate, gfitappdate, gfiteayield, gfitexeayield, gfitstartread, gfitexstartread, gfitgridref, gfitsitedescrip, gfitgrantrepaid, gfitoffgrid, gfitquartnom, gfitexdeemed, gfitsigdate, gfitnotes, gfitchkdate, gfitepcrating, gfitepccertno, gfitgenpay25, equinox_prn, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.gfitid, EXCLUDED.gfitgenid, EXCLUDED.gfitmcsnum, EXCLUDED.gfitenddate, EXCLUDED.gfittariffcode, EXCLUDED.gfittariffdescrp, EXCLUDED.gfittariffrate, EXCLUDED.gfitextariffrate, EXCLUDED.gfitpaystatus, EXCLUDED.gfitconfirmation, EXCLUDED.gfitcommisiond, EXCLUDED.gfiteligibility, EXCLUDED.gfiteligibilend, EXCLUDED.gfittechnoltype, EXCLUDED.gfitcustaccno, EXCLUDED.gfitenergyref, EXCLUDED.gfitinstallcap, EXCLUDED.gfitnetcap, EXCLUDED.gfitmetermodel, EXCLUDED.gfitexmetermod, EXCLUDED.gfitmetermanuf, EXCLUDED.gfitexmeterman, EXCLUDED.gfitexmetermpan, EXCLUDED.gfitmeterserial, EXCLUDED.gfitexmeterser, EXCLUDED.gfitmeterlocatio, EXCLUDED.gfitexmeterloc, EXCLUDED.gfitinstaller, EXCLUDED.gfitinstallphone, EXCLUDED.gfitinstalltype, EXCLUDED.gfitexref, EXCLUDED.gfitgrantref, EXCLUDED.gfitsparec4, EXCLUDED.gfitsigneddate, EXCLUDED.gfitgrantdate, EXCLUDED.gfitchglicdate, EXCLUDED.gfitappdate, EXCLUDED.gfiteayield, EXCLUDED.gfitexeayield, EXCLUDED.gfitstartread, EXCLUDED.gfitexstartread, EXCLUDED.gfitgridref, EXCLUDED.gfitsitedescrip, EXCLUDED.gfitgrantrepaid, EXCLUDED.gfitoffgrid, EXCLUDED.gfitquartnom, EXCLUDED.gfitexdeemed, EXCLUDED.gfitsigdate, EXCLUDED.gfitnotes, EXCLUDED.gfitchkdate, EXCLUDED.gfitepcrating, EXCLUDED.gfitepccertno, EXCLUDED.gfitgenpay25, EXCLUDED.equinox_prn, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, g.Gfitid, g.Gfitgenid, g.Gfitmcsnum, g.Gfitenddate, g.Gfittariffcode, g.Gfittariffdescrp, g.Gfittariffrate, g.Gfitextariffrate, g.Gfitpaystatus, g.Gfitconfirmation, g.Gfitcommisiond, g.Gfiteligibility, g.Gfiteligibilend, g.Gfittechnoltype, g.Gfitcustaccno, g.Gfitenergyref, g.Gfitinstallcap, g.Gfitnetcap, g.Gfitmetermodel, g.Gfitexmetermod, g.Gfitmetermanuf, g.Gfitexmeterman, g.Gfitexmetermpan, g.Gfitmeterserial, g.Gfitexmeterser, g.Gfitmeterlocatio, g.Gfitexmeterloc, g.Gfitinstaller, g.Gfitinstallphone, g.Gfitinstalltype, g.Gfitexref, g.Gfitgrantref, g.Gfitsparec4, g.Gfitsigneddate, g.Gfitgrantdate, g.Gfitchglicdate, g.Gfitappdate, g.Gfiteayield, g.Gfitexeayield, g.Gfitstartread, g.Gfitexstartread, g.Gfitgridref, g.Gfitsitedescrip, g.Gfitgrantrepaid, g.Gfitoffgrid, g.Gfitquartnom, g.Gfitexdeemed, g.Gfitsigdate, g.Gfitnotes, g.Gfitchkdate, g.Gfitepcrating, g.Gfitepccertno, g.Gfitgenpay25, g.EquinoxPrn, g.EquinoxLrn, g.EquinoxSec)
	_, err = db.Exec(sqlstr, g.Gfitid, g.Gfitgenid, g.Gfitmcsnum, g.Gfitenddate, g.Gfittariffcode, g.Gfittariffdescrp, g.Gfittariffrate, g.Gfitextariffrate, g.Gfitpaystatus, g.Gfitconfirmation, g.Gfitcommisiond, g.Gfiteligibility, g.Gfiteligibilend, g.Gfittechnoltype, g.Gfitcustaccno, g.Gfitenergyref, g.Gfitinstallcap, g.Gfitnetcap, g.Gfitmetermodel, g.Gfitexmetermod, g.Gfitmetermanuf, g.Gfitexmeterman, g.Gfitexmetermpan, g.Gfitmeterserial, g.Gfitexmeterser, g.Gfitmeterlocatio, g.Gfitexmeterloc, g.Gfitinstaller, g.Gfitinstallphone, g.Gfitinstalltype, g.Gfitexref, g.Gfitgrantref, g.Gfitsparec4, g.Gfitsigneddate, g.Gfitgrantdate, g.Gfitchglicdate, g.Gfitappdate, g.Gfiteayield, g.Gfitexeayield, g.Gfitstartread, g.Gfitexstartread, g.Gfitgridref, g.Gfitsitedescrip, g.Gfitgrantrepaid, g.Gfitoffgrid, g.Gfitquartnom, g.Gfitexdeemed, g.Gfitsigdate, g.Gfitnotes, g.Gfitchkdate, g.Gfitepcrating, g.Gfitepccertno, g.Gfitgenpay25, g.EquinoxPrn, g.EquinoxLrn, g.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	g._exists = true

	return nil
}

// Delete deletes the Gfit from the database.
func (g *Gfit) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !g._exists {
		return nil
	}

	// if deleted, bail
	if g._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.gfit WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, g.EquinoxLrn)
	_, err = db.Exec(sqlstr, g.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	g._deleted = true

	return nil
}

// GfitByEquinoxLrn retrieves a row from 'equinox.gfit' as a Gfit.
//
// Generated from index 'gfit_pkey'.
func GfitByEquinoxLrn(db XODB, equinoxLrn int64) (*Gfit, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`gfitid, gfitgenid, gfitmcsnum, gfitenddate, gfittariffcode, gfittariffdescrp, gfittariffrate, gfitextariffrate, gfitpaystatus, gfitconfirmation, gfitcommisiond, gfiteligibility, gfiteligibilend, gfittechnoltype, gfitcustaccno, gfitenergyref, gfitinstallcap, gfitnetcap, gfitmetermodel, gfitexmetermod, gfitmetermanuf, gfitexmeterman, gfitexmetermpan, gfitmeterserial, gfitexmeterser, gfitmeterlocatio, gfitexmeterloc, gfitinstaller, gfitinstallphone, gfitinstalltype, gfitexref, gfitgrantref, gfitsparec4, gfitsigneddate, gfitgrantdate, gfitchglicdate, gfitappdate, gfiteayield, gfitexeayield, gfitstartread, gfitexstartread, gfitgridref, gfitsitedescrip, gfitgrantrepaid, gfitoffgrid, gfitquartnom, gfitexdeemed, gfitsigdate, gfitnotes, gfitchkdate, gfitepcrating, gfitepccertno, gfitgenpay25, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.gfit ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	g := Gfit{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&g.Gfitid, &g.Gfitgenid, &g.Gfitmcsnum, &g.Gfitenddate, &g.Gfittariffcode, &g.Gfittariffdescrp, &g.Gfittariffrate, &g.Gfitextariffrate, &g.Gfitpaystatus, &g.Gfitconfirmation, &g.Gfitcommisiond, &g.Gfiteligibility, &g.Gfiteligibilend, &g.Gfittechnoltype, &g.Gfitcustaccno, &g.Gfitenergyref, &g.Gfitinstallcap, &g.Gfitnetcap, &g.Gfitmetermodel, &g.Gfitexmetermod, &g.Gfitmetermanuf, &g.Gfitexmeterman, &g.Gfitexmetermpan, &g.Gfitmeterserial, &g.Gfitexmeterser, &g.Gfitmeterlocatio, &g.Gfitexmeterloc, &g.Gfitinstaller, &g.Gfitinstallphone, &g.Gfitinstalltype, &g.Gfitexref, &g.Gfitgrantref, &g.Gfitsparec4, &g.Gfitsigneddate, &g.Gfitgrantdate, &g.Gfitchglicdate, &g.Gfitappdate, &g.Gfiteayield, &g.Gfitexeayield, &g.Gfitstartread, &g.Gfitexstartread, &g.Gfitgridref, &g.Gfitsitedescrip, &g.Gfitgrantrepaid, &g.Gfitoffgrid, &g.Gfitquartnom, &g.Gfitexdeemed, &g.Gfitsigdate, &g.Gfitnotes, &g.Gfitchkdate, &g.Gfitepcrating, &g.Gfitepccertno, &g.Gfitgenpay25, &g.EquinoxPrn, &g.EquinoxLrn, &g.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &g, nil
}
