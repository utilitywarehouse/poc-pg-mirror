// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/lib/pq"
)

// Piggy represents a row from 'equinox.piggies'.
type Piggy struct {
	Piggybondid   sql.NullInt64   `json:"piggybondid"`   // piggybondid
	Pbtype        sql.NullString  `json:"pbtype"`        // pbtype
	Pbvalue       sql.NullFloat64 `json:"pbvalue"`       // pbvalue
	Pbdestination sql.NullString  `json:"pbdestination"` // pbdestination
	Pbexecid      sql.NullString  `json:"pbexecid"`      // pbexecid
	Pbclaimperiod sql.NullString  `json:"pbclaimperiod"` // pbclaimperiod
	Pbentered     pq.NullTime     `json:"pbentered"`     // pbentered
	Pbenteredby   sql.NullString  `json:"pbenteredby"`   // pbenteredby
	Pbsparec1     sql.NullString  `json:"pbsparec1"`     // pbsparec1
	Pbsparec2     sql.NullString  `json:"pbsparec2"`     // pbsparec2
	Pbsparen1     sql.NullFloat64 `json:"pbsparen1"`     // pbsparen1
	Pbsparen2     sql.NullFloat64 `json:"pbsparen2"`     // pbsparen2
	Pbspared1     pq.NullTime     `json:"pbspared1"`     // pbspared1
	EquinoxLrn    int64           `json:"equinox_lrn"`   // equinox_lrn
	EquinoxSec    sql.NullInt64   `json:"equinox_sec"`   // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Piggy exists in the database.
func (p *Piggy) Exists() bool {
	return p._exists
}

// Deleted provides information if the Piggy has been deleted from the database.
func (p *Piggy) Deleted() bool {
	return p._deleted
}

// Insert inserts the Piggy to the database.
func (p *Piggy) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if p._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.piggies (` +
		`piggybondid, pbtype, pbvalue, pbdestination, pbexecid, pbclaimperiod, pbentered, pbenteredby, pbsparec1, pbsparec2, pbsparen1, pbsparen2, pbspared1, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, p.Piggybondid, p.Pbtype, p.Pbvalue, p.Pbdestination, p.Pbexecid, p.Pbclaimperiod, p.Pbentered, p.Pbenteredby, p.Pbsparec1, p.Pbsparec2, p.Pbsparen1, p.Pbsparen2, p.Pbspared1, p.EquinoxSec)
	err = db.QueryRow(sqlstr, p.Piggybondid, p.Pbtype, p.Pbvalue, p.Pbdestination, p.Pbexecid, p.Pbclaimperiod, p.Pbentered, p.Pbenteredby, p.Pbsparec1, p.Pbsparec2, p.Pbsparen1, p.Pbsparen2, p.Pbspared1, p.EquinoxSec).Scan(&p.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	p._exists = true

	return nil
}

// Update updates the Piggy in the database.
func (p *Piggy) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if p._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.piggies SET (` +
		`piggybondid, pbtype, pbvalue, pbdestination, pbexecid, pbclaimperiod, pbentered, pbenteredby, pbsparec1, pbsparec2, pbsparen1, pbsparen2, pbspared1, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14` +
		`) WHERE equinox_lrn = $15`

	// run query
	XOLog(sqlstr, p.Piggybondid, p.Pbtype, p.Pbvalue, p.Pbdestination, p.Pbexecid, p.Pbclaimperiod, p.Pbentered, p.Pbenteredby, p.Pbsparec1, p.Pbsparec2, p.Pbsparen1, p.Pbsparen2, p.Pbspared1, p.EquinoxSec, p.EquinoxLrn)
	_, err = db.Exec(sqlstr, p.Piggybondid, p.Pbtype, p.Pbvalue, p.Pbdestination, p.Pbexecid, p.Pbclaimperiod, p.Pbentered, p.Pbenteredby, p.Pbsparec1, p.Pbsparec2, p.Pbsparen1, p.Pbsparen2, p.Pbspared1, p.EquinoxSec, p.EquinoxLrn)
	return err
}

// Save saves the Piggy to the database.
func (p *Piggy) Save(db XODB) error {
	if p.Exists() {
		return p.Update(db)
	}

	return p.Insert(db)
}

// Upsert performs an upsert for Piggy.
//
// NOTE: PostgreSQL 9.5+ only
func (p *Piggy) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if p._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.piggies (` +
		`piggybondid, pbtype, pbvalue, pbdestination, pbexecid, pbclaimperiod, pbentered, pbenteredby, pbsparec1, pbsparec2, pbsparen1, pbsparen2, pbspared1, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`piggybondid, pbtype, pbvalue, pbdestination, pbexecid, pbclaimperiod, pbentered, pbenteredby, pbsparec1, pbsparec2, pbsparen1, pbsparen2, pbspared1, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.piggybondid, EXCLUDED.pbtype, EXCLUDED.pbvalue, EXCLUDED.pbdestination, EXCLUDED.pbexecid, EXCLUDED.pbclaimperiod, EXCLUDED.pbentered, EXCLUDED.pbenteredby, EXCLUDED.pbsparec1, EXCLUDED.pbsparec2, EXCLUDED.pbsparen1, EXCLUDED.pbsparen2, EXCLUDED.pbspared1, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, p.Piggybondid, p.Pbtype, p.Pbvalue, p.Pbdestination, p.Pbexecid, p.Pbclaimperiod, p.Pbentered, p.Pbenteredby, p.Pbsparec1, p.Pbsparec2, p.Pbsparen1, p.Pbsparen2, p.Pbspared1, p.EquinoxLrn, p.EquinoxSec)
	_, err = db.Exec(sqlstr, p.Piggybondid, p.Pbtype, p.Pbvalue, p.Pbdestination, p.Pbexecid, p.Pbclaimperiod, p.Pbentered, p.Pbenteredby, p.Pbsparec1, p.Pbsparec2, p.Pbsparen1, p.Pbsparen2, p.Pbspared1, p.EquinoxLrn, p.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	p._exists = true

	return nil
}

// Delete deletes the Piggy from the database.
func (p *Piggy) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return nil
	}

	// if deleted, bail
	if p._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.piggies WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, p.EquinoxLrn)
	_, err = db.Exec(sqlstr, p.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	p._deleted = true

	return nil
}

// PiggyByEquinoxLrn retrieves a row from 'equinox.piggies' as a Piggy.
//
// Generated from index 'piggies_pkey'.
func PiggyByEquinoxLrn(db XODB, equinoxLrn int64) (*Piggy, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`piggybondid, pbtype, pbvalue, pbdestination, pbexecid, pbclaimperiod, pbentered, pbenteredby, pbsparec1, pbsparec2, pbsparen1, pbsparen2, pbspared1, equinox_lrn, equinox_sec ` +
		`FROM equinox.piggies ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	p := Piggy{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&p.Piggybondid, &p.Pbtype, &p.Pbvalue, &p.Pbdestination, &p.Pbexecid, &p.Pbclaimperiod, &p.Pbentered, &p.Pbenteredby, &p.Pbsparec1, &p.Pbsparec2, &p.Pbsparen1, &p.Pbsparen2, &p.Pbspared1, &p.EquinoxLrn, &p.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &p, nil
}
