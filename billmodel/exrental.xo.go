// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/lib/pq"
)

// Exrental represents a row from 'equinox.exrental'.
type Exrental struct {
	Exrvenueid       sql.NullString  `json:"exrvenueid"`       // exrvenueid
	Exreventdate     pq.NullTime     `json:"exreventdate"`     // exreventdate
	Exreventid       sql.NullString  `json:"exreventid"`       // exreventid
	Exrreceiveddate  pq.NullTime     `json:"exrreceiveddate"`  // exrreceiveddate
	Exrtrainerid     sql.NullString  `json:"exrtrainerid"`     // exrtrainerid
	Exrprtnrverified sql.NullInt64   `json:"exrprtnrverified"` // exrprtnrverified
	Exrmacaddress    sql.NullString  `json:"exrmacaddress"`    // exrmacaddress
	Exrserialnumber  sql.NullString  `json:"exrserialnumber"`  // exrserialnumber
	Exrcontractterm  sql.NullInt64   `json:"exrcontractterm"`  // exrcontractterm
	Exrownership     sql.NullString  `json:"exrownership"`     // exrownership
	Exrownrshpchngd  pq.NullTime     `json:"exrownrshpchngd"`  // exrownrshpchngd
	Exripreslastused pq.NullTime     `json:"exripreslastused"` // exripreslastused
	Exrpaymentamount sql.NullFloat64 `json:"exrpaymentamount"` // exrpaymentamount
	Exrpaymentcount  sql.NullInt64   `json:"exrpaymentcount"`  // exrpaymentcount
	Exrprovpaymencnt sql.NullInt64   `json:"exrprovpaymencnt"` // exrprovpaymencnt
	Exrtotalpaid     sql.NullFloat64 `json:"exrtotalpaid"`     // exrtotalpaid
	Exrprovtotalpaid sql.NullFloat64 `json:"exrprovtotalpaid"` // exrprovtotalpaid
	Exrlastpaiddate  pq.NullTime     `json:"exrlastpaiddate"`  // exrlastpaiddate
	EquinoxPrn       sql.NullInt64   `json:"equinox_prn"`      // equinox_prn
	EquinoxLrn       int64           `json:"equinox_lrn"`      // equinox_lrn
	EquinoxSec       sql.NullInt64   `json:"equinox_sec"`      // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Exrental exists in the database.
func (e *Exrental) Exists() bool {
	return e._exists
}

// Deleted provides information if the Exrental has been deleted from the database.
func (e *Exrental) Deleted() bool {
	return e._deleted
}

// Insert inserts the Exrental to the database.
func (e *Exrental) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if e._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.exrental (` +
		`exrvenueid, exreventdate, exreventid, exrreceiveddate, exrtrainerid, exrprtnrverified, exrmacaddress, exrserialnumber, exrcontractterm, exrownership, exrownrshpchngd, exripreslastused, exrpaymentamount, exrpaymentcount, exrprovpaymencnt, exrtotalpaid, exrprovtotalpaid, exrlastpaiddate, equinox_prn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, e.Exrvenueid, e.Exreventdate, e.Exreventid, e.Exrreceiveddate, e.Exrtrainerid, e.Exrprtnrverified, e.Exrmacaddress, e.Exrserialnumber, e.Exrcontractterm, e.Exrownership, e.Exrownrshpchngd, e.Exripreslastused, e.Exrpaymentamount, e.Exrpaymentcount, e.Exrprovpaymencnt, e.Exrtotalpaid, e.Exrprovtotalpaid, e.Exrlastpaiddate, e.EquinoxPrn, e.EquinoxSec)
	err = db.QueryRow(sqlstr, e.Exrvenueid, e.Exreventdate, e.Exreventid, e.Exrreceiveddate, e.Exrtrainerid, e.Exrprtnrverified, e.Exrmacaddress, e.Exrserialnumber, e.Exrcontractterm, e.Exrownership, e.Exrownrshpchngd, e.Exripreslastused, e.Exrpaymentamount, e.Exrpaymentcount, e.Exrprovpaymencnt, e.Exrtotalpaid, e.Exrprovtotalpaid, e.Exrlastpaiddate, e.EquinoxPrn, e.EquinoxSec).Scan(&e.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	e._exists = true

	return nil
}

// Update updates the Exrental in the database.
func (e *Exrental) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !e._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if e._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.exrental SET (` +
		`exrvenueid, exreventdate, exreventid, exrreceiveddate, exrtrainerid, exrprtnrverified, exrmacaddress, exrserialnumber, exrcontractterm, exrownership, exrownrshpchngd, exripreslastused, exrpaymentamount, exrpaymentcount, exrprovpaymencnt, exrtotalpaid, exrprovtotalpaid, exrlastpaiddate, equinox_prn, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20` +
		`) WHERE equinox_lrn = $21`

	// run query
	XOLog(sqlstr, e.Exrvenueid, e.Exreventdate, e.Exreventid, e.Exrreceiveddate, e.Exrtrainerid, e.Exrprtnrverified, e.Exrmacaddress, e.Exrserialnumber, e.Exrcontractterm, e.Exrownership, e.Exrownrshpchngd, e.Exripreslastused, e.Exrpaymentamount, e.Exrpaymentcount, e.Exrprovpaymencnt, e.Exrtotalpaid, e.Exrprovtotalpaid, e.Exrlastpaiddate, e.EquinoxPrn, e.EquinoxSec, e.EquinoxLrn)
	_, err = db.Exec(sqlstr, e.Exrvenueid, e.Exreventdate, e.Exreventid, e.Exrreceiveddate, e.Exrtrainerid, e.Exrprtnrverified, e.Exrmacaddress, e.Exrserialnumber, e.Exrcontractterm, e.Exrownership, e.Exrownrshpchngd, e.Exripreslastused, e.Exrpaymentamount, e.Exrpaymentcount, e.Exrprovpaymencnt, e.Exrtotalpaid, e.Exrprovtotalpaid, e.Exrlastpaiddate, e.EquinoxPrn, e.EquinoxSec, e.EquinoxLrn)
	return err
}

// Save saves the Exrental to the database.
func (e *Exrental) Save(db XODB) error {
	if e.Exists() {
		return e.Update(db)
	}

	return e.Insert(db)
}

// Upsert performs an upsert for Exrental.
//
// NOTE: PostgreSQL 9.5+ only
func (e *Exrental) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if e._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.exrental (` +
		`exrvenueid, exreventdate, exreventid, exrreceiveddate, exrtrainerid, exrprtnrverified, exrmacaddress, exrserialnumber, exrcontractterm, exrownership, exrownrshpchngd, exripreslastused, exrpaymentamount, exrpaymentcount, exrprovpaymencnt, exrtotalpaid, exrprovtotalpaid, exrlastpaiddate, equinox_prn, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`exrvenueid, exreventdate, exreventid, exrreceiveddate, exrtrainerid, exrprtnrverified, exrmacaddress, exrserialnumber, exrcontractterm, exrownership, exrownrshpchngd, exripreslastused, exrpaymentamount, exrpaymentcount, exrprovpaymencnt, exrtotalpaid, exrprovtotalpaid, exrlastpaiddate, equinox_prn, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.exrvenueid, EXCLUDED.exreventdate, EXCLUDED.exreventid, EXCLUDED.exrreceiveddate, EXCLUDED.exrtrainerid, EXCLUDED.exrprtnrverified, EXCLUDED.exrmacaddress, EXCLUDED.exrserialnumber, EXCLUDED.exrcontractterm, EXCLUDED.exrownership, EXCLUDED.exrownrshpchngd, EXCLUDED.exripreslastused, EXCLUDED.exrpaymentamount, EXCLUDED.exrpaymentcount, EXCLUDED.exrprovpaymencnt, EXCLUDED.exrtotalpaid, EXCLUDED.exrprovtotalpaid, EXCLUDED.exrlastpaiddate, EXCLUDED.equinox_prn, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, e.Exrvenueid, e.Exreventdate, e.Exreventid, e.Exrreceiveddate, e.Exrtrainerid, e.Exrprtnrverified, e.Exrmacaddress, e.Exrserialnumber, e.Exrcontractterm, e.Exrownership, e.Exrownrshpchngd, e.Exripreslastused, e.Exrpaymentamount, e.Exrpaymentcount, e.Exrprovpaymencnt, e.Exrtotalpaid, e.Exrprovtotalpaid, e.Exrlastpaiddate, e.EquinoxPrn, e.EquinoxLrn, e.EquinoxSec)
	_, err = db.Exec(sqlstr, e.Exrvenueid, e.Exreventdate, e.Exreventid, e.Exrreceiveddate, e.Exrtrainerid, e.Exrprtnrverified, e.Exrmacaddress, e.Exrserialnumber, e.Exrcontractterm, e.Exrownership, e.Exrownrshpchngd, e.Exripreslastused, e.Exrpaymentamount, e.Exrpaymentcount, e.Exrprovpaymencnt, e.Exrtotalpaid, e.Exrprovtotalpaid, e.Exrlastpaiddate, e.EquinoxPrn, e.EquinoxLrn, e.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	e._exists = true

	return nil
}

// Delete deletes the Exrental from the database.
func (e *Exrental) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !e._exists {
		return nil
	}

	// if deleted, bail
	if e._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.exrental WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, e.EquinoxLrn)
	_, err = db.Exec(sqlstr, e.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	e._deleted = true

	return nil
}

// ExrentalByEquinoxLrn retrieves a row from 'equinox.exrental' as a Exrental.
//
// Generated from index 'exrental_pkey'.
func ExrentalByEquinoxLrn(db XODB, equinoxLrn int64) (*Exrental, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`exrvenueid, exreventdate, exreventid, exrreceiveddate, exrtrainerid, exrprtnrverified, exrmacaddress, exrserialnumber, exrcontractterm, exrownership, exrownrshpchngd, exripreslastused, exrpaymentamount, exrpaymentcount, exrprovpaymencnt, exrtotalpaid, exrprovtotalpaid, exrlastpaiddate, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.exrental ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	e := Exrental{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&e.Exrvenueid, &e.Exreventdate, &e.Exreventid, &e.Exrreceiveddate, &e.Exrtrainerid, &e.Exrprtnrverified, &e.Exrmacaddress, &e.Exrserialnumber, &e.Exrcontractterm, &e.Exrownership, &e.Exrownrshpchngd, &e.Exripreslastused, &e.Exrpaymentamount, &e.Exrpaymentcount, &e.Exrprovpaymencnt, &e.Exrtotalpaid, &e.Exrprovtotalpaid, &e.Exrlastpaiddate, &e.EquinoxPrn, &e.EquinoxLrn, &e.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &e, nil
}
