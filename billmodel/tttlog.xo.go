// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"

	"github.com/lib/pq"
)

// Tttlog represents a row from 'equinox.tttlog'.
type Tttlog struct {
	Tttprodtype     sql.NullString `json:"tttprodtype"`     // tttprodtype
	Tttsearchtype   sql.NullString `json:"tttsearchtype"`   // tttsearchtype
	Tttsource       sql.NullString `json:"tttsource"`       // tttsource
	Tttsearchdata   sql.NullString `json:"tttsearchdata"`   // tttsearchdata
	Tttsearchdate   pq.NullTime    `json:"tttsearchdate"`   // tttsearchdate
	Tttsearchtime   pq.NullTime    `json:"tttsearchtime"`   // tttsearchtime
	Tttoverallresp  sql.NullString `json:"tttoverallresp"`  // tttoverallresp
	Tttadvcode      sql.NullString `json:"tttadvcode"`      // tttadvcode
	Tttadvmsg       sql.NullInt64  `json:"tttadvmsg"`       // tttadvmsg
	Tttactcode      sql.NullString `json:"tttactcode"`      // tttactcode
	Tttactmsg       sql.NullInt64  `json:"tttactmsg"`       // tttactmsg
	Tttforecastdate pq.NullTime    `json:"tttforecastdate"` // tttforecastdate
	Tttexchname     sql.NullString `json:"tttexchname"`     // tttexchname
	Tttexchcode     sql.NullString `json:"tttexchcode"`     // tttexchcode
	EquinoxLrn      int64          `json:"equinox_lrn"`     // equinox_lrn
	EquinoxSec      sql.NullInt64  `json:"equinox_sec"`     // equinox_sec
}

func AllTttlog(db XODB, callback func(x Tttlog) bool) error {

	// sql query
	const sqlstr = `SELECT ` +
		`tttprodtype, tttsearchtype, tttsource, tttsearchdata, tttsearchdate, tttsearchtime, tttoverallresp, tttadvcode, tttadvmsg, tttactcode, tttactmsg, tttforecastdate, tttexchname, tttexchcode, equinox_lrn, equinox_sec ` +
		`FROM equinox.tttlog `

	q, err := db.Query(sqlstr)

	if err != nil {
		return err
	}
	defer q.Close()

	// load results
	for q.Next() {
		t := Tttlog{}

		// scan
		err = q.Scan(&t.Tttprodtype, &t.Tttsearchtype, &t.Tttsource, &t.Tttsearchdata, &t.Tttsearchdate, &t.Tttsearchtime, &t.Tttoverallresp, &t.Tttadvcode, &t.Tttadvmsg, &t.Tttactcode, &t.Tttactmsg, &t.Tttforecastdate, &t.Tttexchname, &t.Tttexchcode, &t.EquinoxLrn, &t.EquinoxSec)
		if err != nil {
			return err
		}
		if !callback(t) {
			return nil
		}
	}

	return nil
}

// TttlogByEquinoxLrn retrieves a row from 'equinox.tttlog' as a Tttlog.
//
// Generated from index 'tttlog_pkey'.
func TttlogByEquinoxLrn(db XODB, equinoxLrn int64) (*Tttlog, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tttprodtype, tttsearchtype, tttsource, tttsearchdata, tttsearchdate, tttsearchtime, tttoverallresp, tttadvcode, tttadvmsg, tttactcode, tttactmsg, tttforecastdate, tttexchname, tttexchcode, equinox_lrn, equinox_sec ` +
		`FROM equinox.tttlog ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	t := Tttlog{}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&t.Tttprodtype, &t.Tttsearchtype, &t.Tttsource, &t.Tttsearchdata, &t.Tttsearchdate, &t.Tttsearchtime, &t.Tttoverallresp, &t.Tttadvcode, &t.Tttadvmsg, &t.Tttactcode, &t.Tttactmsg, &t.Tttforecastdate, &t.Tttexchname, &t.Tttexchcode, &t.EquinoxLrn, &t.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &t, nil
}
