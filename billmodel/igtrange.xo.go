// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/lib/pq"
)

// Igtrange represents a row from 'equinox.igtrange'.
type Igtrange struct {
	Igtrstart     sql.NullInt64  `json:"igtrstart"`     // igtrstart
	Igtrend       sql.NullInt64  `json:"igtrend"`       // igtrend
	Igtrvalidfrom pq.NullTime    `json:"igtrvalidfrom"` // igtrvalidfrom
	Igtrvalidto   pq.NullTime    `json:"igtrvalidto"`   // igtrvalidto
	Igtrtypeid    sql.NullString `json:"igtrtypeid"`    // igtrtypeid
	EquinoxPrn    sql.NullInt64  `json:"equinox_prn"`   // equinox_prn
	EquinoxLrn    int64          `json:"equinox_lrn"`   // equinox_lrn
	EquinoxSec    sql.NullInt64  `json:"equinox_sec"`   // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Igtrange exists in the database.
func (i *Igtrange) Exists() bool {
	return i._exists
}

// Deleted provides information if the Igtrange has been deleted from the database.
func (i *Igtrange) Deleted() bool {
	return i._deleted
}

// Insert inserts the Igtrange to the database.
func (i *Igtrange) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if i._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.igtrange (` +
		`igtrstart, igtrend, igtrvalidfrom, igtrvalidto, igtrtypeid, equinox_prn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, i.Igtrstart, i.Igtrend, i.Igtrvalidfrom, i.Igtrvalidto, i.Igtrtypeid, i.EquinoxPrn, i.EquinoxSec)
	err = db.QueryRow(sqlstr, i.Igtrstart, i.Igtrend, i.Igtrvalidfrom, i.Igtrvalidto, i.Igtrtypeid, i.EquinoxPrn, i.EquinoxSec).Scan(&i.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	i._exists = true

	return nil
}

// Update updates the Igtrange in the database.
func (i *Igtrange) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !i._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if i._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.igtrange SET (` +
		`igtrstart, igtrend, igtrvalidfrom, igtrvalidto, igtrtypeid, equinox_prn, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`) WHERE equinox_lrn = $8`

	// run query
	XOLog(sqlstr, i.Igtrstart, i.Igtrend, i.Igtrvalidfrom, i.Igtrvalidto, i.Igtrtypeid, i.EquinoxPrn, i.EquinoxSec, i.EquinoxLrn)
	_, err = db.Exec(sqlstr, i.Igtrstart, i.Igtrend, i.Igtrvalidfrom, i.Igtrvalidto, i.Igtrtypeid, i.EquinoxPrn, i.EquinoxSec, i.EquinoxLrn)
	return err
}

// Save saves the Igtrange to the database.
func (i *Igtrange) Save(db XODB) error {
	if i.Exists() {
		return i.Update(db)
	}

	return i.Insert(db)
}

// Upsert performs an upsert for Igtrange.
//
// NOTE: PostgreSQL 9.5+ only
func (i *Igtrange) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if i._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.igtrange (` +
		`igtrstart, igtrend, igtrvalidfrom, igtrvalidto, igtrtypeid, equinox_prn, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`igtrstart, igtrend, igtrvalidfrom, igtrvalidto, igtrtypeid, equinox_prn, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.igtrstart, EXCLUDED.igtrend, EXCLUDED.igtrvalidfrom, EXCLUDED.igtrvalidto, EXCLUDED.igtrtypeid, EXCLUDED.equinox_prn, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, i.Igtrstart, i.Igtrend, i.Igtrvalidfrom, i.Igtrvalidto, i.Igtrtypeid, i.EquinoxPrn, i.EquinoxLrn, i.EquinoxSec)
	_, err = db.Exec(sqlstr, i.Igtrstart, i.Igtrend, i.Igtrvalidfrom, i.Igtrvalidto, i.Igtrtypeid, i.EquinoxPrn, i.EquinoxLrn, i.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	i._exists = true

	return nil
}

// Delete deletes the Igtrange from the database.
func (i *Igtrange) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !i._exists {
		return nil
	}

	// if deleted, bail
	if i._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.igtrange WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, i.EquinoxLrn)
	_, err = db.Exec(sqlstr, i.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	i._deleted = true

	return nil
}

// IgtrangeByEquinoxLrn retrieves a row from 'equinox.igtrange' as a Igtrange.
//
// Generated from index 'igtrange_pkey'.
func IgtrangeByEquinoxLrn(db XODB, equinoxLrn int64) (*Igtrange, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`igtrstart, igtrend, igtrvalidfrom, igtrvalidto, igtrtypeid, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.igtrange ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	i := Igtrange{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&i.Igtrstart, &i.Igtrend, &i.Igtrvalidfrom, &i.Igtrvalidto, &i.Igtrtypeid, &i.EquinoxPrn, &i.EquinoxLrn, &i.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &i, nil
}
