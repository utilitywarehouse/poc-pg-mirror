// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import "database/sql"

// Amaff represents a row from 'equinox.amaff'.
type Amaff struct {
	Amaffnetwork  sql.NullString  `json:"amaffnetwork"`  // amaffnetwork
	Amaffid       sql.NullString  `json:"amaffid"`       // amaffid
	Amaffid2      sql.NullString  `json:"amaffid2"`      // amaffid2
	Amaffcategory sql.NullString  `json:"amaffcategory"` // amaffcategory
	Amaffname     sql.NullString  `json:"amaffname"`     // amaffname
	Amaffperearn  sql.NullFloat64 `json:"amaffperearn"`  // amaffperearn
	Amafffixearn  sql.NullFloat64 `json:"amafffixearn"`  // amafffixearn
	Amaffstatus   sql.NullString  `json:"amaffstatus"`   // amaffstatus
	EquinoxPrn    sql.NullInt64   `json:"equinox_prn"`   // equinox_prn
	EquinoxLrn    int64           `json:"equinox_lrn"`   // equinox_lrn
	EquinoxSec    sql.NullInt64   `json:"equinox_sec"`   // equinox_sec
}

func AllAmaff(db XODB, callback func(x Amaff) bool) error {

	// sql query
	const sqlstr = `SELECT ` +
		`amaffnetwork, amaffid, amaffid2, amaffcategory, amaffname, amaffperearn, amafffixearn, amaffstatus, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.amaff `

	q, err := db.Query(sqlstr)

	if err != nil {
		return err
	}
	defer q.Close()

	// load results
	for q.Next() {
		a := Amaff{}

		// scan
		err = q.Scan(&a.Amaffnetwork, &a.Amaffid, &a.Amaffid2, &a.Amaffcategory, &a.Amaffname, &a.Amaffperearn, &a.Amafffixearn, &a.Amaffstatus, &a.EquinoxPrn, &a.EquinoxLrn, &a.EquinoxSec)
		if err != nil {
			return err
		}
		if !callback(a) {
			return nil
		}
	}

	return nil
}

// AmaffByEquinoxLrn retrieves a row from 'equinox.amaff' as a Amaff.
//
// Generated from index 'amaff_pkey'.
func AmaffByEquinoxLrn(db XODB, equinoxLrn int64) (*Amaff, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`amaffnetwork, amaffid, amaffid2, amaffcategory, amaffname, amaffperearn, amafffixearn, amaffstatus, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.amaff ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	a := Amaff{}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&a.Amaffnetwork, &a.Amaffid, &a.Amaffid2, &a.Amaffcategory, &a.Amaffname, &a.Amaffperearn, &a.Amafffixearn, &a.Amaffstatus, &a.EquinoxPrn, &a.EquinoxLrn, &a.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &a, nil
}
