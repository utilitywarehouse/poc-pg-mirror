// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// Amaff represents a row from 'equinox.amaff'.
type Amaff struct {
	Amaffnetwork  sql.NullString  `json:"amaffnetwork"`  // amaffnetwork
	Amaffid       sql.NullString  `json:"amaffid"`       // amaffid
	Amaffid2      sql.NullString  `json:"amaffid2"`      // amaffid2
	Amaffcategory sql.NullString  `json:"amaffcategory"` // amaffcategory
	Amaffname     sql.NullString  `json:"amaffname"`     // amaffname
	Amaffperearn  sql.NullFloat64 `json:"amaffperearn"`  // amaffperearn
	Amafffixearn  sql.NullFloat64 `json:"amafffixearn"`  // amafffixearn
	Amaffstatus   sql.NullString  `json:"amaffstatus"`   // amaffstatus
	EquinoxPrn    sql.NullInt64   `json:"equinox_prn"`   // equinox_prn
	EquinoxLrn    int64           `json:"equinox_lrn"`   // equinox_lrn
	EquinoxSec    sql.NullInt64   `json:"equinox_sec"`   // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Amaff exists in the database.
func (a *Amaff) Exists() bool {
	return a._exists
}

// Deleted provides information if the Amaff has been deleted from the database.
func (a *Amaff) Deleted() bool {
	return a._deleted
}

// Insert inserts the Amaff to the database.
func (a *Amaff) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if a._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.amaff (` +
		`amaffnetwork, amaffid, amaffid2, amaffcategory, amaffname, amaffperearn, amafffixearn, amaffstatus, equinox_prn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, a.Amaffnetwork, a.Amaffid, a.Amaffid2, a.Amaffcategory, a.Amaffname, a.Amaffperearn, a.Amafffixearn, a.Amaffstatus, a.EquinoxPrn, a.EquinoxSec)
	err = db.QueryRow(sqlstr, a.Amaffnetwork, a.Amaffid, a.Amaffid2, a.Amaffcategory, a.Amaffname, a.Amaffperearn, a.Amafffixearn, a.Amaffstatus, a.EquinoxPrn, a.EquinoxSec).Scan(&a.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	a._exists = true

	return nil
}

// Update updates the Amaff in the database.
func (a *Amaff) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !a._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if a._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.amaff SET (` +
		`amaffnetwork, amaffid, amaffid2, amaffcategory, amaffname, amaffperearn, amafffixearn, amaffstatus, equinox_prn, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10` +
		`) WHERE equinox_lrn = $11`

	// run query
	XOLog(sqlstr, a.Amaffnetwork, a.Amaffid, a.Amaffid2, a.Amaffcategory, a.Amaffname, a.Amaffperearn, a.Amafffixearn, a.Amaffstatus, a.EquinoxPrn, a.EquinoxSec, a.EquinoxLrn)
	_, err = db.Exec(sqlstr, a.Amaffnetwork, a.Amaffid, a.Amaffid2, a.Amaffcategory, a.Amaffname, a.Amaffperearn, a.Amafffixearn, a.Amaffstatus, a.EquinoxPrn, a.EquinoxSec, a.EquinoxLrn)
	return err
}

// Save saves the Amaff to the database.
func (a *Amaff) Save(db XODB) error {
	if a.Exists() {
		return a.Update(db)
	}

	return a.Insert(db)
}

// Upsert performs an upsert for Amaff.
//
// NOTE: PostgreSQL 9.5+ only
func (a *Amaff) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if a._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.amaff (` +
		`amaffnetwork, amaffid, amaffid2, amaffcategory, amaffname, amaffperearn, amafffixearn, amaffstatus, equinox_prn, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`amaffnetwork, amaffid, amaffid2, amaffcategory, amaffname, amaffperearn, amafffixearn, amaffstatus, equinox_prn, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.amaffnetwork, EXCLUDED.amaffid, EXCLUDED.amaffid2, EXCLUDED.amaffcategory, EXCLUDED.amaffname, EXCLUDED.amaffperearn, EXCLUDED.amafffixearn, EXCLUDED.amaffstatus, EXCLUDED.equinox_prn, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, a.Amaffnetwork, a.Amaffid, a.Amaffid2, a.Amaffcategory, a.Amaffname, a.Amaffperearn, a.Amafffixearn, a.Amaffstatus, a.EquinoxPrn, a.EquinoxLrn, a.EquinoxSec)
	_, err = db.Exec(sqlstr, a.Amaffnetwork, a.Amaffid, a.Amaffid2, a.Amaffcategory, a.Amaffname, a.Amaffperearn, a.Amafffixearn, a.Amaffstatus, a.EquinoxPrn, a.EquinoxLrn, a.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	a._exists = true

	return nil
}

// Delete deletes the Amaff from the database.
func (a *Amaff) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !a._exists {
		return nil
	}

	// if deleted, bail
	if a._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.amaff WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, a.EquinoxLrn)
	_, err = db.Exec(sqlstr, a.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	a._deleted = true

	return nil
}

// AmaffByEquinoxLrn retrieves a row from 'equinox.amaff' as a Amaff.
//
// Generated from index 'amaff_pkey'.
func AmaffByEquinoxLrn(db XODB, equinoxLrn int64) (*Amaff, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`amaffnetwork, amaffid, amaffid2, amaffcategory, amaffname, amaffperearn, amafffixearn, amaffstatus, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.amaff ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	a := Amaff{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&a.Amaffnetwork, &a.Amaffid, &a.Amaffid2, &a.Amaffcategory, &a.Amaffname, &a.Amaffperearn, &a.Amafffixearn, &a.Amaffstatus, &a.EquinoxPrn, &a.EquinoxLrn, &a.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &a, nil
}
