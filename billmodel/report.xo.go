// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/lib/pq"
)

// Report represents a row from 'equinox.reports'.
type Report struct {
	ReportName  sql.NullString `json:"report_name"`  // report_name
	ReportDesc  sql.NullString `json:"report_desc"`  // report_desc
	ReportStart pq.NullTime    `json:"report_start"` // report_start
	ReportEnd   pq.NullTime    `json:"report_end"`   // report_end
	ReportDate  pq.NullTime    `json:"report_date"`  // report_date
	ReportBy    sql.NullString `json:"report_by"`    // report_by
	ReportFreq  sql.NullInt64  `json:"report_freq"`  // report_freq
	EquinoxLrn  int64          `json:"equinox_lrn"`  // equinox_lrn
	EquinoxSec  sql.NullInt64  `json:"equinox_sec"`  // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Report exists in the database.
func (r *Report) Exists() bool {
	return r._exists
}

// Deleted provides information if the Report has been deleted from the database.
func (r *Report) Deleted() bool {
	return r._deleted
}

// Insert inserts the Report to the database.
func (r *Report) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if r._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.reports (` +
		`report_name, report_desc, report_start, report_end, report_date, report_by, report_freq, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, r.ReportName, r.ReportDesc, r.ReportStart, r.ReportEnd, r.ReportDate, r.ReportBy, r.ReportFreq, r.EquinoxSec)
	err = db.QueryRow(sqlstr, r.ReportName, r.ReportDesc, r.ReportStart, r.ReportEnd, r.ReportDate, r.ReportBy, r.ReportFreq, r.EquinoxSec).Scan(&r.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	r._exists = true

	return nil
}

// Update updates the Report in the database.
func (r *Report) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !r._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if r._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.reports SET (` +
		`report_name, report_desc, report_start, report_end, report_date, report_by, report_freq, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`) WHERE equinox_lrn = $9`

	// run query
	XOLog(sqlstr, r.ReportName, r.ReportDesc, r.ReportStart, r.ReportEnd, r.ReportDate, r.ReportBy, r.ReportFreq, r.EquinoxSec, r.EquinoxLrn)
	_, err = db.Exec(sqlstr, r.ReportName, r.ReportDesc, r.ReportStart, r.ReportEnd, r.ReportDate, r.ReportBy, r.ReportFreq, r.EquinoxSec, r.EquinoxLrn)
	return err
}

// Save saves the Report to the database.
func (r *Report) Save(db XODB) error {
	if r.Exists() {
		return r.Update(db)
	}

	return r.Insert(db)
}

// Upsert performs an upsert for Report.
//
// NOTE: PostgreSQL 9.5+ only
func (r *Report) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if r._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.reports (` +
		`report_name, report_desc, report_start, report_end, report_date, report_by, report_freq, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`report_name, report_desc, report_start, report_end, report_date, report_by, report_freq, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.report_name, EXCLUDED.report_desc, EXCLUDED.report_start, EXCLUDED.report_end, EXCLUDED.report_date, EXCLUDED.report_by, EXCLUDED.report_freq, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, r.ReportName, r.ReportDesc, r.ReportStart, r.ReportEnd, r.ReportDate, r.ReportBy, r.ReportFreq, r.EquinoxLrn, r.EquinoxSec)
	_, err = db.Exec(sqlstr, r.ReportName, r.ReportDesc, r.ReportStart, r.ReportEnd, r.ReportDate, r.ReportBy, r.ReportFreq, r.EquinoxLrn, r.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	r._exists = true

	return nil
}

// Delete deletes the Report from the database.
func (r *Report) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !r._exists {
		return nil
	}

	// if deleted, bail
	if r._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.reports WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, r.EquinoxLrn)
	_, err = db.Exec(sqlstr, r.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	r._deleted = true

	return nil
}

// ReportByEquinoxLrn retrieves a row from 'equinox.reports' as a Report.
//
// Generated from index 'reports_pkey'.
func ReportByEquinoxLrn(db XODB, equinoxLrn int64) (*Report, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`report_name, report_desc, report_start, report_end, report_date, report_by, report_freq, equinox_lrn, equinox_sec ` +
		`FROM equinox.reports ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	r := Report{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&r.ReportName, &r.ReportDesc, &r.ReportStart, &r.ReportEnd, &r.ReportDate, &r.ReportBy, &r.ReportFreq, &r.EquinoxLrn, &r.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &r, nil
}
