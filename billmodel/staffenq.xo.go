// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// Staffenq represents a row from 'equinox.staffenq'.
type Staffenq struct {
	StaffEnqcode sql.NullString `json:"staff_enqcode"` // staff_enqcode
	EquinoxPrn   sql.NullInt64  `json:"equinox_prn"`   // equinox_prn
	EquinoxLrn   int64          `json:"equinox_lrn"`   // equinox_lrn
	EquinoxSec   sql.NullInt64  `json:"equinox_sec"`   // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Staffenq exists in the database.
func (s *Staffenq) Exists() bool {
	return s._exists
}

// Deleted provides information if the Staffenq has been deleted from the database.
func (s *Staffenq) Deleted() bool {
	return s._deleted
}

// Insert inserts the Staffenq to the database.
func (s *Staffenq) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if s._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.staffenq (` +
		`staff_enqcode, equinox_prn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, s.StaffEnqcode, s.EquinoxPrn, s.EquinoxSec)
	err = db.QueryRow(sqlstr, s.StaffEnqcode, s.EquinoxPrn, s.EquinoxSec).Scan(&s.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	s._exists = true

	return nil
}

// Update updates the Staffenq in the database.
func (s *Staffenq) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !s._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if s._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.staffenq SET (` +
		`staff_enqcode, equinox_prn, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3` +
		`) WHERE equinox_lrn = $4`

	// run query
	XOLog(sqlstr, s.StaffEnqcode, s.EquinoxPrn, s.EquinoxSec, s.EquinoxLrn)
	_, err = db.Exec(sqlstr, s.StaffEnqcode, s.EquinoxPrn, s.EquinoxSec, s.EquinoxLrn)
	return err
}

// Save saves the Staffenq to the database.
func (s *Staffenq) Save(db XODB) error {
	if s.Exists() {
		return s.Update(db)
	}

	return s.Insert(db)
}

// Upsert performs an upsert for Staffenq.
//
// NOTE: PostgreSQL 9.5+ only
func (s *Staffenq) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if s._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.staffenq (` +
		`staff_enqcode, equinox_prn, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`staff_enqcode, equinox_prn, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.staff_enqcode, EXCLUDED.equinox_prn, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, s.StaffEnqcode, s.EquinoxPrn, s.EquinoxLrn, s.EquinoxSec)
	_, err = db.Exec(sqlstr, s.StaffEnqcode, s.EquinoxPrn, s.EquinoxLrn, s.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	s._exists = true

	return nil
}

// Delete deletes the Staffenq from the database.
func (s *Staffenq) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !s._exists {
		return nil
	}

	// if deleted, bail
	if s._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.staffenq WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, s.EquinoxLrn)
	_, err = db.Exec(sqlstr, s.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	s._deleted = true

	return nil
}

// StaffenqByEquinoxLrn retrieves a row from 'equinox.staffenq' as a Staffenq.
//
// Generated from index 'staffenq_pkey'.
func StaffenqByEquinoxLrn(db XODB, equinoxLrn int64) (*Staffenq, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`staff_enqcode, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.staffenq ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	s := Staffenq{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&s.StaffEnqcode, &s.EquinoxPrn, &s.EquinoxLrn, &s.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &s, nil
}
