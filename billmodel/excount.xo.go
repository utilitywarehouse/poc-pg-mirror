// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import "database/sql"

// Excount represents a row from 'equinox.excount'.
type Excount struct {
	Excntmonth     sql.NullString `json:"excntmonth"`     // excntmonth
	Excntcusts0svs sql.NullInt64  `json:"excntcusts0svs"` // excntcusts0svs
	Excntcusts1svs sql.NullInt64  `json:"excntcusts1svs"` // excntcusts1svs
	Excntcusts2svs sql.NullInt64  `json:"excntcusts2svs"` // excntcusts2svs
	Excntcusts3svs sql.NullInt64  `json:"excntcusts3svs"` // excntcusts3svs
	Excntcusts4svs sql.NullInt64  `json:"excntcusts4svs"` // excntcusts4svs
	Excntcusts5svs sql.NullInt64  `json:"excntcusts5svs"` // excntcusts5svs
	Excntpartners  sql.NullInt64  `json:"excntpartners"`  // excntpartners
	Excntholpoints sql.NullInt64  `json:"excntholpoints"` // excntholpoints
	EquinoxPrn     sql.NullInt64  `json:"equinox_prn"`    // equinox_prn
	EquinoxLrn     int64          `json:"equinox_lrn"`    // equinox_lrn
	EquinoxSec     sql.NullInt64  `json:"equinox_sec"`    // equinox_sec
}

func AllExcount(db XODB, callback func(x Excount) bool) error {

	// sql query
	const sqlstr = `SELECT ` +
		`excntmonth, excntcusts0svs, excntcusts1svs, excntcusts2svs, excntcusts3svs, excntcusts4svs, excntcusts5svs, excntpartners, excntholpoints, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.excount `

	q, err := db.Query(sqlstr)

	if err != nil {
		return err
	}
	defer q.Close()

	// load results
	for q.Next() {
		e := Excount{}

		// scan
		err = q.Scan(&e.Excntmonth, &e.Excntcusts0svs, &e.Excntcusts1svs, &e.Excntcusts2svs, &e.Excntcusts3svs, &e.Excntcusts4svs, &e.Excntcusts5svs, &e.Excntpartners, &e.Excntholpoints, &e.EquinoxPrn, &e.EquinoxLrn, &e.EquinoxSec)
		if err != nil {
			return err
		}
		if !callback(e) {
			return nil
		}
	}

	return nil
}

// ExcountByEquinoxLrn retrieves a row from 'equinox.excount' as a Excount.
//
// Generated from index 'excount_pkey'.
func ExcountByEquinoxLrn(db XODB, equinoxLrn int64) (*Excount, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`excntmonth, excntcusts0svs, excntcusts1svs, excntcusts2svs, excntcusts3svs, excntcusts4svs, excntcusts5svs, excntpartners, excntholpoints, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.excount ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	e := Excount{}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&e.Excntmonth, &e.Excntcusts0svs, &e.Excntcusts1svs, &e.Excntcusts2svs, &e.Excntcusts3svs, &e.Excntcusts4svs, &e.Excntcusts5svs, &e.Excntpartners, &e.Excntholpoints, &e.EquinoxPrn, &e.EquinoxLrn, &e.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &e, nil
}
