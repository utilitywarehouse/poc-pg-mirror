// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// Excount represents a row from 'equinox.excount'.
type Excount struct {
	Excntmonth     sql.NullString `json:"excntmonth"`     // excntmonth
	Excntcusts0svs sql.NullInt64  `json:"excntcusts0svs"` // excntcusts0svs
	Excntcusts1svs sql.NullInt64  `json:"excntcusts1svs"` // excntcusts1svs
	Excntcusts2svs sql.NullInt64  `json:"excntcusts2svs"` // excntcusts2svs
	Excntcusts3svs sql.NullInt64  `json:"excntcusts3svs"` // excntcusts3svs
	Excntcusts4svs sql.NullInt64  `json:"excntcusts4svs"` // excntcusts4svs
	Excntcusts5svs sql.NullInt64  `json:"excntcusts5svs"` // excntcusts5svs
	Excntpartners  sql.NullInt64  `json:"excntpartners"`  // excntpartners
	Excntholpoints sql.NullInt64  `json:"excntholpoints"` // excntholpoints
	EquinoxPrn     sql.NullInt64  `json:"equinox_prn"`    // equinox_prn
	EquinoxLrn     int64          `json:"equinox_lrn"`    // equinox_lrn
	EquinoxSec     sql.NullInt64  `json:"equinox_sec"`    // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Excount exists in the database.
func (e *Excount) Exists() bool {
	return e._exists
}

// Deleted provides information if the Excount has been deleted from the database.
func (e *Excount) Deleted() bool {
	return e._deleted
}

// Insert inserts the Excount to the database.
func (e *Excount) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if e._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.excount (` +
		`excntmonth, excntcusts0svs, excntcusts1svs, excntcusts2svs, excntcusts3svs, excntcusts4svs, excntcusts5svs, excntpartners, excntholpoints, equinox_prn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, e.Excntmonth, e.Excntcusts0svs, e.Excntcusts1svs, e.Excntcusts2svs, e.Excntcusts3svs, e.Excntcusts4svs, e.Excntcusts5svs, e.Excntpartners, e.Excntholpoints, e.EquinoxPrn, e.EquinoxSec)
	err = db.QueryRow(sqlstr, e.Excntmonth, e.Excntcusts0svs, e.Excntcusts1svs, e.Excntcusts2svs, e.Excntcusts3svs, e.Excntcusts4svs, e.Excntcusts5svs, e.Excntpartners, e.Excntholpoints, e.EquinoxPrn, e.EquinoxSec).Scan(&e.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	e._exists = true

	return nil
}

// Update updates the Excount in the database.
func (e *Excount) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !e._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if e._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.excount SET (` +
		`excntmonth, excntcusts0svs, excntcusts1svs, excntcusts2svs, excntcusts3svs, excntcusts4svs, excntcusts5svs, excntpartners, excntholpoints, equinox_prn, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11` +
		`) WHERE equinox_lrn = $12`

	// run query
	XOLog(sqlstr, e.Excntmonth, e.Excntcusts0svs, e.Excntcusts1svs, e.Excntcusts2svs, e.Excntcusts3svs, e.Excntcusts4svs, e.Excntcusts5svs, e.Excntpartners, e.Excntholpoints, e.EquinoxPrn, e.EquinoxSec, e.EquinoxLrn)
	_, err = db.Exec(sqlstr, e.Excntmonth, e.Excntcusts0svs, e.Excntcusts1svs, e.Excntcusts2svs, e.Excntcusts3svs, e.Excntcusts4svs, e.Excntcusts5svs, e.Excntpartners, e.Excntholpoints, e.EquinoxPrn, e.EquinoxSec, e.EquinoxLrn)
	return err
}

// Save saves the Excount to the database.
func (e *Excount) Save(db XODB) error {
	if e.Exists() {
		return e.Update(db)
	}

	return e.Insert(db)
}

// Upsert performs an upsert for Excount.
//
// NOTE: PostgreSQL 9.5+ only
func (e *Excount) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if e._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.excount (` +
		`excntmonth, excntcusts0svs, excntcusts1svs, excntcusts2svs, excntcusts3svs, excntcusts4svs, excntcusts5svs, excntpartners, excntholpoints, equinox_prn, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`excntmonth, excntcusts0svs, excntcusts1svs, excntcusts2svs, excntcusts3svs, excntcusts4svs, excntcusts5svs, excntpartners, excntholpoints, equinox_prn, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.excntmonth, EXCLUDED.excntcusts0svs, EXCLUDED.excntcusts1svs, EXCLUDED.excntcusts2svs, EXCLUDED.excntcusts3svs, EXCLUDED.excntcusts4svs, EXCLUDED.excntcusts5svs, EXCLUDED.excntpartners, EXCLUDED.excntholpoints, EXCLUDED.equinox_prn, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, e.Excntmonth, e.Excntcusts0svs, e.Excntcusts1svs, e.Excntcusts2svs, e.Excntcusts3svs, e.Excntcusts4svs, e.Excntcusts5svs, e.Excntpartners, e.Excntholpoints, e.EquinoxPrn, e.EquinoxLrn, e.EquinoxSec)
	_, err = db.Exec(sqlstr, e.Excntmonth, e.Excntcusts0svs, e.Excntcusts1svs, e.Excntcusts2svs, e.Excntcusts3svs, e.Excntcusts4svs, e.Excntcusts5svs, e.Excntpartners, e.Excntholpoints, e.EquinoxPrn, e.EquinoxLrn, e.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	e._exists = true

	return nil
}

// Delete deletes the Excount from the database.
func (e *Excount) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !e._exists {
		return nil
	}

	// if deleted, bail
	if e._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.excount WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, e.EquinoxLrn)
	_, err = db.Exec(sqlstr, e.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	e._deleted = true

	return nil
}

// ExcountByEquinoxLrn retrieves a row from 'equinox.excount' as a Excount.
//
// Generated from index 'excount_pkey'.
func ExcountByEquinoxLrn(db XODB, equinoxLrn int64) (*Excount, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`excntmonth, excntcusts0svs, excntcusts1svs, excntcusts2svs, excntcusts3svs, excntcusts4svs, excntcusts5svs, excntpartners, excntholpoints, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.excount ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	e := Excount{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&e.Excntmonth, &e.Excntcusts0svs, &e.Excntcusts1svs, &e.Excntcusts2svs, &e.Excntcusts3svs, &e.Excntcusts4svs, &e.Excntcusts5svs, &e.Excntpartners, &e.Excntholpoints, &e.EquinoxPrn, &e.EquinoxLrn, &e.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &e, nil
}
