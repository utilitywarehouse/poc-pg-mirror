// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/lib/pq"
)

// Charge represents a row from 'equinox.charges'.
type Charge struct {
	Chguniquesys   sql.NullString  `json:"chguniquesys"`   // chguniquesys
	Chgdate        pq.NullTime     `json:"chgdate"`        // chgdate
	Chgdescription sql.NullString  `json:"chgdescription"` // chgdescription
	Chgnet         sql.NullFloat64 `json:"chgnet"`         // chgnet
	Chgvatstd      sql.NullFloat64 `json:"chgvatstd"`      // chgvatstd
	Chgvatnrg      sql.NullFloat64 `json:"chgvatnrg"`      // chgvatnrg
	Chgtotal       sql.NullFloat64 `json:"chgtotal"`       // chgtotal
	Chgbillno      sql.NullFloat64 `json:"chgbillno"`      // chgbillno
	Chgbillperiod  sql.NullString  `json:"chgbillperiod"`  // chgbillperiod
	Chgprobcode    sql.NullString  `json:"chgprobcode"`    // chgprobcode
	Chgostotal     sql.NullFloat64 `json:"chgostotal"`     // chgostotal
	Chgosvatstd    sql.NullFloat64 `json:"chgosvatstd"`    // chgosvatstd
	Chgosvatnrg    sql.NullFloat64 `json:"chgosvatnrg"`    // chgosvatnrg
	Chgosnet       sql.NullFloat64 `json:"chgosnet"`       // chgosnet
	Chdmemo        sql.NullInt64   `json:"chdmemo"`        // chdmemo
	Chgsparec1     sql.NullString  `json:"chgsparec1"`     // chgsparec1
	Chgsparen1     sql.NullFloat64 `json:"chgsparen1"`     // chgsparen1
	Chgspared1     pq.NullTime     `json:"chgspared1"`     // chgspared1
	EquinoxPrn     sql.NullInt64   `json:"equinox_prn"`    // equinox_prn
	EquinoxLrn     int64           `json:"equinox_lrn"`    // equinox_lrn
	EquinoxSec     sql.NullInt64   `json:"equinox_sec"`    // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Charge exists in the database.
func (c *Charge) Exists() bool {
	return c._exists
}

// Deleted provides information if the Charge has been deleted from the database.
func (c *Charge) Deleted() bool {
	return c._deleted
}

// Insert inserts the Charge to the database.
func (c *Charge) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.charges (` +
		`chguniquesys, chgdate, chgdescription, chgnet, chgvatstd, chgvatnrg, chgtotal, chgbillno, chgbillperiod, chgprobcode, chgostotal, chgosvatstd, chgosvatnrg, chgosnet, chdmemo, chgsparec1, chgsparen1, chgspared1, equinox_prn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, c.Chguniquesys, c.Chgdate, c.Chgdescription, c.Chgnet, c.Chgvatstd, c.Chgvatnrg, c.Chgtotal, c.Chgbillno, c.Chgbillperiod, c.Chgprobcode, c.Chgostotal, c.Chgosvatstd, c.Chgosvatnrg, c.Chgosnet, c.Chdmemo, c.Chgsparec1, c.Chgsparen1, c.Chgspared1, c.EquinoxPrn, c.EquinoxSec)
	err = db.QueryRow(sqlstr, c.Chguniquesys, c.Chgdate, c.Chgdescription, c.Chgnet, c.Chgvatstd, c.Chgvatnrg, c.Chgtotal, c.Chgbillno, c.Chgbillperiod, c.Chgprobcode, c.Chgostotal, c.Chgosvatstd, c.Chgosvatnrg, c.Chgosnet, c.Chdmemo, c.Chgsparec1, c.Chgsparen1, c.Chgspared1, c.EquinoxPrn, c.EquinoxSec).Scan(&c.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Update updates the Charge in the database.
func (c *Charge) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if c._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.charges SET (` +
		`chguniquesys, chgdate, chgdescription, chgnet, chgvatstd, chgvatnrg, chgtotal, chgbillno, chgbillperiod, chgprobcode, chgostotal, chgosvatstd, chgosvatnrg, chgosnet, chdmemo, chgsparec1, chgsparen1, chgspared1, equinox_prn, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20` +
		`) WHERE equinox_lrn = $21`

	// run query
	XOLog(sqlstr, c.Chguniquesys, c.Chgdate, c.Chgdescription, c.Chgnet, c.Chgvatstd, c.Chgvatnrg, c.Chgtotal, c.Chgbillno, c.Chgbillperiod, c.Chgprobcode, c.Chgostotal, c.Chgosvatstd, c.Chgosvatnrg, c.Chgosnet, c.Chdmemo, c.Chgsparec1, c.Chgsparen1, c.Chgspared1, c.EquinoxPrn, c.EquinoxSec, c.EquinoxLrn)
	_, err = db.Exec(sqlstr, c.Chguniquesys, c.Chgdate, c.Chgdescription, c.Chgnet, c.Chgvatstd, c.Chgvatnrg, c.Chgtotal, c.Chgbillno, c.Chgbillperiod, c.Chgprobcode, c.Chgostotal, c.Chgosvatstd, c.Chgosvatnrg, c.Chgosnet, c.Chdmemo, c.Chgsparec1, c.Chgsparen1, c.Chgspared1, c.EquinoxPrn, c.EquinoxSec, c.EquinoxLrn)
	return err
}

// Save saves the Charge to the database.
func (c *Charge) Save(db XODB) error {
	if c.Exists() {
		return c.Update(db)
	}

	return c.Insert(db)
}

// Upsert performs an upsert for Charge.
//
// NOTE: PostgreSQL 9.5+ only
func (c *Charge) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.charges (` +
		`chguniquesys, chgdate, chgdescription, chgnet, chgvatstd, chgvatnrg, chgtotal, chgbillno, chgbillperiod, chgprobcode, chgostotal, chgosvatstd, chgosvatnrg, chgosnet, chdmemo, chgsparec1, chgsparen1, chgspared1, equinox_prn, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`chguniquesys, chgdate, chgdescription, chgnet, chgvatstd, chgvatnrg, chgtotal, chgbillno, chgbillperiod, chgprobcode, chgostotal, chgosvatstd, chgosvatnrg, chgosnet, chdmemo, chgsparec1, chgsparen1, chgspared1, equinox_prn, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.chguniquesys, EXCLUDED.chgdate, EXCLUDED.chgdescription, EXCLUDED.chgnet, EXCLUDED.chgvatstd, EXCLUDED.chgvatnrg, EXCLUDED.chgtotal, EXCLUDED.chgbillno, EXCLUDED.chgbillperiod, EXCLUDED.chgprobcode, EXCLUDED.chgostotal, EXCLUDED.chgosvatstd, EXCLUDED.chgosvatnrg, EXCLUDED.chgosnet, EXCLUDED.chdmemo, EXCLUDED.chgsparec1, EXCLUDED.chgsparen1, EXCLUDED.chgspared1, EXCLUDED.equinox_prn, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, c.Chguniquesys, c.Chgdate, c.Chgdescription, c.Chgnet, c.Chgvatstd, c.Chgvatnrg, c.Chgtotal, c.Chgbillno, c.Chgbillperiod, c.Chgprobcode, c.Chgostotal, c.Chgosvatstd, c.Chgosvatnrg, c.Chgosnet, c.Chdmemo, c.Chgsparec1, c.Chgsparen1, c.Chgspared1, c.EquinoxPrn, c.EquinoxLrn, c.EquinoxSec)
	_, err = db.Exec(sqlstr, c.Chguniquesys, c.Chgdate, c.Chgdescription, c.Chgnet, c.Chgvatstd, c.Chgvatnrg, c.Chgtotal, c.Chgbillno, c.Chgbillperiod, c.Chgprobcode, c.Chgostotal, c.Chgosvatstd, c.Chgosvatnrg, c.Chgosnet, c.Chdmemo, c.Chgsparec1, c.Chgsparen1, c.Chgspared1, c.EquinoxPrn, c.EquinoxLrn, c.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Delete deletes the Charge from the database.
func (c *Charge) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return nil
	}

	// if deleted, bail
	if c._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.charges WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, c.EquinoxLrn)
	_, err = db.Exec(sqlstr, c.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	c._deleted = true

	return nil
}

// ChargeByEquinoxLrn retrieves a row from 'equinox.charges' as a Charge.
//
// Generated from index 'charges_pkey'.
func ChargeByEquinoxLrn(db XODB, equinoxLrn int64) (*Charge, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`chguniquesys, chgdate, chgdescription, chgnet, chgvatstd, chgvatnrg, chgtotal, chgbillno, chgbillperiod, chgprobcode, chgostotal, chgosvatstd, chgosvatnrg, chgosnet, chdmemo, chgsparec1, chgsparen1, chgspared1, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.charges ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	c := Charge{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&c.Chguniquesys, &c.Chgdate, &c.Chgdescription, &c.Chgnet, &c.Chgvatstd, &c.Chgvatnrg, &c.Chgtotal, &c.Chgbillno, &c.Chgbillperiod, &c.Chgprobcode, &c.Chgostotal, &c.Chgosvatstd, &c.Chgosvatnrg, &c.Chgosnet, &c.Chdmemo, &c.Chgsparec1, &c.Chgsparen1, &c.Chgspared1, &c.EquinoxPrn, &c.EquinoxLrn, &c.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &c, nil
}
