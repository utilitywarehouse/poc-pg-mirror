// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import "database/sql"

// Gcomvat represents a row from 'equinox.gcomvat'.
type Gcomvat struct {
	Gcomvatid      sql.NullFloat64 `json:"gcomvatid"`      // gcomvatid
	Gcomvatdescrip sql.NullString  `json:"gcomvatdescrip"` // gcomvatdescrip
	Gcomvatrate    sql.NullFloat64 `json:"gcomvatrate"`    // gcomvatrate
	Gcomvatvalue   sql.NullFloat64 `json:"gcomvatvalue"`   // gcomvatvalue
	Gcomvatunits   sql.NullFloat64 `json:"gcomvatunits"`   // gcomvatunits
	EquinoxPrn     sql.NullInt64   `json:"equinox_prn"`    // equinox_prn
	EquinoxLrn     int64           `json:"equinox_lrn"`    // equinox_lrn
	EquinoxSec     sql.NullInt64   `json:"equinox_sec"`    // equinox_sec
}

func AllGcomvat(db XODB, callback func(x Gcomvat) bool) error {

	// sql query
	const sqlstr = `SELECT ` +
		`gcomvatid, gcomvatdescrip, gcomvatrate, gcomvatvalue, gcomvatunits, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.gcomvat `

	q, err := db.Query(sqlstr)

	if err != nil {
		return err
	}
	defer q.Close()

	// load results
	for q.Next() {
		g := Gcomvat{}

		// scan
		err = q.Scan(&g.Gcomvatid, &g.Gcomvatdescrip, &g.Gcomvatrate, &g.Gcomvatvalue, &g.Gcomvatunits, &g.EquinoxPrn, &g.EquinoxLrn, &g.EquinoxSec)
		if err != nil {
			return err
		}
		if !callback(g) {
			return nil
		}
	}

	return nil
}

// GcomvatByEquinoxLrn retrieves a row from 'equinox.gcomvat' as a Gcomvat.
//
// Generated from index 'gcomvat_pkey'.
func GcomvatByEquinoxLrn(db XODB, equinoxLrn int64) (*Gcomvat, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`gcomvatid, gcomvatdescrip, gcomvatrate, gcomvatvalue, gcomvatunits, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.gcomvat ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	g := Gcomvat{}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&g.Gcomvatid, &g.Gcomvatdescrip, &g.Gcomvatrate, &g.Gcomvatvalue, &g.Gcomvatunits, &g.EquinoxPrn, &g.EquinoxLrn, &g.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &g, nil
}
