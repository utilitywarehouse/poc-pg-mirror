// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// Gcomvat represents a row from 'equinox.gcomvat'.
type Gcomvat struct {
	Gcomvatid      sql.NullFloat64 `json:"gcomvatid"`      // gcomvatid
	Gcomvatdescrip sql.NullString  `json:"gcomvatdescrip"` // gcomvatdescrip
	Gcomvatrate    sql.NullFloat64 `json:"gcomvatrate"`    // gcomvatrate
	Gcomvatvalue   sql.NullFloat64 `json:"gcomvatvalue"`   // gcomvatvalue
	Gcomvatunits   sql.NullFloat64 `json:"gcomvatunits"`   // gcomvatunits
	EquinoxPrn     sql.NullInt64   `json:"equinox_prn"`    // equinox_prn
	EquinoxLrn     int64           `json:"equinox_lrn"`    // equinox_lrn
	EquinoxSec     sql.NullInt64   `json:"equinox_sec"`    // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Gcomvat exists in the database.
func (g *Gcomvat) Exists() bool {
	return g._exists
}

// Deleted provides information if the Gcomvat has been deleted from the database.
func (g *Gcomvat) Deleted() bool {
	return g._deleted
}

// Insert inserts the Gcomvat to the database.
func (g *Gcomvat) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if g._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.gcomvat (` +
		`gcomvatid, gcomvatdescrip, gcomvatrate, gcomvatvalue, gcomvatunits, equinox_prn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, g.Gcomvatid, g.Gcomvatdescrip, g.Gcomvatrate, g.Gcomvatvalue, g.Gcomvatunits, g.EquinoxPrn, g.EquinoxSec)
	err = db.QueryRow(sqlstr, g.Gcomvatid, g.Gcomvatdescrip, g.Gcomvatrate, g.Gcomvatvalue, g.Gcomvatunits, g.EquinoxPrn, g.EquinoxSec).Scan(&g.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	g._exists = true

	return nil
}

// Update updates the Gcomvat in the database.
func (g *Gcomvat) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !g._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if g._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.gcomvat SET (` +
		`gcomvatid, gcomvatdescrip, gcomvatrate, gcomvatvalue, gcomvatunits, equinox_prn, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`) WHERE equinox_lrn = $8`

	// run query
	XOLog(sqlstr, g.Gcomvatid, g.Gcomvatdescrip, g.Gcomvatrate, g.Gcomvatvalue, g.Gcomvatunits, g.EquinoxPrn, g.EquinoxSec, g.EquinoxLrn)
	_, err = db.Exec(sqlstr, g.Gcomvatid, g.Gcomvatdescrip, g.Gcomvatrate, g.Gcomvatvalue, g.Gcomvatunits, g.EquinoxPrn, g.EquinoxSec, g.EquinoxLrn)
	return err
}

// Save saves the Gcomvat to the database.
func (g *Gcomvat) Save(db XODB) error {
	if g.Exists() {
		return g.Update(db)
	}

	return g.Insert(db)
}

// Upsert performs an upsert for Gcomvat.
//
// NOTE: PostgreSQL 9.5+ only
func (g *Gcomvat) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if g._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.gcomvat (` +
		`gcomvatid, gcomvatdescrip, gcomvatrate, gcomvatvalue, gcomvatunits, equinox_prn, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`gcomvatid, gcomvatdescrip, gcomvatrate, gcomvatvalue, gcomvatunits, equinox_prn, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.gcomvatid, EXCLUDED.gcomvatdescrip, EXCLUDED.gcomvatrate, EXCLUDED.gcomvatvalue, EXCLUDED.gcomvatunits, EXCLUDED.equinox_prn, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, g.Gcomvatid, g.Gcomvatdescrip, g.Gcomvatrate, g.Gcomvatvalue, g.Gcomvatunits, g.EquinoxPrn, g.EquinoxLrn, g.EquinoxSec)
	_, err = db.Exec(sqlstr, g.Gcomvatid, g.Gcomvatdescrip, g.Gcomvatrate, g.Gcomvatvalue, g.Gcomvatunits, g.EquinoxPrn, g.EquinoxLrn, g.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	g._exists = true

	return nil
}

// Delete deletes the Gcomvat from the database.
func (g *Gcomvat) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !g._exists {
		return nil
	}

	// if deleted, bail
	if g._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.gcomvat WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, g.EquinoxLrn)
	_, err = db.Exec(sqlstr, g.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	g._deleted = true

	return nil
}

// GcomvatByEquinoxLrn retrieves a row from 'equinox.gcomvat' as a Gcomvat.
//
// Generated from index 'gcomvat_pkey'.
func GcomvatByEquinoxLrn(db XODB, equinoxLrn int64) (*Gcomvat, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`gcomvatid, gcomvatdescrip, gcomvatrate, gcomvatvalue, gcomvatunits, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.gcomvat ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	g := Gcomvat{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&g.Gcomvatid, &g.Gcomvatdescrip, &g.Gcomvatrate, &g.Gcomvatvalue, &g.Gcomvatunits, &g.EquinoxPrn, &g.EquinoxLrn, &g.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &g, nil
}
