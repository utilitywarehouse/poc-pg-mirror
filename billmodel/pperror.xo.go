// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/lib/pq"
)

// Pperror represents a row from 'equinox.pperror'.
type Pperror struct {
	Pperrgcn        sql.NullString `json:"pperrgcn"`        // pperrgcn
	Pperrmsn        sql.NullString `json:"pperrmsn"`        // pperrmsn
	Pperrdateadded  pq.NullTime    `json:"pperrdateadded"`  // pperrdateadded
	Pperrlastworked pq.NullTime    `json:"pperrlastworked"` // pperrlastworked
	Pperrowner      sql.NullString `json:"pperrowner"`      // pperrowner
	Pperrstatus     sql.NullInt64  `json:"pperrstatus"`     // pperrstatus
	Pperrfueltype   sql.NullString `json:"pperrfueltype"`   // pperrfueltype
	EquinoxLrn      int64          `json:"equinox_lrn"`     // equinox_lrn
	EquinoxSec      sql.NullInt64  `json:"equinox_sec"`     // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Pperror exists in the database.
func (p *Pperror) Exists() bool {
	return p._exists
}

// Deleted provides information if the Pperror has been deleted from the database.
func (p *Pperror) Deleted() bool {
	return p._deleted
}

// Insert inserts the Pperror to the database.
func (p *Pperror) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if p._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.pperror (` +
		`pperrgcn, pperrmsn, pperrdateadded, pperrlastworked, pperrowner, pperrstatus, pperrfueltype, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, p.Pperrgcn, p.Pperrmsn, p.Pperrdateadded, p.Pperrlastworked, p.Pperrowner, p.Pperrstatus, p.Pperrfueltype, p.EquinoxSec)
	err = db.QueryRow(sqlstr, p.Pperrgcn, p.Pperrmsn, p.Pperrdateadded, p.Pperrlastworked, p.Pperrowner, p.Pperrstatus, p.Pperrfueltype, p.EquinoxSec).Scan(&p.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	p._exists = true

	return nil
}

// Update updates the Pperror in the database.
func (p *Pperror) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if p._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.pperror SET (` +
		`pperrgcn, pperrmsn, pperrdateadded, pperrlastworked, pperrowner, pperrstatus, pperrfueltype, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`) WHERE equinox_lrn = $9`

	// run query
	XOLog(sqlstr, p.Pperrgcn, p.Pperrmsn, p.Pperrdateadded, p.Pperrlastworked, p.Pperrowner, p.Pperrstatus, p.Pperrfueltype, p.EquinoxSec, p.EquinoxLrn)
	_, err = db.Exec(sqlstr, p.Pperrgcn, p.Pperrmsn, p.Pperrdateadded, p.Pperrlastworked, p.Pperrowner, p.Pperrstatus, p.Pperrfueltype, p.EquinoxSec, p.EquinoxLrn)
	return err
}

// Save saves the Pperror to the database.
func (p *Pperror) Save(db XODB) error {
	if p.Exists() {
		return p.Update(db)
	}

	return p.Insert(db)
}

// Upsert performs an upsert for Pperror.
//
// NOTE: PostgreSQL 9.5+ only
func (p *Pperror) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if p._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.pperror (` +
		`pperrgcn, pperrmsn, pperrdateadded, pperrlastworked, pperrowner, pperrstatus, pperrfueltype, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`pperrgcn, pperrmsn, pperrdateadded, pperrlastworked, pperrowner, pperrstatus, pperrfueltype, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.pperrgcn, EXCLUDED.pperrmsn, EXCLUDED.pperrdateadded, EXCLUDED.pperrlastworked, EXCLUDED.pperrowner, EXCLUDED.pperrstatus, EXCLUDED.pperrfueltype, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, p.Pperrgcn, p.Pperrmsn, p.Pperrdateadded, p.Pperrlastworked, p.Pperrowner, p.Pperrstatus, p.Pperrfueltype, p.EquinoxLrn, p.EquinoxSec)
	_, err = db.Exec(sqlstr, p.Pperrgcn, p.Pperrmsn, p.Pperrdateadded, p.Pperrlastworked, p.Pperrowner, p.Pperrstatus, p.Pperrfueltype, p.EquinoxLrn, p.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	p._exists = true

	return nil
}

// Delete deletes the Pperror from the database.
func (p *Pperror) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return nil
	}

	// if deleted, bail
	if p._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.pperror WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, p.EquinoxLrn)
	_, err = db.Exec(sqlstr, p.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	p._deleted = true

	return nil
}

// PperrorByEquinoxLrn retrieves a row from 'equinox.pperror' as a Pperror.
//
// Generated from index 'pperror_pkey'.
func PperrorByEquinoxLrn(db XODB, equinoxLrn int64) (*Pperror, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`pperrgcn, pperrmsn, pperrdateadded, pperrlastworked, pperrowner, pperrstatus, pperrfueltype, equinox_lrn, equinox_sec ` +
		`FROM equinox.pperror ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	p := Pperror{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&p.Pperrgcn, &p.Pperrmsn, &p.Pperrdateadded, &p.Pperrlastworked, &p.Pperrowner, &p.Pperrstatus, &p.Pperrfueltype, &p.EquinoxLrn, &p.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &p, nil
}
