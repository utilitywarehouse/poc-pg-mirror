// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"

	"github.com/lib/pq"
)

// Pperror represents a row from 'equinox.pperror'.
type Pperror struct {
	Pperrgcn        sql.NullString `json:"pperrgcn"`        // pperrgcn
	Pperrmsn        sql.NullString `json:"pperrmsn"`        // pperrmsn
	Pperrdateadded  pq.NullTime    `json:"pperrdateadded"`  // pperrdateadded
	Pperrlastworked pq.NullTime    `json:"pperrlastworked"` // pperrlastworked
	Pperrowner      sql.NullString `json:"pperrowner"`      // pperrowner
	Pperrstatus     sql.NullInt64  `json:"pperrstatus"`     // pperrstatus
	Pperrfueltype   sql.NullString `json:"pperrfueltype"`   // pperrfueltype
	EquinoxLrn      int64          `json:"equinox_lrn"`     // equinox_lrn
	EquinoxSec      sql.NullInt64  `json:"equinox_sec"`     // equinox_sec
}

// PperrorByEquinoxLrn retrieves a row from 'equinox.pperror' as a Pperror.
//
// Generated from index 'pperror_pkey'.
func PperrorByEquinoxLrn(db XODB, equinoxLrn int64) (*Pperror, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`pperrgcn, pperrmsn, pperrdateadded, pperrlastworked, pperrowner, pperrstatus, pperrfueltype, equinox_lrn, equinox_sec ` +
		`FROM equinox.pperror ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	p := Pperror{}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&p.Pperrgcn, &p.Pperrmsn, &p.Pperrdateadded, &p.Pperrlastworked, &p.Pperrowner, &p.Pperrstatus, &p.Pperrfueltype, &p.EquinoxLrn, &p.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &p, nil
}
