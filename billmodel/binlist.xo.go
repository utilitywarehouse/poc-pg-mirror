// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/lib/pq"
)

// Binlist represents a row from 'equinox.binlist'.
type Binlist struct {
	Binno           sql.NullInt64  `json:"binno"`           // binno
	Binissuer       sql.NullString `json:"binissuer"`       // binissuer
	Bincardscheme   sql.NullString `json:"bincardscheme"`   // bincardscheme
	Binprodtype     sql.NullString `json:"binprodtype"`     // binprodtype
	Binusage        sql.NullString `json:"binusage"`        // binusage
	Binswissueno    sql.NullString `json:"binswissueno"`    // binswissueno
	Binswissuelen   sql.NullString `json:"binswissuelen"`   // binswissuelen
	Binswcdstandard sql.NullString `json:"binswcdstandard"` // binswcdstandard
	Binpanlength    sql.NullString `json:"binpanlength"`    // binpanlength
	Binbintype      sql.NullString `json:"binbintype"`      // binbintype
	Binlastupdate   pq.NullTime    `json:"binlastupdate"`   // binlastupdate
	Binlastupdateby sql.NullString `json:"binlastupdateby"` // binlastupdateby
	Binentered      pq.NullTime    `json:"binentered"`      // binentered
	Binspare1       sql.NullString `json:"binspare1"`       // binspare1
	Binspare2       sql.NullString `json:"binspare2"`       // binspare2
	EquinoxLrn      int64          `json:"equinox_lrn"`     // equinox_lrn
	EquinoxSec      sql.NullInt64  `json:"equinox_sec"`     // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Binlist exists in the database.
func (b *Binlist) Exists() bool {
	return b._exists
}

// Deleted provides information if the Binlist has been deleted from the database.
func (b *Binlist) Deleted() bool {
	return b._deleted
}

// Insert inserts the Binlist to the database.
func (b *Binlist) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if b._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.binlist (` +
		`binno, binissuer, bincardscheme, binprodtype, binusage, binswissueno, binswissuelen, binswcdstandard, binpanlength, binbintype, binlastupdate, binlastupdateby, binentered, binspare1, binspare2, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, b.Binno, b.Binissuer, b.Bincardscheme, b.Binprodtype, b.Binusage, b.Binswissueno, b.Binswissuelen, b.Binswcdstandard, b.Binpanlength, b.Binbintype, b.Binlastupdate, b.Binlastupdateby, b.Binentered, b.Binspare1, b.Binspare2, b.EquinoxSec)
	err = db.QueryRow(sqlstr, b.Binno, b.Binissuer, b.Bincardscheme, b.Binprodtype, b.Binusage, b.Binswissueno, b.Binswissuelen, b.Binswcdstandard, b.Binpanlength, b.Binbintype, b.Binlastupdate, b.Binlastupdateby, b.Binentered, b.Binspare1, b.Binspare2, b.EquinoxSec).Scan(&b.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	b._exists = true

	return nil
}

// Update updates the Binlist in the database.
func (b *Binlist) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !b._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if b._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.binlist SET (` +
		`binno, binissuer, bincardscheme, binprodtype, binusage, binswissueno, binswissuelen, binswcdstandard, binpanlength, binbintype, binlastupdate, binlastupdateby, binentered, binspare1, binspare2, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16` +
		`) WHERE equinox_lrn = $17`

	// run query
	XOLog(sqlstr, b.Binno, b.Binissuer, b.Bincardscheme, b.Binprodtype, b.Binusage, b.Binswissueno, b.Binswissuelen, b.Binswcdstandard, b.Binpanlength, b.Binbintype, b.Binlastupdate, b.Binlastupdateby, b.Binentered, b.Binspare1, b.Binspare2, b.EquinoxSec, b.EquinoxLrn)
	_, err = db.Exec(sqlstr, b.Binno, b.Binissuer, b.Bincardscheme, b.Binprodtype, b.Binusage, b.Binswissueno, b.Binswissuelen, b.Binswcdstandard, b.Binpanlength, b.Binbintype, b.Binlastupdate, b.Binlastupdateby, b.Binentered, b.Binspare1, b.Binspare2, b.EquinoxSec, b.EquinoxLrn)
	return err
}

// Save saves the Binlist to the database.
func (b *Binlist) Save(db XODB) error {
	if b.Exists() {
		return b.Update(db)
	}

	return b.Insert(db)
}

// Upsert performs an upsert for Binlist.
//
// NOTE: PostgreSQL 9.5+ only
func (b *Binlist) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if b._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.binlist (` +
		`binno, binissuer, bincardscheme, binprodtype, binusage, binswissueno, binswissuelen, binswcdstandard, binpanlength, binbintype, binlastupdate, binlastupdateby, binentered, binspare1, binspare2, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`binno, binissuer, bincardscheme, binprodtype, binusage, binswissueno, binswissuelen, binswcdstandard, binpanlength, binbintype, binlastupdate, binlastupdateby, binentered, binspare1, binspare2, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.binno, EXCLUDED.binissuer, EXCLUDED.bincardscheme, EXCLUDED.binprodtype, EXCLUDED.binusage, EXCLUDED.binswissueno, EXCLUDED.binswissuelen, EXCLUDED.binswcdstandard, EXCLUDED.binpanlength, EXCLUDED.binbintype, EXCLUDED.binlastupdate, EXCLUDED.binlastupdateby, EXCLUDED.binentered, EXCLUDED.binspare1, EXCLUDED.binspare2, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, b.Binno, b.Binissuer, b.Bincardscheme, b.Binprodtype, b.Binusage, b.Binswissueno, b.Binswissuelen, b.Binswcdstandard, b.Binpanlength, b.Binbintype, b.Binlastupdate, b.Binlastupdateby, b.Binentered, b.Binspare1, b.Binspare2, b.EquinoxLrn, b.EquinoxSec)
	_, err = db.Exec(sqlstr, b.Binno, b.Binissuer, b.Bincardscheme, b.Binprodtype, b.Binusage, b.Binswissueno, b.Binswissuelen, b.Binswcdstandard, b.Binpanlength, b.Binbintype, b.Binlastupdate, b.Binlastupdateby, b.Binentered, b.Binspare1, b.Binspare2, b.EquinoxLrn, b.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	b._exists = true

	return nil
}

// Delete deletes the Binlist from the database.
func (b *Binlist) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !b._exists {
		return nil
	}

	// if deleted, bail
	if b._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.binlist WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, b.EquinoxLrn)
	_, err = db.Exec(sqlstr, b.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	b._deleted = true

	return nil
}

// BinlistByEquinoxLrn retrieves a row from 'equinox.binlist' as a Binlist.
//
// Generated from index 'binlist_pkey'.
func BinlistByEquinoxLrn(db XODB, equinoxLrn int64) (*Binlist, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`binno, binissuer, bincardscheme, binprodtype, binusage, binswissueno, binswissuelen, binswcdstandard, binpanlength, binbintype, binlastupdate, binlastupdateby, binentered, binspare1, binspare2, equinox_lrn, equinox_sec ` +
		`FROM equinox.binlist ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	b := Binlist{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&b.Binno, &b.Binissuer, &b.Bincardscheme, &b.Binprodtype, &b.Binusage, &b.Binswissueno, &b.Binswissuelen, &b.Binswcdstandard, &b.Binpanlength, &b.Binbintype, &b.Binlastupdate, &b.Binlastupdateby, &b.Binentered, &b.Binspare1, &b.Binspare2, &b.EquinoxLrn, &b.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &b, nil
}
