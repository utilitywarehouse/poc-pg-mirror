// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/lib/pq"
)

// Mpcaudit represents a row from 'equinox.mpcaudit'.
type Mpcaudit struct {
	Mpcaid      sql.NullFloat64 `json:"mpcaid"`      // mpcaid
	Mpcadetails sql.NullString  `json:"mpcadetails"` // mpcadetails
	Mpcaresult  sql.NullInt64   `json:"mpcaresult"`  // mpcaresult
	Mpcaddate   pq.NullTime     `json:"mpcaddate"`   // mpcaddate
	Mpcadtime   pq.NullTime     `json:"mpcadtime"`   // mpcadtime
	Mpcardate   pq.NullTime     `json:"mpcardate"`   // mpcardate
	Mpcartime   pq.NullTime     `json:"mpcartime"`   // mpcartime
	Mpcacli     sql.NullString  `json:"mpcacli"`     // mpcacli
	Mpcavresult sql.NullInt64   `json:"mpcavresult"` // mpcavresult
	EquinoxLrn  int64           `json:"equinox_lrn"` // equinox_lrn
	EquinoxSec  sql.NullInt64   `json:"equinox_sec"` // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Mpcaudit exists in the database.
func (m *Mpcaudit) Exists() bool {
	return m._exists
}

// Deleted provides information if the Mpcaudit has been deleted from the database.
func (m *Mpcaudit) Deleted() bool {
	return m._deleted
}

// Insert inserts the Mpcaudit to the database.
func (m *Mpcaudit) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if m._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.mpcaudit (` +
		`mpcaid, mpcadetails, mpcaresult, mpcaddate, mpcadtime, mpcardate, mpcartime, mpcacli, mpcavresult, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, m.Mpcaid, m.Mpcadetails, m.Mpcaresult, m.Mpcaddate, m.Mpcadtime, m.Mpcardate, m.Mpcartime, m.Mpcacli, m.Mpcavresult, m.EquinoxSec)
	err = db.QueryRow(sqlstr, m.Mpcaid, m.Mpcadetails, m.Mpcaresult, m.Mpcaddate, m.Mpcadtime, m.Mpcardate, m.Mpcartime, m.Mpcacli, m.Mpcavresult, m.EquinoxSec).Scan(&m.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	m._exists = true

	return nil
}

// Update updates the Mpcaudit in the database.
func (m *Mpcaudit) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !m._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if m._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.mpcaudit SET (` +
		`mpcaid, mpcadetails, mpcaresult, mpcaddate, mpcadtime, mpcardate, mpcartime, mpcacli, mpcavresult, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10` +
		`) WHERE equinox_lrn = $11`

	// run query
	XOLog(sqlstr, m.Mpcaid, m.Mpcadetails, m.Mpcaresult, m.Mpcaddate, m.Mpcadtime, m.Mpcardate, m.Mpcartime, m.Mpcacli, m.Mpcavresult, m.EquinoxSec, m.EquinoxLrn)
	_, err = db.Exec(sqlstr, m.Mpcaid, m.Mpcadetails, m.Mpcaresult, m.Mpcaddate, m.Mpcadtime, m.Mpcardate, m.Mpcartime, m.Mpcacli, m.Mpcavresult, m.EquinoxSec, m.EquinoxLrn)
	return err
}

// Save saves the Mpcaudit to the database.
func (m *Mpcaudit) Save(db XODB) error {
	if m.Exists() {
		return m.Update(db)
	}

	return m.Insert(db)
}

// Upsert performs an upsert for Mpcaudit.
//
// NOTE: PostgreSQL 9.5+ only
func (m *Mpcaudit) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if m._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.mpcaudit (` +
		`mpcaid, mpcadetails, mpcaresult, mpcaddate, mpcadtime, mpcardate, mpcartime, mpcacli, mpcavresult, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`mpcaid, mpcadetails, mpcaresult, mpcaddate, mpcadtime, mpcardate, mpcartime, mpcacli, mpcavresult, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.mpcaid, EXCLUDED.mpcadetails, EXCLUDED.mpcaresult, EXCLUDED.mpcaddate, EXCLUDED.mpcadtime, EXCLUDED.mpcardate, EXCLUDED.mpcartime, EXCLUDED.mpcacli, EXCLUDED.mpcavresult, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, m.Mpcaid, m.Mpcadetails, m.Mpcaresult, m.Mpcaddate, m.Mpcadtime, m.Mpcardate, m.Mpcartime, m.Mpcacli, m.Mpcavresult, m.EquinoxLrn, m.EquinoxSec)
	_, err = db.Exec(sqlstr, m.Mpcaid, m.Mpcadetails, m.Mpcaresult, m.Mpcaddate, m.Mpcadtime, m.Mpcardate, m.Mpcartime, m.Mpcacli, m.Mpcavresult, m.EquinoxLrn, m.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	m._exists = true

	return nil
}

// Delete deletes the Mpcaudit from the database.
func (m *Mpcaudit) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !m._exists {
		return nil
	}

	// if deleted, bail
	if m._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.mpcaudit WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, m.EquinoxLrn)
	_, err = db.Exec(sqlstr, m.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	m._deleted = true

	return nil
}

// MpcauditByEquinoxLrn retrieves a row from 'equinox.mpcaudit' as a Mpcaudit.
//
// Generated from index 'mpcaudit_pkey'.
func MpcauditByEquinoxLrn(db XODB, equinoxLrn int64) (*Mpcaudit, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`mpcaid, mpcadetails, mpcaresult, mpcaddate, mpcadtime, mpcardate, mpcartime, mpcacli, mpcavresult, equinox_lrn, equinox_sec ` +
		`FROM equinox.mpcaudit ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	m := Mpcaudit{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&m.Mpcaid, &m.Mpcadetails, &m.Mpcaresult, &m.Mpcaddate, &m.Mpcadtime, &m.Mpcardate, &m.Mpcartime, &m.Mpcacli, &m.Mpcavresult, &m.EquinoxLrn, &m.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &m, nil
}
