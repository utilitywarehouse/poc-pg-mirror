// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"

	"github.com/lib/pq"
)

// Mpcaudit represents a row from 'equinox.mpcaudit'.
type Mpcaudit struct {
	Mpcaid      sql.NullFloat64 `json:"mpcaid"`      // mpcaid
	Mpcadetails sql.NullString  `json:"mpcadetails"` // mpcadetails
	Mpcaresult  sql.NullInt64   `json:"mpcaresult"`  // mpcaresult
	Mpcaddate   pq.NullTime     `json:"mpcaddate"`   // mpcaddate
	Mpcadtime   pq.NullTime     `json:"mpcadtime"`   // mpcadtime
	Mpcardate   pq.NullTime     `json:"mpcardate"`   // mpcardate
	Mpcartime   pq.NullTime     `json:"mpcartime"`   // mpcartime
	Mpcacli     sql.NullString  `json:"mpcacli"`     // mpcacli
	Mpcavresult sql.NullInt64   `json:"mpcavresult"` // mpcavresult
	EquinoxLrn  int64           `json:"equinox_lrn"` // equinox_lrn
	EquinoxSec  sql.NullInt64   `json:"equinox_sec"` // equinox_sec
}

func AllMpcaudit(db XODB, callback func(x Mpcaudit) bool) error {

	// sql query
	const sqlstr = `SELECT ` +
		`mpcaid, mpcadetails, mpcaresult, mpcaddate, mpcadtime, mpcardate, mpcartime, mpcacli, mpcavresult, equinox_lrn, equinox_sec ` +
		`FROM equinox.mpcaudit `

	q, err := db.Query(sqlstr)

	if err != nil {
		return err
	}
	defer q.Close()

	// load results
	for q.Next() {
		m := Mpcaudit{}

		// scan
		err = q.Scan(&m.Mpcaid, &m.Mpcadetails, &m.Mpcaresult, &m.Mpcaddate, &m.Mpcadtime, &m.Mpcardate, &m.Mpcartime, &m.Mpcacli, &m.Mpcavresult, &m.EquinoxLrn, &m.EquinoxSec)
		if err != nil {
			return err
		}
		if !callback(m) {
			return nil
		}
	}

	return nil
}

// MpcauditByEquinoxLrn retrieves a row from 'equinox.mpcaudit' as a Mpcaudit.
//
// Generated from index 'mpcaudit_pkey'.
func MpcauditByEquinoxLrn(db XODB, equinoxLrn int64) (*Mpcaudit, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`mpcaid, mpcadetails, mpcaresult, mpcaddate, mpcadtime, mpcardate, mpcartime, mpcacli, mpcavresult, equinox_lrn, equinox_sec ` +
		`FROM equinox.mpcaudit ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	m := Mpcaudit{}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&m.Mpcaid, &m.Mpcadetails, &m.Mpcaresult, &m.Mpcaddate, &m.Mpcadtime, &m.Mpcardate, &m.Mpcartime, &m.Mpcacli, &m.Mpcavresult, &m.EquinoxLrn, &m.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &m, nil
}
