// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/lib/pq"
)

// Crsar represents a row from 'equinox.crsar'.
type Crsar struct {
	Crsarid        sql.NullInt64   `json:"crsarid"`        // crsarid
	Crsarexecid    sql.NullString  `json:"crsarexecid"`    // crsarexecid
	Crsaramount    sql.NullFloat64 `json:"crsaramount"`    // crsaramount
	Crsarcommitted pq.NullTime     `json:"crsarcommitted"` // crsarcommitted
	Crsarsparec1   sql.NullString  `json:"crsarsparec1"`   // crsarsparec1
	Crsarsparec2   sql.NullString  `json:"crsarsparec2"`   // crsarsparec2
	Crsarsparec3   sql.NullString  `json:"crsarsparec3"`   // crsarsparec3
	Crsarsparen1   sql.NullInt64   `json:"crsarsparen1"`   // crsarsparen1
	Crsarsparen2   sql.NullInt64   `json:"crsarsparen2"`   // crsarsparen2
	Crsarsparen3   sql.NullInt64   `json:"crsarsparen3"`   // crsarsparen3
	Crsarspared1   sql.NullInt64   `json:"crsarspared1"`   // crsarspared1
	Crsarspared2   sql.NullInt64   `json:"crsarspared2"`   // crsarspared2
	Crsarspared3   sql.NullInt64   `json:"crsarspared3"`   // crsarspared3
	EquinoxPrn     sql.NullInt64   `json:"equinox_prn"`    // equinox_prn
	EquinoxLrn     int64           `json:"equinox_lrn"`    // equinox_lrn
	EquinoxSec     sql.NullInt64   `json:"equinox_sec"`    // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Crsar exists in the database.
func (c *Crsar) Exists() bool {
	return c._exists
}

// Deleted provides information if the Crsar has been deleted from the database.
func (c *Crsar) Deleted() bool {
	return c._deleted
}

// Insert inserts the Crsar to the database.
func (c *Crsar) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.crsar (` +
		`crsarid, crsarexecid, crsaramount, crsarcommitted, crsarsparec1, crsarsparec2, crsarsparec3, crsarsparen1, crsarsparen2, crsarsparen3, crsarspared1, crsarspared2, crsarspared3, equinox_prn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, c.Crsarid, c.Crsarexecid, c.Crsaramount, c.Crsarcommitted, c.Crsarsparec1, c.Crsarsparec2, c.Crsarsparec3, c.Crsarsparen1, c.Crsarsparen2, c.Crsarsparen3, c.Crsarspared1, c.Crsarspared2, c.Crsarspared3, c.EquinoxPrn, c.EquinoxSec)
	err = db.QueryRow(sqlstr, c.Crsarid, c.Crsarexecid, c.Crsaramount, c.Crsarcommitted, c.Crsarsparec1, c.Crsarsparec2, c.Crsarsparec3, c.Crsarsparen1, c.Crsarsparen2, c.Crsarsparen3, c.Crsarspared1, c.Crsarspared2, c.Crsarspared3, c.EquinoxPrn, c.EquinoxSec).Scan(&c.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Update updates the Crsar in the database.
func (c *Crsar) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if c._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.crsar SET (` +
		`crsarid, crsarexecid, crsaramount, crsarcommitted, crsarsparec1, crsarsparec2, crsarsparec3, crsarsparen1, crsarsparen2, crsarsparen3, crsarspared1, crsarspared2, crsarspared3, equinox_prn, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15` +
		`) WHERE equinox_lrn = $16`

	// run query
	XOLog(sqlstr, c.Crsarid, c.Crsarexecid, c.Crsaramount, c.Crsarcommitted, c.Crsarsparec1, c.Crsarsparec2, c.Crsarsparec3, c.Crsarsparen1, c.Crsarsparen2, c.Crsarsparen3, c.Crsarspared1, c.Crsarspared2, c.Crsarspared3, c.EquinoxPrn, c.EquinoxSec, c.EquinoxLrn)
	_, err = db.Exec(sqlstr, c.Crsarid, c.Crsarexecid, c.Crsaramount, c.Crsarcommitted, c.Crsarsparec1, c.Crsarsparec2, c.Crsarsparec3, c.Crsarsparen1, c.Crsarsparen2, c.Crsarsparen3, c.Crsarspared1, c.Crsarspared2, c.Crsarspared3, c.EquinoxPrn, c.EquinoxSec, c.EquinoxLrn)
	return err
}

// Save saves the Crsar to the database.
func (c *Crsar) Save(db XODB) error {
	if c.Exists() {
		return c.Update(db)
	}

	return c.Insert(db)
}

// Upsert performs an upsert for Crsar.
//
// NOTE: PostgreSQL 9.5+ only
func (c *Crsar) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.crsar (` +
		`crsarid, crsarexecid, crsaramount, crsarcommitted, crsarsparec1, crsarsparec2, crsarsparec3, crsarsparen1, crsarsparen2, crsarsparen3, crsarspared1, crsarspared2, crsarspared3, equinox_prn, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`crsarid, crsarexecid, crsaramount, crsarcommitted, crsarsparec1, crsarsparec2, crsarsparec3, crsarsparen1, crsarsparen2, crsarsparen3, crsarspared1, crsarspared2, crsarspared3, equinox_prn, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.crsarid, EXCLUDED.crsarexecid, EXCLUDED.crsaramount, EXCLUDED.crsarcommitted, EXCLUDED.crsarsparec1, EXCLUDED.crsarsparec2, EXCLUDED.crsarsparec3, EXCLUDED.crsarsparen1, EXCLUDED.crsarsparen2, EXCLUDED.crsarsparen3, EXCLUDED.crsarspared1, EXCLUDED.crsarspared2, EXCLUDED.crsarspared3, EXCLUDED.equinox_prn, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, c.Crsarid, c.Crsarexecid, c.Crsaramount, c.Crsarcommitted, c.Crsarsparec1, c.Crsarsparec2, c.Crsarsparec3, c.Crsarsparen1, c.Crsarsparen2, c.Crsarsparen3, c.Crsarspared1, c.Crsarspared2, c.Crsarspared3, c.EquinoxPrn, c.EquinoxLrn, c.EquinoxSec)
	_, err = db.Exec(sqlstr, c.Crsarid, c.Crsarexecid, c.Crsaramount, c.Crsarcommitted, c.Crsarsparec1, c.Crsarsparec2, c.Crsarsparec3, c.Crsarsparen1, c.Crsarsparen2, c.Crsarsparen3, c.Crsarspared1, c.Crsarspared2, c.Crsarspared3, c.EquinoxPrn, c.EquinoxLrn, c.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Delete deletes the Crsar from the database.
func (c *Crsar) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return nil
	}

	// if deleted, bail
	if c._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.crsar WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, c.EquinoxLrn)
	_, err = db.Exec(sqlstr, c.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	c._deleted = true

	return nil
}

// CrsarByEquinoxLrn retrieves a row from 'equinox.crsar' as a Crsar.
//
// Generated from index 'crsar_pkey'.
func CrsarByEquinoxLrn(db XODB, equinoxLrn int64) (*Crsar, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`crsarid, crsarexecid, crsaramount, crsarcommitted, crsarsparec1, crsarsparec2, crsarsparec3, crsarsparen1, crsarsparen2, crsarsparen3, crsarspared1, crsarspared2, crsarspared3, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.crsar ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	c := Crsar{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&c.Crsarid, &c.Crsarexecid, &c.Crsaramount, &c.Crsarcommitted, &c.Crsarsparec1, &c.Crsarsparec2, &c.Crsarsparec3, &c.Crsarsparen1, &c.Crsarsparen2, &c.Crsarsparen3, &c.Crsarspared1, &c.Crsarspared2, &c.Crsarspared3, &c.EquinoxPrn, &c.EquinoxLrn, &c.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &c, nil
}
