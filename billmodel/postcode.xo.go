// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// Postcode represents a row from 'equinox.postcode'.
type Postcode struct {
	Pcpostcode    sql.NullString  `json:"pcpostcode"`    // pcpostcode
	Pctown        sql.NullString  `json:"pctown"`        // pctown
	Pcstd         sql.NullString  `json:"pcstd"`         // pcstd
	Pcmobcoverage sql.NullFloat64 `json:"pcmobcoverage"` // pcmobcoverage
	Pcarea        sql.NullString  `json:"pcarea"`        // pcarea
	Pcnoexecs     sql.NullInt64   `json:"pcnoexecs"`     // pcnoexecs
	Pcnounqexecs  sql.NullInt64   `json:"pcnounqexecs"`  // pcnounqexecs
	Pcnocust      sql.NullInt64   `json:"pcnocust"`      // pcnocust
	Pcnomobcust   sql.NullInt64   `json:"pcnomobcust"`   // pcnomobcust
	Pcelecreg     sql.NullInt64   `json:"pcelecreg"`     // pcelecreg
	EquinoxLrn    int64           `json:"equinox_lrn"`   // equinox_lrn
	EquinoxSec    sql.NullInt64   `json:"equinox_sec"`   // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Postcode exists in the database.
func (p *Postcode) Exists() bool {
	return p._exists
}

// Deleted provides information if the Postcode has been deleted from the database.
func (p *Postcode) Deleted() bool {
	return p._deleted
}

// Insert inserts the Postcode to the database.
func (p *Postcode) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if p._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.postcode (` +
		`pcpostcode, pctown, pcstd, pcmobcoverage, pcarea, pcnoexecs, pcnounqexecs, pcnocust, pcnomobcust, pcelecreg, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, p.Pcpostcode, p.Pctown, p.Pcstd, p.Pcmobcoverage, p.Pcarea, p.Pcnoexecs, p.Pcnounqexecs, p.Pcnocust, p.Pcnomobcust, p.Pcelecreg, p.EquinoxSec)
	err = db.QueryRow(sqlstr, p.Pcpostcode, p.Pctown, p.Pcstd, p.Pcmobcoverage, p.Pcarea, p.Pcnoexecs, p.Pcnounqexecs, p.Pcnocust, p.Pcnomobcust, p.Pcelecreg, p.EquinoxSec).Scan(&p.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	p._exists = true

	return nil
}

// Update updates the Postcode in the database.
func (p *Postcode) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if p._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.postcode SET (` +
		`pcpostcode, pctown, pcstd, pcmobcoverage, pcarea, pcnoexecs, pcnounqexecs, pcnocust, pcnomobcust, pcelecreg, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11` +
		`) WHERE equinox_lrn = $12`

	// run query
	XOLog(sqlstr, p.Pcpostcode, p.Pctown, p.Pcstd, p.Pcmobcoverage, p.Pcarea, p.Pcnoexecs, p.Pcnounqexecs, p.Pcnocust, p.Pcnomobcust, p.Pcelecreg, p.EquinoxSec, p.EquinoxLrn)
	_, err = db.Exec(sqlstr, p.Pcpostcode, p.Pctown, p.Pcstd, p.Pcmobcoverage, p.Pcarea, p.Pcnoexecs, p.Pcnounqexecs, p.Pcnocust, p.Pcnomobcust, p.Pcelecreg, p.EquinoxSec, p.EquinoxLrn)
	return err
}

// Save saves the Postcode to the database.
func (p *Postcode) Save(db XODB) error {
	if p.Exists() {
		return p.Update(db)
	}

	return p.Insert(db)
}

// Upsert performs an upsert for Postcode.
//
// NOTE: PostgreSQL 9.5+ only
func (p *Postcode) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if p._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.postcode (` +
		`pcpostcode, pctown, pcstd, pcmobcoverage, pcarea, pcnoexecs, pcnounqexecs, pcnocust, pcnomobcust, pcelecreg, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`pcpostcode, pctown, pcstd, pcmobcoverage, pcarea, pcnoexecs, pcnounqexecs, pcnocust, pcnomobcust, pcelecreg, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.pcpostcode, EXCLUDED.pctown, EXCLUDED.pcstd, EXCLUDED.pcmobcoverage, EXCLUDED.pcarea, EXCLUDED.pcnoexecs, EXCLUDED.pcnounqexecs, EXCLUDED.pcnocust, EXCLUDED.pcnomobcust, EXCLUDED.pcelecreg, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, p.Pcpostcode, p.Pctown, p.Pcstd, p.Pcmobcoverage, p.Pcarea, p.Pcnoexecs, p.Pcnounqexecs, p.Pcnocust, p.Pcnomobcust, p.Pcelecreg, p.EquinoxLrn, p.EquinoxSec)
	_, err = db.Exec(sqlstr, p.Pcpostcode, p.Pctown, p.Pcstd, p.Pcmobcoverage, p.Pcarea, p.Pcnoexecs, p.Pcnounqexecs, p.Pcnocust, p.Pcnomobcust, p.Pcelecreg, p.EquinoxLrn, p.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	p._exists = true

	return nil
}

// Delete deletes the Postcode from the database.
func (p *Postcode) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return nil
	}

	// if deleted, bail
	if p._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.postcode WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, p.EquinoxLrn)
	_, err = db.Exec(sqlstr, p.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	p._deleted = true

	return nil
}

// PostcodeByEquinoxLrn retrieves a row from 'equinox.postcode' as a Postcode.
//
// Generated from index 'postcode_pkey'.
func PostcodeByEquinoxLrn(db XODB, equinoxLrn int64) (*Postcode, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`pcpostcode, pctown, pcstd, pcmobcoverage, pcarea, pcnoexecs, pcnounqexecs, pcnocust, pcnomobcust, pcelecreg, equinox_lrn, equinox_sec ` +
		`FROM equinox.postcode ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	p := Postcode{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&p.Pcpostcode, &p.Pctown, &p.Pcstd, &p.Pcmobcoverage, &p.Pcarea, &p.Pcnoexecs, &p.Pcnounqexecs, &p.Pcnocust, &p.Pcnomobcust, &p.Pcelecreg, &p.EquinoxLrn, &p.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &p, nil
}
