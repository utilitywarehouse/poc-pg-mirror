// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/lib/pq"
)

// Gdual represents a row from 'equinox.gdual'.
type Gdual struct {
	Gduallinkedref  sql.NullString `json:"gduallinkedref"`  // gduallinkedref
	Gduallinkeddate pq.NullTime    `json:"gduallinkeddate"` // gduallinkeddate
	Gduallinkended  pq.NullTime    `json:"gduallinkended"`  // gduallinkended
	EquinoxPrn      sql.NullInt64  `json:"equinox_prn"`     // equinox_prn
	EquinoxLrn      int64          `json:"equinox_lrn"`     // equinox_lrn
	EquinoxSec      sql.NullInt64  `json:"equinox_sec"`     // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Gdual exists in the database.
func (g *Gdual) Exists() bool {
	return g._exists
}

// Deleted provides information if the Gdual has been deleted from the database.
func (g *Gdual) Deleted() bool {
	return g._deleted
}

// Insert inserts the Gdual to the database.
func (g *Gdual) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if g._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.gdual (` +
		`gduallinkedref, gduallinkeddate, gduallinkended, equinox_prn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, g.Gduallinkedref, g.Gduallinkeddate, g.Gduallinkended, g.EquinoxPrn, g.EquinoxSec)
	err = db.QueryRow(sqlstr, g.Gduallinkedref, g.Gduallinkeddate, g.Gduallinkended, g.EquinoxPrn, g.EquinoxSec).Scan(&g.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	g._exists = true

	return nil
}

// Update updates the Gdual in the database.
func (g *Gdual) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !g._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if g._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.gdual SET (` +
		`gduallinkedref, gduallinkeddate, gduallinkended, equinox_prn, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5` +
		`) WHERE equinox_lrn = $6`

	// run query
	XOLog(sqlstr, g.Gduallinkedref, g.Gduallinkeddate, g.Gduallinkended, g.EquinoxPrn, g.EquinoxSec, g.EquinoxLrn)
	_, err = db.Exec(sqlstr, g.Gduallinkedref, g.Gduallinkeddate, g.Gduallinkended, g.EquinoxPrn, g.EquinoxSec, g.EquinoxLrn)
	return err
}

// Save saves the Gdual to the database.
func (g *Gdual) Save(db XODB) error {
	if g.Exists() {
		return g.Update(db)
	}

	return g.Insert(db)
}

// Upsert performs an upsert for Gdual.
//
// NOTE: PostgreSQL 9.5+ only
func (g *Gdual) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if g._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.gdual (` +
		`gduallinkedref, gduallinkeddate, gduallinkended, equinox_prn, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`gduallinkedref, gduallinkeddate, gduallinkended, equinox_prn, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.gduallinkedref, EXCLUDED.gduallinkeddate, EXCLUDED.gduallinkended, EXCLUDED.equinox_prn, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, g.Gduallinkedref, g.Gduallinkeddate, g.Gduallinkended, g.EquinoxPrn, g.EquinoxLrn, g.EquinoxSec)
	_, err = db.Exec(sqlstr, g.Gduallinkedref, g.Gduallinkeddate, g.Gduallinkended, g.EquinoxPrn, g.EquinoxLrn, g.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	g._exists = true

	return nil
}

// Delete deletes the Gdual from the database.
func (g *Gdual) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !g._exists {
		return nil
	}

	// if deleted, bail
	if g._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.gdual WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, g.EquinoxLrn)
	_, err = db.Exec(sqlstr, g.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	g._deleted = true

	return nil
}

// GdualByEquinoxLrn retrieves a row from 'equinox.gdual' as a Gdual.
//
// Generated from index 'gdual_pkey'.
func GdualByEquinoxLrn(db XODB, equinoxLrn int64) (*Gdual, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`gduallinkedref, gduallinkeddate, gduallinkended, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.gdual ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	g := Gdual{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&g.Gduallinkedref, &g.Gduallinkeddate, &g.Gduallinkended, &g.EquinoxPrn, &g.EquinoxLrn, &g.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &g, nil
}
