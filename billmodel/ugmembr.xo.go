// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// Ugmembr represents a row from 'equinox.ugmembr'.
type Ugmembr struct {
	Ugmuserid  sql.NullString `json:"ugmuserid"`   // ugmuserid
	Ugmgroupid sql.NullString `json:"ugmgroupid"`  // ugmgroupid
	EquinoxPrn sql.NullInt64  `json:"equinox_prn"` // equinox_prn
	EquinoxLrn int64          `json:"equinox_lrn"` // equinox_lrn
	EquinoxSec sql.NullInt64  `json:"equinox_sec"` // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Ugmembr exists in the database.
func (u *Ugmembr) Exists() bool {
	return u._exists
}

// Deleted provides information if the Ugmembr has been deleted from the database.
func (u *Ugmembr) Deleted() bool {
	return u._deleted
}

// Insert inserts the Ugmembr to the database.
func (u *Ugmembr) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if u._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.ugmembr (` +
		`ugmuserid, ugmgroupid, equinox_prn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, u.Ugmuserid, u.Ugmgroupid, u.EquinoxPrn, u.EquinoxSec)
	err = db.QueryRow(sqlstr, u.Ugmuserid, u.Ugmgroupid, u.EquinoxPrn, u.EquinoxSec).Scan(&u.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	u._exists = true

	return nil
}

// Update updates the Ugmembr in the database.
func (u *Ugmembr) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !u._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if u._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.ugmembr SET (` +
		`ugmuserid, ugmgroupid, equinox_prn, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4` +
		`) WHERE equinox_lrn = $5`

	// run query
	XOLog(sqlstr, u.Ugmuserid, u.Ugmgroupid, u.EquinoxPrn, u.EquinoxSec, u.EquinoxLrn)
	_, err = db.Exec(sqlstr, u.Ugmuserid, u.Ugmgroupid, u.EquinoxPrn, u.EquinoxSec, u.EquinoxLrn)
	return err
}

// Save saves the Ugmembr to the database.
func (u *Ugmembr) Save(db XODB) error {
	if u.Exists() {
		return u.Update(db)
	}

	return u.Insert(db)
}

// Upsert performs an upsert for Ugmembr.
//
// NOTE: PostgreSQL 9.5+ only
func (u *Ugmembr) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if u._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.ugmembr (` +
		`ugmuserid, ugmgroupid, equinox_prn, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`ugmuserid, ugmgroupid, equinox_prn, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.ugmuserid, EXCLUDED.ugmgroupid, EXCLUDED.equinox_prn, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, u.Ugmuserid, u.Ugmgroupid, u.EquinoxPrn, u.EquinoxLrn, u.EquinoxSec)
	_, err = db.Exec(sqlstr, u.Ugmuserid, u.Ugmgroupid, u.EquinoxPrn, u.EquinoxLrn, u.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	u._exists = true

	return nil
}

// Delete deletes the Ugmembr from the database.
func (u *Ugmembr) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !u._exists {
		return nil
	}

	// if deleted, bail
	if u._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.ugmembr WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, u.EquinoxLrn)
	_, err = db.Exec(sqlstr, u.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	u._deleted = true

	return nil
}

// UgmembrByEquinoxLrn retrieves a row from 'equinox.ugmembr' as a Ugmembr.
//
// Generated from index 'ugmembr_pkey'.
func UgmembrByEquinoxLrn(db XODB, equinoxLrn int64) (*Ugmembr, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`ugmuserid, ugmgroupid, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.ugmembr ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	u := Ugmembr{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&u.Ugmuserid, &u.Ugmgroupid, &u.EquinoxPrn, &u.EquinoxLrn, &u.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &u, nil
}
