// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/lib/pq"
)

// Gapppast represents a row from 'equinox.gapppast'.
type Gapppast struct {
	Gappps         pq.NullTime   `json:"gappps"`         // gappps
	Gapppe         pq.NullTime   `json:"gapppe"`         // gapppe
	Gappaqapplied  pq.NullTime   `json:"gappaqapplied"`  // gappaqapplied
	Gappp1aq       sql.NullInt64 `json:"gappp1aq"`       // gappp1aq
	Gappp2aq       sql.NullInt64 `json:"gappp2aq"`       // gappp2aq
	Gappp3aq       sql.NullInt64 `json:"gappp3aq"`       // gappp3aq
	Gapppbilledkwh sql.NullInt64 `json:"gapppbilledkwh"` // gapppbilledkwh
	EquinoxPrn     sql.NullInt64 `json:"equinox_prn"`    // equinox_prn
	EquinoxLrn     int64         `json:"equinox_lrn"`    // equinox_lrn
	EquinoxSec     sql.NullInt64 `json:"equinox_sec"`    // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Gapppast exists in the database.
func (g *Gapppast) Exists() bool {
	return g._exists
}

// Deleted provides information if the Gapppast has been deleted from the database.
func (g *Gapppast) Deleted() bool {
	return g._deleted
}

// Insert inserts the Gapppast to the database.
func (g *Gapppast) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if g._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.gapppast (` +
		`gappps, gapppe, gappaqapplied, gappp1aq, gappp2aq, gappp3aq, gapppbilledkwh, equinox_prn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, g.Gappps, g.Gapppe, g.Gappaqapplied, g.Gappp1aq, g.Gappp2aq, g.Gappp3aq, g.Gapppbilledkwh, g.EquinoxPrn, g.EquinoxSec)
	err = db.QueryRow(sqlstr, g.Gappps, g.Gapppe, g.Gappaqapplied, g.Gappp1aq, g.Gappp2aq, g.Gappp3aq, g.Gapppbilledkwh, g.EquinoxPrn, g.EquinoxSec).Scan(&g.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	g._exists = true

	return nil
}

// Update updates the Gapppast in the database.
func (g *Gapppast) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !g._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if g._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.gapppast SET (` +
		`gappps, gapppe, gappaqapplied, gappp1aq, gappp2aq, gappp3aq, gapppbilledkwh, equinox_prn, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9` +
		`) WHERE equinox_lrn = $10`

	// run query
	XOLog(sqlstr, g.Gappps, g.Gapppe, g.Gappaqapplied, g.Gappp1aq, g.Gappp2aq, g.Gappp3aq, g.Gapppbilledkwh, g.EquinoxPrn, g.EquinoxSec, g.EquinoxLrn)
	_, err = db.Exec(sqlstr, g.Gappps, g.Gapppe, g.Gappaqapplied, g.Gappp1aq, g.Gappp2aq, g.Gappp3aq, g.Gapppbilledkwh, g.EquinoxPrn, g.EquinoxSec, g.EquinoxLrn)
	return err
}

// Save saves the Gapppast to the database.
func (g *Gapppast) Save(db XODB) error {
	if g.Exists() {
		return g.Update(db)
	}

	return g.Insert(db)
}

// Upsert performs an upsert for Gapppast.
//
// NOTE: PostgreSQL 9.5+ only
func (g *Gapppast) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if g._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.gapppast (` +
		`gappps, gapppe, gappaqapplied, gappp1aq, gappp2aq, gappp3aq, gapppbilledkwh, equinox_prn, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`gappps, gapppe, gappaqapplied, gappp1aq, gappp2aq, gappp3aq, gapppbilledkwh, equinox_prn, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.gappps, EXCLUDED.gapppe, EXCLUDED.gappaqapplied, EXCLUDED.gappp1aq, EXCLUDED.gappp2aq, EXCLUDED.gappp3aq, EXCLUDED.gapppbilledkwh, EXCLUDED.equinox_prn, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, g.Gappps, g.Gapppe, g.Gappaqapplied, g.Gappp1aq, g.Gappp2aq, g.Gappp3aq, g.Gapppbilledkwh, g.EquinoxPrn, g.EquinoxLrn, g.EquinoxSec)
	_, err = db.Exec(sqlstr, g.Gappps, g.Gapppe, g.Gappaqapplied, g.Gappp1aq, g.Gappp2aq, g.Gappp3aq, g.Gapppbilledkwh, g.EquinoxPrn, g.EquinoxLrn, g.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	g._exists = true

	return nil
}

// Delete deletes the Gapppast from the database.
func (g *Gapppast) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !g._exists {
		return nil
	}

	// if deleted, bail
	if g._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.gapppast WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, g.EquinoxLrn)
	_, err = db.Exec(sqlstr, g.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	g._deleted = true

	return nil
}

// GapppastByEquinoxLrn retrieves a row from 'equinox.gapppast' as a Gapppast.
//
// Generated from index 'gapppast_pkey'.
func GapppastByEquinoxLrn(db XODB, equinoxLrn int64) (*Gapppast, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`gappps, gapppe, gappaqapplied, gappp1aq, gappp2aq, gappp3aq, gapppbilledkwh, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.gapppast ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	g := Gapppast{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&g.Gappps, &g.Gapppe, &g.Gappaqapplied, &g.Gappp1aq, &g.Gappp2aq, &g.Gappp3aq, &g.Gapppbilledkwh, &g.EquinoxPrn, &g.EquinoxLrn, &g.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &g, nil
}
