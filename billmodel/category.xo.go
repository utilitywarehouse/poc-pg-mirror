// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import "database/sql"

// Category represents a row from 'equinox.category'.
type Category struct {
	Categorycode   sql.NullString `json:"categorycode"`   // categorycode
	Catdescription sql.NullString `json:"catdescription"` // catdescription
	Catprinterid   sql.NullInt64  `json:"catprinterid"`   // catprinterid
	Catoutputtray  sql.NullInt64  `json:"catoutputtray"`  // catoutputtray
	Catschedule    sql.NullString `json:"catschedule"`    // catschedule
	Catpriority    sql.NullInt64  `json:"catpriority"`    // catpriority
	Catlastrun     sql.NullString `json:"catlastrun"`     // catlastrun
	Catsparechar1  sql.NullString `json:"catsparechar1"`  // catsparechar1
	Catsparechar2  sql.NullString `json:"catsparechar2"`  // catsparechar2
	Catsparenum1   sql.NullInt64  `json:"catsparenum1"`   // catsparenum1
	Catsparenum2   sql.NullInt64  `json:"catsparenum2"`   // catsparenum2
	EquinoxLrn     int64          `json:"equinox_lrn"`    // equinox_lrn
	EquinoxSec     sql.NullInt64  `json:"equinox_sec"`    // equinox_sec
}

func AllCategory(db XODB, callback func(x Category) bool) error {

	// sql query
	const sqlstr = `SELECT ` +
		`categorycode, catdescription, catprinterid, catoutputtray, catschedule, catpriority, catlastrun, catsparechar1, catsparechar2, catsparenum1, catsparenum2, equinox_lrn, equinox_sec ` +
		`FROM equinox.category `

	q, err := db.Query(sqlstr)

	if err != nil {
		return err
	}
	defer q.Close()

	// load results
	for q.Next() {
		c := Category{}

		// scan
		err = q.Scan(&c.Categorycode, &c.Catdescription, &c.Catprinterid, &c.Catoutputtray, &c.Catschedule, &c.Catpriority, &c.Catlastrun, &c.Catsparechar1, &c.Catsparechar2, &c.Catsparenum1, &c.Catsparenum2, &c.EquinoxLrn, &c.EquinoxSec)
		if err != nil {
			return err
		}
		if !callback(c) {
			return nil
		}
	}

	return nil
}

// CategoryByEquinoxLrn retrieves a row from 'equinox.category' as a Category.
//
// Generated from index 'category_pkey'.
func CategoryByEquinoxLrn(db XODB, equinoxLrn int64) (*Category, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`categorycode, catdescription, catprinterid, catoutputtray, catschedule, catpriority, catlastrun, catsparechar1, catsparechar2, catsparenum1, catsparenum2, equinox_lrn, equinox_sec ` +
		`FROM equinox.category ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	c := Category{}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&c.Categorycode, &c.Catdescription, &c.Catprinterid, &c.Catoutputtray, &c.Catschedule, &c.Catpriority, &c.Catlastrun, &c.Catsparechar1, &c.Catsparechar2, &c.Catsparenum1, &c.Catsparenum2, &c.EquinoxLrn, &c.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &c, nil
}
