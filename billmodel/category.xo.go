// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// Category represents a row from 'equinox.category'.
type Category struct {
	Categorycode   sql.NullString `json:"categorycode"`   // categorycode
	Catdescription sql.NullString `json:"catdescription"` // catdescription
	Catprinterid   sql.NullInt64  `json:"catprinterid"`   // catprinterid
	Catoutputtray  sql.NullInt64  `json:"catoutputtray"`  // catoutputtray
	Catschedule    sql.NullString `json:"catschedule"`    // catschedule
	Catpriority    sql.NullInt64  `json:"catpriority"`    // catpriority
	Catlastrun     sql.NullString `json:"catlastrun"`     // catlastrun
	Catsparechar1  sql.NullString `json:"catsparechar1"`  // catsparechar1
	Catsparechar2  sql.NullString `json:"catsparechar2"`  // catsparechar2
	Catsparenum1   sql.NullInt64  `json:"catsparenum1"`   // catsparenum1
	Catsparenum2   sql.NullInt64  `json:"catsparenum2"`   // catsparenum2
	EquinoxLrn     int64          `json:"equinox_lrn"`    // equinox_lrn
	EquinoxSec     sql.NullInt64  `json:"equinox_sec"`    // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Category exists in the database.
func (c *Category) Exists() bool {
	return c._exists
}

// Deleted provides information if the Category has been deleted from the database.
func (c *Category) Deleted() bool {
	return c._deleted
}

// Insert inserts the Category to the database.
func (c *Category) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.category (` +
		`categorycode, catdescription, catprinterid, catoutputtray, catschedule, catpriority, catlastrun, catsparechar1, catsparechar2, catsparenum1, catsparenum2, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, c.Categorycode, c.Catdescription, c.Catprinterid, c.Catoutputtray, c.Catschedule, c.Catpriority, c.Catlastrun, c.Catsparechar1, c.Catsparechar2, c.Catsparenum1, c.Catsparenum2, c.EquinoxSec)
	err = db.QueryRow(sqlstr, c.Categorycode, c.Catdescription, c.Catprinterid, c.Catoutputtray, c.Catschedule, c.Catpriority, c.Catlastrun, c.Catsparechar1, c.Catsparechar2, c.Catsparenum1, c.Catsparenum2, c.EquinoxSec).Scan(&c.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Update updates the Category in the database.
func (c *Category) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if c._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.category SET (` +
		`categorycode, catdescription, catprinterid, catoutputtray, catschedule, catpriority, catlastrun, catsparechar1, catsparechar2, catsparenum1, catsparenum2, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12` +
		`) WHERE equinox_lrn = $13`

	// run query
	XOLog(sqlstr, c.Categorycode, c.Catdescription, c.Catprinterid, c.Catoutputtray, c.Catschedule, c.Catpriority, c.Catlastrun, c.Catsparechar1, c.Catsparechar2, c.Catsparenum1, c.Catsparenum2, c.EquinoxSec, c.EquinoxLrn)
	_, err = db.Exec(sqlstr, c.Categorycode, c.Catdescription, c.Catprinterid, c.Catoutputtray, c.Catschedule, c.Catpriority, c.Catlastrun, c.Catsparechar1, c.Catsparechar2, c.Catsparenum1, c.Catsparenum2, c.EquinoxSec, c.EquinoxLrn)
	return err
}

// Save saves the Category to the database.
func (c *Category) Save(db XODB) error {
	if c.Exists() {
		return c.Update(db)
	}

	return c.Insert(db)
}

// Upsert performs an upsert for Category.
//
// NOTE: PostgreSQL 9.5+ only
func (c *Category) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.category (` +
		`categorycode, catdescription, catprinterid, catoutputtray, catschedule, catpriority, catlastrun, catsparechar1, catsparechar2, catsparenum1, catsparenum2, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`categorycode, catdescription, catprinterid, catoutputtray, catschedule, catpriority, catlastrun, catsparechar1, catsparechar2, catsparenum1, catsparenum2, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.categorycode, EXCLUDED.catdescription, EXCLUDED.catprinterid, EXCLUDED.catoutputtray, EXCLUDED.catschedule, EXCLUDED.catpriority, EXCLUDED.catlastrun, EXCLUDED.catsparechar1, EXCLUDED.catsparechar2, EXCLUDED.catsparenum1, EXCLUDED.catsparenum2, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, c.Categorycode, c.Catdescription, c.Catprinterid, c.Catoutputtray, c.Catschedule, c.Catpriority, c.Catlastrun, c.Catsparechar1, c.Catsparechar2, c.Catsparenum1, c.Catsparenum2, c.EquinoxLrn, c.EquinoxSec)
	_, err = db.Exec(sqlstr, c.Categorycode, c.Catdescription, c.Catprinterid, c.Catoutputtray, c.Catschedule, c.Catpriority, c.Catlastrun, c.Catsparechar1, c.Catsparechar2, c.Catsparenum1, c.Catsparenum2, c.EquinoxLrn, c.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Delete deletes the Category from the database.
func (c *Category) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return nil
	}

	// if deleted, bail
	if c._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.category WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, c.EquinoxLrn)
	_, err = db.Exec(sqlstr, c.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	c._deleted = true

	return nil
}

// CategoryByEquinoxLrn retrieves a row from 'equinox.category' as a Category.
//
// Generated from index 'category_pkey'.
func CategoryByEquinoxLrn(db XODB, equinoxLrn int64) (*Category, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`categorycode, catdescription, catprinterid, catoutputtray, catschedule, catpriority, catlastrun, catsparechar1, catsparechar2, catsparenum1, catsparenum2, equinox_lrn, equinox_sec ` +
		`FROM equinox.category ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	c := Category{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&c.Categorycode, &c.Catdescription, &c.Catprinterid, &c.Catoutputtray, &c.Catschedule, &c.Catpriority, &c.Catlastrun, &c.Catsparechar1, &c.Catsparechar2, &c.Catsparenum1, &c.Catsparenum2, &c.EquinoxLrn, &c.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &c, nil
}
