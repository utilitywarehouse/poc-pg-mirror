// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// Ffdlookp represents a row from 'equinox.ffdlookp'.
type Ffdlookp struct {
	Glkpcode       sql.NullString `json:"glkpcode"`       // glkpcode
	Glkpdesc       sql.NullString `json:"glkpdesc"`       // glkpdesc
	Glkplookuptype sql.NullString `json:"glkplookuptype"` // glkplookuptype
	EquinoxLrn     int64          `json:"equinox_lrn"`    // equinox_lrn
	EquinoxSec     sql.NullInt64  `json:"equinox_sec"`    // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Ffdlookp exists in the database.
func (f *Ffdlookp) Exists() bool {
	return f._exists
}

// Deleted provides information if the Ffdlookp has been deleted from the database.
func (f *Ffdlookp) Deleted() bool {
	return f._deleted
}

// Insert inserts the Ffdlookp to the database.
func (f *Ffdlookp) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if f._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.ffdlookp (` +
		`glkpcode, glkpdesc, glkplookuptype, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, f.Glkpcode, f.Glkpdesc, f.Glkplookuptype, f.EquinoxSec)
	err = db.QueryRow(sqlstr, f.Glkpcode, f.Glkpdesc, f.Glkplookuptype, f.EquinoxSec).Scan(&f.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	f._exists = true

	return nil
}

// Update updates the Ffdlookp in the database.
func (f *Ffdlookp) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !f._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if f._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.ffdlookp SET (` +
		`glkpcode, glkpdesc, glkplookuptype, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4` +
		`) WHERE equinox_lrn = $5`

	// run query
	XOLog(sqlstr, f.Glkpcode, f.Glkpdesc, f.Glkplookuptype, f.EquinoxSec, f.EquinoxLrn)
	_, err = db.Exec(sqlstr, f.Glkpcode, f.Glkpdesc, f.Glkplookuptype, f.EquinoxSec, f.EquinoxLrn)
	return err
}

// Save saves the Ffdlookp to the database.
func (f *Ffdlookp) Save(db XODB) error {
	if f.Exists() {
		return f.Update(db)
	}

	return f.Insert(db)
}

// Upsert performs an upsert for Ffdlookp.
//
// NOTE: PostgreSQL 9.5+ only
func (f *Ffdlookp) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if f._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.ffdlookp (` +
		`glkpcode, glkpdesc, glkplookuptype, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`glkpcode, glkpdesc, glkplookuptype, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.glkpcode, EXCLUDED.glkpdesc, EXCLUDED.glkplookuptype, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, f.Glkpcode, f.Glkpdesc, f.Glkplookuptype, f.EquinoxLrn, f.EquinoxSec)
	_, err = db.Exec(sqlstr, f.Glkpcode, f.Glkpdesc, f.Glkplookuptype, f.EquinoxLrn, f.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	f._exists = true

	return nil
}

// Delete deletes the Ffdlookp from the database.
func (f *Ffdlookp) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !f._exists {
		return nil
	}

	// if deleted, bail
	if f._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.ffdlookp WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, f.EquinoxLrn)
	_, err = db.Exec(sqlstr, f.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	f._deleted = true

	return nil
}

// FfdlookpByEquinoxLrn retrieves a row from 'equinox.ffdlookp' as a Ffdlookp.
//
// Generated from index 'ffdlookp_pkey'.
func FfdlookpByEquinoxLrn(db XODB, equinoxLrn int64) (*Ffdlookp, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`glkpcode, glkpdesc, glkplookuptype, equinox_lrn, equinox_sec ` +
		`FROM equinox.ffdlookp ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	f := Ffdlookp{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&f.Glkpcode, &f.Glkpdesc, &f.Glkplookuptype, &f.EquinoxLrn, &f.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &f, nil
}
