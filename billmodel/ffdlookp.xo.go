// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import "database/sql"

// Ffdlookp represents a row from 'equinox.ffdlookp'.
type Ffdlookp struct {
	Glkpcode       sql.NullString `json:"glkpcode"`       // glkpcode
	Glkpdesc       sql.NullString `json:"glkpdesc"`       // glkpdesc
	Glkplookuptype sql.NullString `json:"glkplookuptype"` // glkplookuptype
	EquinoxLrn     int64          `json:"equinox_lrn"`    // equinox_lrn
	EquinoxSec     sql.NullInt64  `json:"equinox_sec"`    // equinox_sec
}

func AllFfdlookp(db XODB, callback func(x Ffdlookp) bool) error {

	// sql query
	const sqlstr = `SELECT ` +
		`glkpcode, glkpdesc, glkplookuptype, equinox_lrn, equinox_sec ` +
		`FROM equinox.ffdlookp `

	q, err := db.Query(sqlstr)

	if err != nil {
		return err
	}
	defer q.Close()

	// load results
	for q.Next() {
		f := Ffdlookp{}

		// scan
		err = q.Scan(&f.Glkpcode, &f.Glkpdesc, &f.Glkplookuptype, &f.EquinoxLrn, &f.EquinoxSec)
		if err != nil {
			return err
		}
		if !callback(f) {
			return nil
		}
	}

	return nil
}

// FfdlookpByEquinoxLrn retrieves a row from 'equinox.ffdlookp' as a Ffdlookp.
//
// Generated from index 'ffdlookp_pkey'.
func FfdlookpByEquinoxLrn(db XODB, equinoxLrn int64) (*Ffdlookp, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`glkpcode, glkpdesc, glkplookuptype, equinox_lrn, equinox_sec ` +
		`FROM equinox.ffdlookp ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	f := Ffdlookp{}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&f.Glkpcode, &f.Glkpdesc, &f.Glkplookuptype, &f.EquinoxLrn, &f.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &f, nil
}
