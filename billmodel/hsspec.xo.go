// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"

	"github.com/lib/pq"
)

// HsSpec represents a row from 'equinox.hs_spec'.
type HsSpec struct {
	HsSpecTariff   sql.NullString  `json:"hs_spec_tariff"`   // hs_spec_tariff
	HsSpecMin      sql.NullInt64   `json:"hs_spec_min"`      // hs_spec_min
	HsSpecMlr      sql.NullString  `json:"hs_spec_mlr"`      // hs_spec_mlr
	HsFreeHandset  sql.NullInt64   `json:"hs_free_handset"`  // hs_free_handset
	HsSpecRPC      sql.NullString  `json:"hs_spec_rpc"`      // hs_spec_rpc
	HsSpecHscode   sql.NullString  `json:"hs_spec_hscode"`   // hs_spec_hscode
	HsSpecSpared1  pq.NullTime     `json:"hs_spec_spared1"`  // hs_spec_spared1
	HsSpecSparen1  sql.NullFloat64 `json:"hs_spec_sparen1"`  // hs_spec_sparen1
	HsSpecSuspend  sql.NullInt64   `json:"hs_spec_suspend"`  // hs_spec_suspend
	HsSpecDatasize sql.NullString  `json:"hs_spec_datasize"` // hs_spec_datasize
	EquinoxPrn     sql.NullInt64   `json:"equinox_prn"`      // equinox_prn
	EquinoxLrn     int64           `json:"equinox_lrn"`      // equinox_lrn
	EquinoxSec     sql.NullInt64   `json:"equinox_sec"`      // equinox_sec
}

// HsSpecByEquinoxLrn retrieves a row from 'equinox.hs_spec' as a HsSpec.
//
// Generated from index 'hs_spec_pkey'.
func HsSpecByEquinoxLrn(db XODB, equinoxLrn int64) (*HsSpec, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`hs_spec_tariff, hs_spec_min, hs_spec_mlr, hs_free_handset, hs_spec_rpc, hs_spec_hscode, hs_spec_spared1, hs_spec_sparen1, hs_spec_suspend, hs_spec_datasize, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.hs_spec ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	hs := HsSpec{}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&hs.HsSpecTariff, &hs.HsSpecMin, &hs.HsSpecMlr, &hs.HsFreeHandset, &hs.HsSpecRPC, &hs.HsSpecHscode, &hs.HsSpecSpared1, &hs.HsSpecSparen1, &hs.HsSpecSuspend, &hs.HsSpecDatasize, &hs.EquinoxPrn, &hs.EquinoxLrn, &hs.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &hs, nil
}
