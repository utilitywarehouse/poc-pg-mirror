// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// Prmopt represents a row from 'equinox.prmopt'.
type Prmopt struct {
	PromoCategory   sql.NullString `json:"promo_category"`   // promo_category
	PromoDescrip    sql.NullString `json:"promo_descrip"`    // promo_descrip
	PromoData       sql.NullString `json:"promo_data"`       // promo_data
	PromoOptsuspend sql.NullInt64  `json:"promo_optsuspend"` // promo_optsuspend
	EquinoxPrn      sql.NullInt64  `json:"equinox_prn"`      // equinox_prn
	EquinoxLrn      int64          `json:"equinox_lrn"`      // equinox_lrn
	EquinoxSec      sql.NullInt64  `json:"equinox_sec"`      // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Prmopt exists in the database.
func (p *Prmopt) Exists() bool {
	return p._exists
}

// Deleted provides information if the Prmopt has been deleted from the database.
func (p *Prmopt) Deleted() bool {
	return p._deleted
}

// Insert inserts the Prmopt to the database.
func (p *Prmopt) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if p._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.prmopt (` +
		`promo_category, promo_descrip, promo_data, promo_optsuspend, equinox_prn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, p.PromoCategory, p.PromoDescrip, p.PromoData, p.PromoOptsuspend, p.EquinoxPrn, p.EquinoxSec)
	err = db.QueryRow(sqlstr, p.PromoCategory, p.PromoDescrip, p.PromoData, p.PromoOptsuspend, p.EquinoxPrn, p.EquinoxSec).Scan(&p.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	p._exists = true

	return nil
}

// Update updates the Prmopt in the database.
func (p *Prmopt) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if p._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.prmopt SET (` +
		`promo_category, promo_descrip, promo_data, promo_optsuspend, equinox_prn, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6` +
		`) WHERE equinox_lrn = $7`

	// run query
	XOLog(sqlstr, p.PromoCategory, p.PromoDescrip, p.PromoData, p.PromoOptsuspend, p.EquinoxPrn, p.EquinoxSec, p.EquinoxLrn)
	_, err = db.Exec(sqlstr, p.PromoCategory, p.PromoDescrip, p.PromoData, p.PromoOptsuspend, p.EquinoxPrn, p.EquinoxSec, p.EquinoxLrn)
	return err
}

// Save saves the Prmopt to the database.
func (p *Prmopt) Save(db XODB) error {
	if p.Exists() {
		return p.Update(db)
	}

	return p.Insert(db)
}

// Upsert performs an upsert for Prmopt.
//
// NOTE: PostgreSQL 9.5+ only
func (p *Prmopt) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if p._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.prmopt (` +
		`promo_category, promo_descrip, promo_data, promo_optsuspend, equinox_prn, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`promo_category, promo_descrip, promo_data, promo_optsuspend, equinox_prn, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.promo_category, EXCLUDED.promo_descrip, EXCLUDED.promo_data, EXCLUDED.promo_optsuspend, EXCLUDED.equinox_prn, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, p.PromoCategory, p.PromoDescrip, p.PromoData, p.PromoOptsuspend, p.EquinoxPrn, p.EquinoxLrn, p.EquinoxSec)
	_, err = db.Exec(sqlstr, p.PromoCategory, p.PromoDescrip, p.PromoData, p.PromoOptsuspend, p.EquinoxPrn, p.EquinoxLrn, p.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	p._exists = true

	return nil
}

// Delete deletes the Prmopt from the database.
func (p *Prmopt) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return nil
	}

	// if deleted, bail
	if p._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.prmopt WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, p.EquinoxLrn)
	_, err = db.Exec(sqlstr, p.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	p._deleted = true

	return nil
}

// PrmoptByEquinoxLrn retrieves a row from 'equinox.prmopt' as a Prmopt.
//
// Generated from index 'prmopt_pkey'.
func PrmoptByEquinoxLrn(db XODB, equinoxLrn int64) (*Prmopt, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`promo_category, promo_descrip, promo_data, promo_optsuspend, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.prmopt ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	p := Prmopt{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&p.PromoCategory, &p.PromoDescrip, &p.PromoData, &p.PromoOptsuspend, &p.EquinoxPrn, &p.EquinoxLrn, &p.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &p, nil
}
