// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/lib/pq"
)

// Gpppay represents a row from 'equinox.gpppay'.
type Gpppay struct {
	Gpppoutlet    sql.NullString  `json:"gpppoutlet"`    // gpppoutlet
	Gppptransdate pq.NullTime     `json:"gppptransdate"` // gppptransdate
	Gppptranstime pq.NullTime     `json:"gppptranstime"` // gppptranstime
	Gpppamount    sql.NullFloat64 `json:"gpppamount"`    // gpppamount
	Gpppmsnmatch  sql.NullInt64   `json:"gpppmsnmatch"`  // gpppmsnmatch
	Gpppmpid      sql.NullString  `json:"gpppmpid"`      // gpppmpid
	Gppptca       sql.NullInt64   `json:"gppptca"`       // gppptca
	Gpppinfdate   pq.NullTime     `json:"gpppinfdate"`   // gpppinfdate
	Gpppbalance   sql.NullFloat64 `json:"gpppbalance"`   // gpppbalance
	Gpppstdchrg   sql.NullFloat64 `json:"gpppstdchrg"`   // gpppstdchrg
	Gpppdayrate   sql.NullFloat64 `json:"gpppdayrate"`   // gpppdayrate
	Gpppnightrate sql.NullFloat64 `json:"gpppnightrate"` // gpppnightrate
	Gppptransno   sql.NullInt64   `json:"gppptransno"`   // gppptransno
	EquinoxPrn    sql.NullInt64   `json:"equinox_prn"`   // equinox_prn
	EquinoxLrn    int64           `json:"equinox_lrn"`   // equinox_lrn
	EquinoxSec    sql.NullInt64   `json:"equinox_sec"`   // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Gpppay exists in the database.
func (g *Gpppay) Exists() bool {
	return g._exists
}

// Deleted provides information if the Gpppay has been deleted from the database.
func (g *Gpppay) Deleted() bool {
	return g._deleted
}

// Insert inserts the Gpppay to the database.
func (g *Gpppay) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if g._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.gpppay (` +
		`gpppoutlet, gppptransdate, gppptranstime, gpppamount, gpppmsnmatch, gpppmpid, gppptca, gpppinfdate, gpppbalance, gpppstdchrg, gpppdayrate, gpppnightrate, gppptransno, equinox_prn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, g.Gpppoutlet, g.Gppptransdate, g.Gppptranstime, g.Gpppamount, g.Gpppmsnmatch, g.Gpppmpid, g.Gppptca, g.Gpppinfdate, g.Gpppbalance, g.Gpppstdchrg, g.Gpppdayrate, g.Gpppnightrate, g.Gppptransno, g.EquinoxPrn, g.EquinoxSec)
	err = db.QueryRow(sqlstr, g.Gpppoutlet, g.Gppptransdate, g.Gppptranstime, g.Gpppamount, g.Gpppmsnmatch, g.Gpppmpid, g.Gppptca, g.Gpppinfdate, g.Gpppbalance, g.Gpppstdchrg, g.Gpppdayrate, g.Gpppnightrate, g.Gppptransno, g.EquinoxPrn, g.EquinoxSec).Scan(&g.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	g._exists = true

	return nil
}

// Update updates the Gpppay in the database.
func (g *Gpppay) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !g._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if g._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.gpppay SET (` +
		`gpppoutlet, gppptransdate, gppptranstime, gpppamount, gpppmsnmatch, gpppmpid, gppptca, gpppinfdate, gpppbalance, gpppstdchrg, gpppdayrate, gpppnightrate, gppptransno, equinox_prn, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15` +
		`) WHERE equinox_lrn = $16`

	// run query
	XOLog(sqlstr, g.Gpppoutlet, g.Gppptransdate, g.Gppptranstime, g.Gpppamount, g.Gpppmsnmatch, g.Gpppmpid, g.Gppptca, g.Gpppinfdate, g.Gpppbalance, g.Gpppstdchrg, g.Gpppdayrate, g.Gpppnightrate, g.Gppptransno, g.EquinoxPrn, g.EquinoxSec, g.EquinoxLrn)
	_, err = db.Exec(sqlstr, g.Gpppoutlet, g.Gppptransdate, g.Gppptranstime, g.Gpppamount, g.Gpppmsnmatch, g.Gpppmpid, g.Gppptca, g.Gpppinfdate, g.Gpppbalance, g.Gpppstdchrg, g.Gpppdayrate, g.Gpppnightrate, g.Gppptransno, g.EquinoxPrn, g.EquinoxSec, g.EquinoxLrn)
	return err
}

// Save saves the Gpppay to the database.
func (g *Gpppay) Save(db XODB) error {
	if g.Exists() {
		return g.Update(db)
	}

	return g.Insert(db)
}

// Upsert performs an upsert for Gpppay.
//
// NOTE: PostgreSQL 9.5+ only
func (g *Gpppay) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if g._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.gpppay (` +
		`gpppoutlet, gppptransdate, gppptranstime, gpppamount, gpppmsnmatch, gpppmpid, gppptca, gpppinfdate, gpppbalance, gpppstdchrg, gpppdayrate, gpppnightrate, gppptransno, equinox_prn, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`gpppoutlet, gppptransdate, gppptranstime, gpppamount, gpppmsnmatch, gpppmpid, gppptca, gpppinfdate, gpppbalance, gpppstdchrg, gpppdayrate, gpppnightrate, gppptransno, equinox_prn, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.gpppoutlet, EXCLUDED.gppptransdate, EXCLUDED.gppptranstime, EXCLUDED.gpppamount, EXCLUDED.gpppmsnmatch, EXCLUDED.gpppmpid, EXCLUDED.gppptca, EXCLUDED.gpppinfdate, EXCLUDED.gpppbalance, EXCLUDED.gpppstdchrg, EXCLUDED.gpppdayrate, EXCLUDED.gpppnightrate, EXCLUDED.gppptransno, EXCLUDED.equinox_prn, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, g.Gpppoutlet, g.Gppptransdate, g.Gppptranstime, g.Gpppamount, g.Gpppmsnmatch, g.Gpppmpid, g.Gppptca, g.Gpppinfdate, g.Gpppbalance, g.Gpppstdchrg, g.Gpppdayrate, g.Gpppnightrate, g.Gppptransno, g.EquinoxPrn, g.EquinoxLrn, g.EquinoxSec)
	_, err = db.Exec(sqlstr, g.Gpppoutlet, g.Gppptransdate, g.Gppptranstime, g.Gpppamount, g.Gpppmsnmatch, g.Gpppmpid, g.Gppptca, g.Gpppinfdate, g.Gpppbalance, g.Gpppstdchrg, g.Gpppdayrate, g.Gpppnightrate, g.Gppptransno, g.EquinoxPrn, g.EquinoxLrn, g.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	g._exists = true

	return nil
}

// Delete deletes the Gpppay from the database.
func (g *Gpppay) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !g._exists {
		return nil
	}

	// if deleted, bail
	if g._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.gpppay WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, g.EquinoxLrn)
	_, err = db.Exec(sqlstr, g.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	g._deleted = true

	return nil
}

// GpppayByEquinoxLrn retrieves a row from 'equinox.gpppay' as a Gpppay.
//
// Generated from index 'gpppay_pkey'.
func GpppayByEquinoxLrn(db XODB, equinoxLrn int64) (*Gpppay, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`gpppoutlet, gppptransdate, gppptranstime, gpppamount, gpppmsnmatch, gpppmpid, gppptca, gpppinfdate, gpppbalance, gpppstdchrg, gpppdayrate, gpppnightrate, gppptransno, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.gpppay ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	g := Gpppay{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&g.Gpppoutlet, &g.Gppptransdate, &g.Gppptranstime, &g.Gpppamount, &g.Gpppmsnmatch, &g.Gpppmpid, &g.Gppptca, &g.Gpppinfdate, &g.Gpppbalance, &g.Gpppstdchrg, &g.Gpppdayrate, &g.Gpppnightrate, &g.Gppptransno, &g.EquinoxPrn, &g.EquinoxLrn, &g.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &g, nil
}
