// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"

	"github.com/lib/pq"
)

// Wlrcode represents a row from 'equinox.wlrcodes'.
type Wlrcode struct {
	Wlrrejectcode   sql.NullString `json:"wlrrejectcode"`   // wlrrejectcode
	Wlrrejectreason sql.NullString `json:"wlrrejectreason"` // wlrrejectreason
	Wlrsparec1      sql.NullString `json:"wlrsparec1"`      // wlrsparec1
	Wlrsparec2      sql.NullString `json:"wlrsparec2"`      // wlrsparec2
	Wlrsparen1      sql.NullInt64  `json:"wlrsparen1"`      // wlrsparen1
	Wlrspared1      pq.NullTime    `json:"wlrspared1"`      // wlrspared1
	EquinoxLrn      int64          `json:"equinox_lrn"`     // equinox_lrn
	EquinoxSec      sql.NullInt64  `json:"equinox_sec"`     // equinox_sec
}

func AllWlrcode(db XODB, callback func(x Wlrcode) bool) error {

	// sql query
	const sqlstr = `SELECT ` +
		`wlrrejectcode, wlrrejectreason, wlrsparec1, wlrsparec2, wlrsparen1, wlrspared1, equinox_lrn, equinox_sec ` +
		`FROM equinox.wlrcodes `

	q, err := db.Query(sqlstr)

	if err != nil {
		return err
	}
	defer q.Close()

	// load results
	for q.Next() {
		w := Wlrcode{}

		// scan
		err = q.Scan(&w.Wlrrejectcode, &w.Wlrrejectreason, &w.Wlrsparec1, &w.Wlrsparec2, &w.Wlrsparen1, &w.Wlrspared1, &w.EquinoxLrn, &w.EquinoxSec)
		if err != nil {
			return err
		}
		if !callback(w) {
			return nil
		}
	}

	return nil
}

// WlrcodeByEquinoxLrn retrieves a row from 'equinox.wlrcodes' as a Wlrcode.
//
// Generated from index 'wlrcodes_pkey'.
func WlrcodeByEquinoxLrn(db XODB, equinoxLrn int64) (*Wlrcode, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`wlrrejectcode, wlrrejectreason, wlrsparec1, wlrsparec2, wlrsparen1, wlrspared1, equinox_lrn, equinox_sec ` +
		`FROM equinox.wlrcodes ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	w := Wlrcode{}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&w.Wlrrejectcode, &w.Wlrrejectreason, &w.Wlrsparec1, &w.Wlrsparec2, &w.Wlrsparen1, &w.Wlrspared1, &w.EquinoxLrn, &w.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &w, nil
}
