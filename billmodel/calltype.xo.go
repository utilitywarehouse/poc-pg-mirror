// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// Calltype represents a row from 'equinox.calltype'.
type Calltype struct {
	Calltypeid       sql.NullInt64   `json:"calltypeid"`       // calltypeid
	Ctdescription    sql.NullString  `json:"ctdescription"`    // ctdescription
	Ctoldcalltypeid  sql.NullInt64   `json:"ctoldcalltypeid"`  // ctoldcalltypeid
	Ctcommissionable sql.NullInt64   `json:"ctcommissionable"` // ctcommissionable
	Cttextdescriptio sql.NullInt64   `json:"cttextdescriptio"` // cttextdescriptio
	Ctsparenum1      sql.NullFloat64 `json:"ctsparenum1"`      // ctsparenum1
	Ctsparenum2      sql.NullFloat64 `json:"ctsparenum2"`      // ctsparenum2
	Crsparechar1     sql.NullString  `json:"crsparechar1"`     // crsparechar1
	Crsparechar2     sql.NullString  `json:"crsparechar2"`     // crsparechar2
	EquinoxLrn       int64           `json:"equinox_lrn"`      // equinox_lrn
	EquinoxSec       sql.NullInt64   `json:"equinox_sec"`      // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Calltype exists in the database.
func (c *Calltype) Exists() bool {
	return c._exists
}

// Deleted provides information if the Calltype has been deleted from the database.
func (c *Calltype) Deleted() bool {
	return c._deleted
}

// Insert inserts the Calltype to the database.
func (c *Calltype) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.calltype (` +
		`calltypeid, ctdescription, ctoldcalltypeid, ctcommissionable, cttextdescriptio, ctsparenum1, ctsparenum2, crsparechar1, crsparechar2, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, c.Calltypeid, c.Ctdescription, c.Ctoldcalltypeid, c.Ctcommissionable, c.Cttextdescriptio, c.Ctsparenum1, c.Ctsparenum2, c.Crsparechar1, c.Crsparechar2, c.EquinoxSec)
	err = db.QueryRow(sqlstr, c.Calltypeid, c.Ctdescription, c.Ctoldcalltypeid, c.Ctcommissionable, c.Cttextdescriptio, c.Ctsparenum1, c.Ctsparenum2, c.Crsparechar1, c.Crsparechar2, c.EquinoxSec).Scan(&c.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Update updates the Calltype in the database.
func (c *Calltype) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if c._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.calltype SET (` +
		`calltypeid, ctdescription, ctoldcalltypeid, ctcommissionable, cttextdescriptio, ctsparenum1, ctsparenum2, crsparechar1, crsparechar2, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10` +
		`) WHERE equinox_lrn = $11`

	// run query
	XOLog(sqlstr, c.Calltypeid, c.Ctdescription, c.Ctoldcalltypeid, c.Ctcommissionable, c.Cttextdescriptio, c.Ctsparenum1, c.Ctsparenum2, c.Crsparechar1, c.Crsparechar2, c.EquinoxSec, c.EquinoxLrn)
	_, err = db.Exec(sqlstr, c.Calltypeid, c.Ctdescription, c.Ctoldcalltypeid, c.Ctcommissionable, c.Cttextdescriptio, c.Ctsparenum1, c.Ctsparenum2, c.Crsparechar1, c.Crsparechar2, c.EquinoxSec, c.EquinoxLrn)
	return err
}

// Save saves the Calltype to the database.
func (c *Calltype) Save(db XODB) error {
	if c.Exists() {
		return c.Update(db)
	}

	return c.Insert(db)
}

// Upsert performs an upsert for Calltype.
//
// NOTE: PostgreSQL 9.5+ only
func (c *Calltype) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.calltype (` +
		`calltypeid, ctdescription, ctoldcalltypeid, ctcommissionable, cttextdescriptio, ctsparenum1, ctsparenum2, crsparechar1, crsparechar2, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`calltypeid, ctdescription, ctoldcalltypeid, ctcommissionable, cttextdescriptio, ctsparenum1, ctsparenum2, crsparechar1, crsparechar2, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.calltypeid, EXCLUDED.ctdescription, EXCLUDED.ctoldcalltypeid, EXCLUDED.ctcommissionable, EXCLUDED.cttextdescriptio, EXCLUDED.ctsparenum1, EXCLUDED.ctsparenum2, EXCLUDED.crsparechar1, EXCLUDED.crsparechar2, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, c.Calltypeid, c.Ctdescription, c.Ctoldcalltypeid, c.Ctcommissionable, c.Cttextdescriptio, c.Ctsparenum1, c.Ctsparenum2, c.Crsparechar1, c.Crsparechar2, c.EquinoxLrn, c.EquinoxSec)
	_, err = db.Exec(sqlstr, c.Calltypeid, c.Ctdescription, c.Ctoldcalltypeid, c.Ctcommissionable, c.Cttextdescriptio, c.Ctsparenum1, c.Ctsparenum2, c.Crsparechar1, c.Crsparechar2, c.EquinoxLrn, c.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Delete deletes the Calltype from the database.
func (c *Calltype) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return nil
	}

	// if deleted, bail
	if c._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.calltype WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, c.EquinoxLrn)
	_, err = db.Exec(sqlstr, c.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	c._deleted = true

	return nil
}

// CalltypeByEquinoxLrn retrieves a row from 'equinox.calltype' as a Calltype.
//
// Generated from index 'calltype_pkey'.
func CalltypeByEquinoxLrn(db XODB, equinoxLrn int64) (*Calltype, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`calltypeid, ctdescription, ctoldcalltypeid, ctcommissionable, cttextdescriptio, ctsparenum1, ctsparenum2, crsparechar1, crsparechar2, equinox_lrn, equinox_sec ` +
		`FROM equinox.calltype ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	c := Calltype{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&c.Calltypeid, &c.Ctdescription, &c.Ctoldcalltypeid, &c.Ctcommissionable, &c.Cttextdescriptio, &c.Ctsparenum1, &c.Ctsparenum2, &c.Crsparechar1, &c.Crsparechar2, &c.EquinoxLrn, &c.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &c, nil
}
