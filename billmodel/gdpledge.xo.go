// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/lib/pq"
)

// Gdpledge represents a row from 'equinox.gdpledge'.
type Gdpledge struct {
	Gdpldate      pq.NullTime     `json:"gdpldate"`      // gdpldate
	Gdpldatefrom  pq.NullTime     `json:"gdpldatefrom"`  // gdpldatefrom
	Gdpldateto    pq.NullTime     `json:"gdpldateto"`    // gdpldateto
	Gdpldays      sql.NullFloat64 `json:"gdpldays"`      // gdpldays
	Gdplremprovid sql.NullString  `json:"gdplremprovid"` // gdplremprovid
	Gdplrate      sql.NullFloat64 `json:"gdplrate"`      // gdplrate
	Gdpltotal     sql.NullFloat64 `json:"gdpltotal"`     // gdpltotal
	Gdplbillno    sql.NullFloat64 `json:"gdplbillno"`    // gdplbillno
	EquinoxPrn    sql.NullInt64   `json:"equinox_prn"`   // equinox_prn
	EquinoxLrn    int64           `json:"equinox_lrn"`   // equinox_lrn
	EquinoxSec    sql.NullInt64   `json:"equinox_sec"`   // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Gdpledge exists in the database.
func (g *Gdpledge) Exists() bool {
	return g._exists
}

// Deleted provides information if the Gdpledge has been deleted from the database.
func (g *Gdpledge) Deleted() bool {
	return g._deleted
}

// Insert inserts the Gdpledge to the database.
func (g *Gdpledge) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if g._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.gdpledge (` +
		`gdpldate, gdpldatefrom, gdpldateto, gdpldays, gdplremprovid, gdplrate, gdpltotal, gdplbillno, equinox_prn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, g.Gdpldate, g.Gdpldatefrom, g.Gdpldateto, g.Gdpldays, g.Gdplremprovid, g.Gdplrate, g.Gdpltotal, g.Gdplbillno, g.EquinoxPrn, g.EquinoxSec)
	err = db.QueryRow(sqlstr, g.Gdpldate, g.Gdpldatefrom, g.Gdpldateto, g.Gdpldays, g.Gdplremprovid, g.Gdplrate, g.Gdpltotal, g.Gdplbillno, g.EquinoxPrn, g.EquinoxSec).Scan(&g.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	g._exists = true

	return nil
}

// Update updates the Gdpledge in the database.
func (g *Gdpledge) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !g._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if g._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.gdpledge SET (` +
		`gdpldate, gdpldatefrom, gdpldateto, gdpldays, gdplremprovid, gdplrate, gdpltotal, gdplbillno, equinox_prn, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10` +
		`) WHERE equinox_lrn = $11`

	// run query
	XOLog(sqlstr, g.Gdpldate, g.Gdpldatefrom, g.Gdpldateto, g.Gdpldays, g.Gdplremprovid, g.Gdplrate, g.Gdpltotal, g.Gdplbillno, g.EquinoxPrn, g.EquinoxSec, g.EquinoxLrn)
	_, err = db.Exec(sqlstr, g.Gdpldate, g.Gdpldatefrom, g.Gdpldateto, g.Gdpldays, g.Gdplremprovid, g.Gdplrate, g.Gdpltotal, g.Gdplbillno, g.EquinoxPrn, g.EquinoxSec, g.EquinoxLrn)
	return err
}

// Save saves the Gdpledge to the database.
func (g *Gdpledge) Save(db XODB) error {
	if g.Exists() {
		return g.Update(db)
	}

	return g.Insert(db)
}

// Upsert performs an upsert for Gdpledge.
//
// NOTE: PostgreSQL 9.5+ only
func (g *Gdpledge) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if g._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.gdpledge (` +
		`gdpldate, gdpldatefrom, gdpldateto, gdpldays, gdplremprovid, gdplrate, gdpltotal, gdplbillno, equinox_prn, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`gdpldate, gdpldatefrom, gdpldateto, gdpldays, gdplremprovid, gdplrate, gdpltotal, gdplbillno, equinox_prn, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.gdpldate, EXCLUDED.gdpldatefrom, EXCLUDED.gdpldateto, EXCLUDED.gdpldays, EXCLUDED.gdplremprovid, EXCLUDED.gdplrate, EXCLUDED.gdpltotal, EXCLUDED.gdplbillno, EXCLUDED.equinox_prn, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, g.Gdpldate, g.Gdpldatefrom, g.Gdpldateto, g.Gdpldays, g.Gdplremprovid, g.Gdplrate, g.Gdpltotal, g.Gdplbillno, g.EquinoxPrn, g.EquinoxLrn, g.EquinoxSec)
	_, err = db.Exec(sqlstr, g.Gdpldate, g.Gdpldatefrom, g.Gdpldateto, g.Gdpldays, g.Gdplremprovid, g.Gdplrate, g.Gdpltotal, g.Gdplbillno, g.EquinoxPrn, g.EquinoxLrn, g.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	g._exists = true

	return nil
}

// Delete deletes the Gdpledge from the database.
func (g *Gdpledge) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !g._exists {
		return nil
	}

	// if deleted, bail
	if g._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.gdpledge WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, g.EquinoxLrn)
	_, err = db.Exec(sqlstr, g.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	g._deleted = true

	return nil
}

// GdpledgeByEquinoxLrn retrieves a row from 'equinox.gdpledge' as a Gdpledge.
//
// Generated from index 'gdpledge_pkey'.
func GdpledgeByEquinoxLrn(db XODB, equinoxLrn int64) (*Gdpledge, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`gdpldate, gdpldatefrom, gdpldateto, gdpldays, gdplremprovid, gdplrate, gdpltotal, gdplbillno, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.gdpledge ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	g := Gdpledge{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&g.Gdpldate, &g.Gdpldatefrom, &g.Gdpldateto, &g.Gdpldays, &g.Gdplremprovid, &g.Gdplrate, &g.Gdpltotal, &g.Gdplbillno, &g.EquinoxPrn, &g.EquinoxLrn, &g.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &g, nil
}
