// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import "database/sql"

// Exempl represents a row from 'equinox.exempl'.
type Exempl struct {
	Exempid      sql.NullString `json:"exempid"`      // exempid
	Exempname    sql.NullString `json:"exempname"`    // exempname
	Exempnrgdecl sql.NullInt64  `json:"exempnrgdecl"` // exempnrgdecl
	Exempidcard  sql.NullInt64  `json:"exempidcard"`  // exempidcard
	Exemptrained sql.NullInt64  `json:"exemptrained"` // exemptrained
	EquinoxPrn   sql.NullInt64  `json:"equinox_prn"`  // equinox_prn
	EquinoxLrn   int64          `json:"equinox_lrn"`  // equinox_lrn
	EquinoxSec   sql.NullInt64  `json:"equinox_sec"`  // equinox_sec
}

func AllExempl(db XODB, callback func(x Exempl) bool) error {

	// sql query
	const sqlstr = `SELECT ` +
		`exempid, exempname, exempnrgdecl, exempidcard, exemptrained, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.exempl `

	q, err := db.Query(sqlstr)

	if err != nil {
		return err
	}
	defer q.Close()

	// load results
	for q.Next() {
		e := Exempl{}

		// scan
		err = q.Scan(&e.Exempid, &e.Exempname, &e.Exempnrgdecl, &e.Exempidcard, &e.Exemptrained, &e.EquinoxPrn, &e.EquinoxLrn, &e.EquinoxSec)
		if err != nil {
			return err
		}
		if !callback(e) {
			return nil
		}
	}

	return nil
}

// ExemplByEquinoxLrn retrieves a row from 'equinox.exempl' as a Exempl.
//
// Generated from index 'exempl_pkey'.
func ExemplByEquinoxLrn(db XODB, equinoxLrn int64) (*Exempl, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`exempid, exempname, exempnrgdecl, exempidcard, exemptrained, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.exempl ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	e := Exempl{}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&e.Exempid, &e.Exempname, &e.Exempnrgdecl, &e.Exempidcard, &e.Exemptrained, &e.EquinoxPrn, &e.EquinoxLrn, &e.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &e, nil
}
