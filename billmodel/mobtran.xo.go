// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/lib/pq"
)

// Mobtran represents a row from 'equinox.mobtrans'.
type Mobtran struct {
	Mpptdate       pq.NullTime     `json:"mpptdate"`       // mpptdate
	Mppttime       pq.NullTime     `json:"mppttime"`       // mppttime
	Mpptamount     sql.NullFloat64 `json:"mpptamount"`     // mpptamount
	Mpptccrefernce sql.NullString  `json:"mpptccrefernce"` // mpptccrefernce
	Mpptbillnumber sql.NullFloat64 `json:"mpptbillnumber"` // mpptbillnumber
	Mppttranstype  sql.NullString  `json:"mppttranstype"`  // mppttranstype
	EquinoxPrn     sql.NullInt64   `json:"equinox_prn"`    // equinox_prn
	EquinoxLrn     int64           `json:"equinox_lrn"`    // equinox_lrn
	EquinoxSec     sql.NullInt64   `json:"equinox_sec"`    // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Mobtran exists in the database.
func (m *Mobtran) Exists() bool {
	return m._exists
}

// Deleted provides information if the Mobtran has been deleted from the database.
func (m *Mobtran) Deleted() bool {
	return m._deleted
}

// Insert inserts the Mobtran to the database.
func (m *Mobtran) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if m._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.mobtrans (` +
		`mpptdate, mppttime, mpptamount, mpptccrefernce, mpptbillnumber, mppttranstype, equinox_prn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, m.Mpptdate, m.Mppttime, m.Mpptamount, m.Mpptccrefernce, m.Mpptbillnumber, m.Mppttranstype, m.EquinoxPrn, m.EquinoxSec)
	err = db.QueryRow(sqlstr, m.Mpptdate, m.Mppttime, m.Mpptamount, m.Mpptccrefernce, m.Mpptbillnumber, m.Mppttranstype, m.EquinoxPrn, m.EquinoxSec).Scan(&m.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	m._exists = true

	return nil
}

// Update updates the Mobtran in the database.
func (m *Mobtran) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !m._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if m._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.mobtrans SET (` +
		`mpptdate, mppttime, mpptamount, mpptccrefernce, mpptbillnumber, mppttranstype, equinox_prn, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`) WHERE equinox_lrn = $9`

	// run query
	XOLog(sqlstr, m.Mpptdate, m.Mppttime, m.Mpptamount, m.Mpptccrefernce, m.Mpptbillnumber, m.Mppttranstype, m.EquinoxPrn, m.EquinoxSec, m.EquinoxLrn)
	_, err = db.Exec(sqlstr, m.Mpptdate, m.Mppttime, m.Mpptamount, m.Mpptccrefernce, m.Mpptbillnumber, m.Mppttranstype, m.EquinoxPrn, m.EquinoxSec, m.EquinoxLrn)
	return err
}

// Save saves the Mobtran to the database.
func (m *Mobtran) Save(db XODB) error {
	if m.Exists() {
		return m.Update(db)
	}

	return m.Insert(db)
}

// Upsert performs an upsert for Mobtran.
//
// NOTE: PostgreSQL 9.5+ only
func (m *Mobtran) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if m._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.mobtrans (` +
		`mpptdate, mppttime, mpptamount, mpptccrefernce, mpptbillnumber, mppttranstype, equinox_prn, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`mpptdate, mppttime, mpptamount, mpptccrefernce, mpptbillnumber, mppttranstype, equinox_prn, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.mpptdate, EXCLUDED.mppttime, EXCLUDED.mpptamount, EXCLUDED.mpptccrefernce, EXCLUDED.mpptbillnumber, EXCLUDED.mppttranstype, EXCLUDED.equinox_prn, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, m.Mpptdate, m.Mppttime, m.Mpptamount, m.Mpptccrefernce, m.Mpptbillnumber, m.Mppttranstype, m.EquinoxPrn, m.EquinoxLrn, m.EquinoxSec)
	_, err = db.Exec(sqlstr, m.Mpptdate, m.Mppttime, m.Mpptamount, m.Mpptccrefernce, m.Mpptbillnumber, m.Mppttranstype, m.EquinoxPrn, m.EquinoxLrn, m.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	m._exists = true

	return nil
}

// Delete deletes the Mobtran from the database.
func (m *Mobtran) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !m._exists {
		return nil
	}

	// if deleted, bail
	if m._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.mobtrans WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, m.EquinoxLrn)
	_, err = db.Exec(sqlstr, m.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	m._deleted = true

	return nil
}

// MobtranByEquinoxLrn retrieves a row from 'equinox.mobtrans' as a Mobtran.
//
// Generated from index 'mobtrans_pkey'.
func MobtranByEquinoxLrn(db XODB, equinoxLrn int64) (*Mobtran, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`mpptdate, mppttime, mpptamount, mpptccrefernce, mpptbillnumber, mppttranstype, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.mobtrans ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	m := Mobtran{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&m.Mpptdate, &m.Mppttime, &m.Mpptamount, &m.Mpptccrefernce, &m.Mpptbillnumber, &m.Mppttranstype, &m.EquinoxPrn, &m.EquinoxLrn, &m.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &m, nil
}
