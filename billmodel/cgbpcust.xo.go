// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// Cgbpcust represents a row from 'equinox.cgbpcust'.
type Cgbpcust struct {
	Cgbpcustaccno  sql.NullString  `json:"cgbpcustaccno"`  // cgbpcustaccno
	Cgbpexid       sql.NullString  `json:"cgbpexid"`       // cgbpexid
	Cgbcashbackamt sql.NullFloat64 `json:"cgbcashbackamt"` // cgbcashbackamt
	Cgbpclawback   sql.NullFloat64 `json:"cgbpclawback"`   // cgbpclawback
	EquinoxLrn     int64           `json:"equinox_lrn"`    // equinox_lrn
	EquinoxSec     sql.NullInt64   `json:"equinox_sec"`    // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Cgbpcust exists in the database.
func (c *Cgbpcust) Exists() bool {
	return c._exists
}

// Deleted provides information if the Cgbpcust has been deleted from the database.
func (c *Cgbpcust) Deleted() bool {
	return c._deleted
}

// Insert inserts the Cgbpcust to the database.
func (c *Cgbpcust) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.cgbpcust (` +
		`cgbpcustaccno, cgbpexid, cgbcashbackamt, cgbpclawback, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, c.Cgbpcustaccno, c.Cgbpexid, c.Cgbcashbackamt, c.Cgbpclawback, c.EquinoxSec)
	err = db.QueryRow(sqlstr, c.Cgbpcustaccno, c.Cgbpexid, c.Cgbcashbackamt, c.Cgbpclawback, c.EquinoxSec).Scan(&c.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Update updates the Cgbpcust in the database.
func (c *Cgbpcust) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if c._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.cgbpcust SET (` +
		`cgbpcustaccno, cgbpexid, cgbcashbackamt, cgbpclawback, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5` +
		`) WHERE equinox_lrn = $6`

	// run query
	XOLog(sqlstr, c.Cgbpcustaccno, c.Cgbpexid, c.Cgbcashbackamt, c.Cgbpclawback, c.EquinoxSec, c.EquinoxLrn)
	_, err = db.Exec(sqlstr, c.Cgbpcustaccno, c.Cgbpexid, c.Cgbcashbackamt, c.Cgbpclawback, c.EquinoxSec, c.EquinoxLrn)
	return err
}

// Save saves the Cgbpcust to the database.
func (c *Cgbpcust) Save(db XODB) error {
	if c.Exists() {
		return c.Update(db)
	}

	return c.Insert(db)
}

// Upsert performs an upsert for Cgbpcust.
//
// NOTE: PostgreSQL 9.5+ only
func (c *Cgbpcust) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.cgbpcust (` +
		`cgbpcustaccno, cgbpexid, cgbcashbackamt, cgbpclawback, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`cgbpcustaccno, cgbpexid, cgbcashbackamt, cgbpclawback, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.cgbpcustaccno, EXCLUDED.cgbpexid, EXCLUDED.cgbcashbackamt, EXCLUDED.cgbpclawback, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, c.Cgbpcustaccno, c.Cgbpexid, c.Cgbcashbackamt, c.Cgbpclawback, c.EquinoxLrn, c.EquinoxSec)
	_, err = db.Exec(sqlstr, c.Cgbpcustaccno, c.Cgbpexid, c.Cgbcashbackamt, c.Cgbpclawback, c.EquinoxLrn, c.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Delete deletes the Cgbpcust from the database.
func (c *Cgbpcust) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return nil
	}

	// if deleted, bail
	if c._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.cgbpcust WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, c.EquinoxLrn)
	_, err = db.Exec(sqlstr, c.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	c._deleted = true

	return nil
}

// CgbpcustByEquinoxLrn retrieves a row from 'equinox.cgbpcust' as a Cgbpcust.
//
// Generated from index 'cgbpcust_pkey'.
func CgbpcustByEquinoxLrn(db XODB, equinoxLrn int64) (*Cgbpcust, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`cgbpcustaccno, cgbpexid, cgbcashbackamt, cgbpclawback, equinox_lrn, equinox_sec ` +
		`FROM equinox.cgbpcust ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	c := Cgbpcust{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&c.Cgbpcustaccno, &c.Cgbpexid, &c.Cgbcashbackamt, &c.Cgbpclawback, &c.EquinoxLrn, &c.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &c, nil
}
