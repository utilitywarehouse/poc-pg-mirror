// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/lib/pq"
)

// Cnxhmlog represents a row from 'equinox.cnxhmlog'.
type Cnxhmlog struct {
	Cnxhmlogdate     pq.NullTime    `json:"cnxhmlogdate"`     // cnxhmlogdate
	Cnxhmlogtime     pq.NullTime    `json:"cnxhmlogtime"`     // cnxhmlogtime
	Cnxhmloguser     sql.NullString `json:"cnxhmloguser"`     // cnxhmloguser
	Cnxhmlogcode     sql.NullString `json:"cnxhmlogcode"`     // cnxhmlogcode
	Cnxhmlogdescrip  sql.NullString `json:"cnxhmlogdescrip"`  // cnxhmlogdescrip
	Cnxhmlogcli      sql.NullString `json:"cnxhmlogcli"`      // cnxhmlogcli
	Cnxhmlogservtype sql.NullString `json:"cnxhmlogservtype"` // cnxhmlogservtype
	Cnxhmlogrecname  sql.NullString `json:"cnxhmlogrecname"`  // cnxhmlogrecname
	Cnxhmlogsparec1  sql.NullString `json:"cnxhmlogsparec1"`  // cnxhmlogsparec1
	Cnxhmlogsparen1  sql.NullInt64  `json:"cnxhmlogsparen1"`  // cnxhmlogsparen1
	Cnxhmlogspared1  pq.NullTime    `json:"cnxhmlogspared1"`  // cnxhmlogspared1
	EquinoxPrn       sql.NullInt64  `json:"equinox_prn"`      // equinox_prn
	EquinoxLrn       int64          `json:"equinox_lrn"`      // equinox_lrn
	EquinoxSec       sql.NullInt64  `json:"equinox_sec"`      // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Cnxhmlog exists in the database.
func (c *Cnxhmlog) Exists() bool {
	return c._exists
}

// Deleted provides information if the Cnxhmlog has been deleted from the database.
func (c *Cnxhmlog) Deleted() bool {
	return c._deleted
}

// Insert inserts the Cnxhmlog to the database.
func (c *Cnxhmlog) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.cnxhmlog (` +
		`cnxhmlogdate, cnxhmlogtime, cnxhmloguser, cnxhmlogcode, cnxhmlogdescrip, cnxhmlogcli, cnxhmlogservtype, cnxhmlogrecname, cnxhmlogsparec1, cnxhmlogsparen1, cnxhmlogspared1, equinox_prn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, c.Cnxhmlogdate, c.Cnxhmlogtime, c.Cnxhmloguser, c.Cnxhmlogcode, c.Cnxhmlogdescrip, c.Cnxhmlogcli, c.Cnxhmlogservtype, c.Cnxhmlogrecname, c.Cnxhmlogsparec1, c.Cnxhmlogsparen1, c.Cnxhmlogspared1, c.EquinoxPrn, c.EquinoxSec)
	err = db.QueryRow(sqlstr, c.Cnxhmlogdate, c.Cnxhmlogtime, c.Cnxhmloguser, c.Cnxhmlogcode, c.Cnxhmlogdescrip, c.Cnxhmlogcli, c.Cnxhmlogservtype, c.Cnxhmlogrecname, c.Cnxhmlogsparec1, c.Cnxhmlogsparen1, c.Cnxhmlogspared1, c.EquinoxPrn, c.EquinoxSec).Scan(&c.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Update updates the Cnxhmlog in the database.
func (c *Cnxhmlog) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if c._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.cnxhmlog SET (` +
		`cnxhmlogdate, cnxhmlogtime, cnxhmloguser, cnxhmlogcode, cnxhmlogdescrip, cnxhmlogcli, cnxhmlogservtype, cnxhmlogrecname, cnxhmlogsparec1, cnxhmlogsparen1, cnxhmlogspared1, equinox_prn, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13` +
		`) WHERE equinox_lrn = $14`

	// run query
	XOLog(sqlstr, c.Cnxhmlogdate, c.Cnxhmlogtime, c.Cnxhmloguser, c.Cnxhmlogcode, c.Cnxhmlogdescrip, c.Cnxhmlogcli, c.Cnxhmlogservtype, c.Cnxhmlogrecname, c.Cnxhmlogsparec1, c.Cnxhmlogsparen1, c.Cnxhmlogspared1, c.EquinoxPrn, c.EquinoxSec, c.EquinoxLrn)
	_, err = db.Exec(sqlstr, c.Cnxhmlogdate, c.Cnxhmlogtime, c.Cnxhmloguser, c.Cnxhmlogcode, c.Cnxhmlogdescrip, c.Cnxhmlogcli, c.Cnxhmlogservtype, c.Cnxhmlogrecname, c.Cnxhmlogsparec1, c.Cnxhmlogsparen1, c.Cnxhmlogspared1, c.EquinoxPrn, c.EquinoxSec, c.EquinoxLrn)
	return err
}

// Save saves the Cnxhmlog to the database.
func (c *Cnxhmlog) Save(db XODB) error {
	if c.Exists() {
		return c.Update(db)
	}

	return c.Insert(db)
}

// Upsert performs an upsert for Cnxhmlog.
//
// NOTE: PostgreSQL 9.5+ only
func (c *Cnxhmlog) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.cnxhmlog (` +
		`cnxhmlogdate, cnxhmlogtime, cnxhmloguser, cnxhmlogcode, cnxhmlogdescrip, cnxhmlogcli, cnxhmlogservtype, cnxhmlogrecname, cnxhmlogsparec1, cnxhmlogsparen1, cnxhmlogspared1, equinox_prn, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`cnxhmlogdate, cnxhmlogtime, cnxhmloguser, cnxhmlogcode, cnxhmlogdescrip, cnxhmlogcli, cnxhmlogservtype, cnxhmlogrecname, cnxhmlogsparec1, cnxhmlogsparen1, cnxhmlogspared1, equinox_prn, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.cnxhmlogdate, EXCLUDED.cnxhmlogtime, EXCLUDED.cnxhmloguser, EXCLUDED.cnxhmlogcode, EXCLUDED.cnxhmlogdescrip, EXCLUDED.cnxhmlogcli, EXCLUDED.cnxhmlogservtype, EXCLUDED.cnxhmlogrecname, EXCLUDED.cnxhmlogsparec1, EXCLUDED.cnxhmlogsparen1, EXCLUDED.cnxhmlogspared1, EXCLUDED.equinox_prn, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, c.Cnxhmlogdate, c.Cnxhmlogtime, c.Cnxhmloguser, c.Cnxhmlogcode, c.Cnxhmlogdescrip, c.Cnxhmlogcli, c.Cnxhmlogservtype, c.Cnxhmlogrecname, c.Cnxhmlogsparec1, c.Cnxhmlogsparen1, c.Cnxhmlogspared1, c.EquinoxPrn, c.EquinoxLrn, c.EquinoxSec)
	_, err = db.Exec(sqlstr, c.Cnxhmlogdate, c.Cnxhmlogtime, c.Cnxhmloguser, c.Cnxhmlogcode, c.Cnxhmlogdescrip, c.Cnxhmlogcli, c.Cnxhmlogservtype, c.Cnxhmlogrecname, c.Cnxhmlogsparec1, c.Cnxhmlogsparen1, c.Cnxhmlogspared1, c.EquinoxPrn, c.EquinoxLrn, c.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Delete deletes the Cnxhmlog from the database.
func (c *Cnxhmlog) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return nil
	}

	// if deleted, bail
	if c._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.cnxhmlog WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, c.EquinoxLrn)
	_, err = db.Exec(sqlstr, c.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	c._deleted = true

	return nil
}

// CnxhmlogByEquinoxLrn retrieves a row from 'equinox.cnxhmlog' as a Cnxhmlog.
//
// Generated from index 'cnxhmlog_pkey'.
func CnxhmlogByEquinoxLrn(db XODB, equinoxLrn int64) (*Cnxhmlog, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`cnxhmlogdate, cnxhmlogtime, cnxhmloguser, cnxhmlogcode, cnxhmlogdescrip, cnxhmlogcli, cnxhmlogservtype, cnxhmlogrecname, cnxhmlogsparec1, cnxhmlogsparen1, cnxhmlogspared1, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.cnxhmlog ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	c := Cnxhmlog{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&c.Cnxhmlogdate, &c.Cnxhmlogtime, &c.Cnxhmloguser, &c.Cnxhmlogcode, &c.Cnxhmlogdescrip, &c.Cnxhmlogcli, &c.Cnxhmlogservtype, &c.Cnxhmlogrecname, &c.Cnxhmlogsparec1, &c.Cnxhmlogsparen1, &c.Cnxhmlogspared1, &c.EquinoxPrn, &c.EquinoxLrn, &c.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &c, nil
}
