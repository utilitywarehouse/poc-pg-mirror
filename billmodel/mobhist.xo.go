// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/lib/pq"
)

// Mobhist represents a row from 'equinox.mobhist'.
type Mobhist struct {
	MobhistCode    sql.NullString  `json:"mobhist_code"`    // mobhist_code
	MobhistDate    pq.NullTime     `json:"mobhist_date"`    // mobhist_date
	MobhistAccount sql.NullString  `json:"mobhist_account"` // mobhist_account
	MobhistSparec1 sql.NullString  `json:"mobhist_sparec1"` // mobhist_sparec1
	MobhistSparen1 sql.NullFloat64 `json:"mobhist_sparen1"` // mobhist_sparen1
	MobhistSpared1 pq.NullTime     `json:"mobhist_spared1"` // mobhist_spared1
	EquinoxPrn     sql.NullInt64   `json:"equinox_prn"`     // equinox_prn
	EquinoxLrn     int64           `json:"equinox_lrn"`     // equinox_lrn
	EquinoxSec     sql.NullInt64   `json:"equinox_sec"`     // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Mobhist exists in the database.
func (m *Mobhist) Exists() bool {
	return m._exists
}

// Deleted provides information if the Mobhist has been deleted from the database.
func (m *Mobhist) Deleted() bool {
	return m._deleted
}

// Insert inserts the Mobhist to the database.
func (m *Mobhist) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if m._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.mobhist (` +
		`mobhist_code, mobhist_date, mobhist_account, mobhist_sparec1, mobhist_sparen1, mobhist_spared1, equinox_prn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, m.MobhistCode, m.MobhistDate, m.MobhistAccount, m.MobhistSparec1, m.MobhistSparen1, m.MobhistSpared1, m.EquinoxPrn, m.EquinoxSec)
	err = db.QueryRow(sqlstr, m.MobhistCode, m.MobhistDate, m.MobhistAccount, m.MobhistSparec1, m.MobhistSparen1, m.MobhistSpared1, m.EquinoxPrn, m.EquinoxSec).Scan(&m.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	m._exists = true

	return nil
}

// Update updates the Mobhist in the database.
func (m *Mobhist) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !m._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if m._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.mobhist SET (` +
		`mobhist_code, mobhist_date, mobhist_account, mobhist_sparec1, mobhist_sparen1, mobhist_spared1, equinox_prn, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`) WHERE equinox_lrn = $9`

	// run query
	XOLog(sqlstr, m.MobhistCode, m.MobhistDate, m.MobhistAccount, m.MobhistSparec1, m.MobhistSparen1, m.MobhistSpared1, m.EquinoxPrn, m.EquinoxSec, m.EquinoxLrn)
	_, err = db.Exec(sqlstr, m.MobhistCode, m.MobhistDate, m.MobhistAccount, m.MobhistSparec1, m.MobhistSparen1, m.MobhistSpared1, m.EquinoxPrn, m.EquinoxSec, m.EquinoxLrn)
	return err
}

// Save saves the Mobhist to the database.
func (m *Mobhist) Save(db XODB) error {
	if m.Exists() {
		return m.Update(db)
	}

	return m.Insert(db)
}

// Upsert performs an upsert for Mobhist.
//
// NOTE: PostgreSQL 9.5+ only
func (m *Mobhist) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if m._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.mobhist (` +
		`mobhist_code, mobhist_date, mobhist_account, mobhist_sparec1, mobhist_sparen1, mobhist_spared1, equinox_prn, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`mobhist_code, mobhist_date, mobhist_account, mobhist_sparec1, mobhist_sparen1, mobhist_spared1, equinox_prn, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.mobhist_code, EXCLUDED.mobhist_date, EXCLUDED.mobhist_account, EXCLUDED.mobhist_sparec1, EXCLUDED.mobhist_sparen1, EXCLUDED.mobhist_spared1, EXCLUDED.equinox_prn, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, m.MobhistCode, m.MobhistDate, m.MobhistAccount, m.MobhistSparec1, m.MobhistSparen1, m.MobhistSpared1, m.EquinoxPrn, m.EquinoxLrn, m.EquinoxSec)
	_, err = db.Exec(sqlstr, m.MobhistCode, m.MobhistDate, m.MobhistAccount, m.MobhistSparec1, m.MobhistSparen1, m.MobhistSpared1, m.EquinoxPrn, m.EquinoxLrn, m.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	m._exists = true

	return nil
}

// Delete deletes the Mobhist from the database.
func (m *Mobhist) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !m._exists {
		return nil
	}

	// if deleted, bail
	if m._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.mobhist WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, m.EquinoxLrn)
	_, err = db.Exec(sqlstr, m.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	m._deleted = true

	return nil
}

// MobhistByEquinoxLrn retrieves a row from 'equinox.mobhist' as a Mobhist.
//
// Generated from index 'mobhist_pkey'.
func MobhistByEquinoxLrn(db XODB, equinoxLrn int64) (*Mobhist, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`mobhist_code, mobhist_date, mobhist_account, mobhist_sparec1, mobhist_sparen1, mobhist_spared1, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.mobhist ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	m := Mobhist{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&m.MobhistCode, &m.MobhistDate, &m.MobhistAccount, &m.MobhistSparec1, &m.MobhistSparen1, &m.MobhistSpared1, &m.EquinoxPrn, &m.EquinoxLrn, &m.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &m, nil
}
