// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"

	"github.com/lib/pq"
)

// Prostran represents a row from 'equinox.prostran'.
type Prostran struct {
	Pttransactionid  sql.NullInt64   `json:"pttransactionid"`  // pttransactionid
	Ptdate           pq.NullTime     `json:"ptdate"`           // ptdate
	Ptdatesettled    pq.NullTime     `json:"ptdatesettled"`    // ptdatesettled
	Ptdateprocessed  pq.NullTime     `json:"ptdateprocessed"`  // ptdateprocessed
	Pttranstype      sql.NullString  `json:"pttranstype"`      // pttranstype
	Ptlocaliso       sql.NullString  `json:"ptlocaliso"`       // ptlocaliso
	Ptvaluegbp       sql.NullFloat64 `json:"ptvaluegbp"`       // ptvaluegbp
	Ptvaluelocal     sql.NullFloat64 `json:"ptvaluelocal"`     // ptvaluelocal
	Ptauthcode       sql.NullString  `json:"ptauthcode"`       // ptauthcode
	Ptmerchantnum    sql.NullString  `json:"ptmerchantnum"`    // ptmerchantnum
	Ptdescription    sql.NullString  `json:"ptdescription"`    // ptdescription
	Ptmerchantcat    sql.NullString  `json:"ptmerchantcat"`    // ptmerchantcat
	Ptsaving         sql.NullFloat64 `json:"ptsaving"`         // ptsaving
	Ptbillnumber     sql.NullInt64   `json:"ptbillnumber"`     // ptbillnumber
	Ptexchangerate   sql.NullFloat64 `json:"ptexchangerate"`   // ptexchangerate
	Pttransactionchg sql.NullFloat64 `json:"pttransactionchg"` // pttransactionchg
	Ptpptreference   sql.NullString  `json:"ptpptreference"`   // ptpptreference
	Ptprossave       sql.NullFloat64 `json:"ptprossave"`       // ptprossave
	Ptprospercent    sql.NullFloat64 `json:"ptprospercent"`    // ptprospercent
	Ptaffmer         sql.NullInt64   `json:"ptaffmer"`         // ptaffmer
	Pteligiblespend  sql.NullFloat64 `json:"pteligiblespend"`  // pteligiblespend
	Ptdateclaimed    pq.NullTime     `json:"ptdateclaimed"`    // ptdateclaimed
	Ptdontpay        sql.NullString  `json:"ptdontpay"`        // ptdontpay
	Ptpaidfuel       sql.NullString  `json:"ptpaidfuel"`       // ptpaidfuel
	EquinoxPrn       sql.NullInt64   `json:"equinox_prn"`      // equinox_prn
	EquinoxLrn       int64           `json:"equinox_lrn"`      // equinox_lrn
	EquinoxSec       sql.NullInt64   `json:"equinox_sec"`      // equinox_sec
}

func AllProstran(db XODB, callback func(x Prostran) bool) error {

	// sql query
	const sqlstr = `SELECT ` +
		`pttransactionid, ptdate, ptdatesettled, ptdateprocessed, pttranstype, ptlocaliso, ptvaluegbp, ptvaluelocal, ptauthcode, ptmerchantnum, ptdescription, ptmerchantcat, ptsaving, ptbillnumber, ptexchangerate, pttransactionchg, ptpptreference, ptprossave, ptprospercent, ptaffmer, pteligiblespend, ptdateclaimed, ptdontpay, ptpaidfuel, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.prostran `

	q, err := db.Query(sqlstr)

	if err != nil {
		return err
	}
	defer q.Close()

	// load results
	for q.Next() {
		p := Prostran{}

		// scan
		err = q.Scan(&p.Pttransactionid, &p.Ptdate, &p.Ptdatesettled, &p.Ptdateprocessed, &p.Pttranstype, &p.Ptlocaliso, &p.Ptvaluegbp, &p.Ptvaluelocal, &p.Ptauthcode, &p.Ptmerchantnum, &p.Ptdescription, &p.Ptmerchantcat, &p.Ptsaving, &p.Ptbillnumber, &p.Ptexchangerate, &p.Pttransactionchg, &p.Ptpptreference, &p.Ptprossave, &p.Ptprospercent, &p.Ptaffmer, &p.Pteligiblespend, &p.Ptdateclaimed, &p.Ptdontpay, &p.Ptpaidfuel, &p.EquinoxPrn, &p.EquinoxLrn, &p.EquinoxSec)
		if err != nil {
			return err
		}
		if !callback(p) {
			return nil
		}
	}

	return nil
}

// ProstranByEquinoxLrn retrieves a row from 'equinox.prostran' as a Prostran.
//
// Generated from index 'prostran_pkey'.
func ProstranByEquinoxLrn(db XODB, equinoxLrn int64) (*Prostran, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`pttransactionid, ptdate, ptdatesettled, ptdateprocessed, pttranstype, ptlocaliso, ptvaluegbp, ptvaluelocal, ptauthcode, ptmerchantnum, ptdescription, ptmerchantcat, ptsaving, ptbillnumber, ptexchangerate, pttransactionchg, ptpptreference, ptprossave, ptprospercent, ptaffmer, pteligiblespend, ptdateclaimed, ptdontpay, ptpaidfuel, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.prostran ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	p := Prostran{}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&p.Pttransactionid, &p.Ptdate, &p.Ptdatesettled, &p.Ptdateprocessed, &p.Pttranstype, &p.Ptlocaliso, &p.Ptvaluegbp, &p.Ptvaluelocal, &p.Ptauthcode, &p.Ptmerchantnum, &p.Ptdescription, &p.Ptmerchantcat, &p.Ptsaving, &p.Ptbillnumber, &p.Ptexchangerate, &p.Pttransactionchg, &p.Ptpptreference, &p.Ptprossave, &p.Ptprospercent, &p.Ptaffmer, &p.Pteligiblespend, &p.Ptdateclaimed, &p.Ptdontpay, &p.Ptpaidfuel, &p.EquinoxPrn, &p.EquinoxLrn, &p.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &p, nil
}
