// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// Recruit represents a row from 'equinox.recruit'.
type Recruit struct {
	Recaccountno    sql.NullString `json:"recaccountno"`    // recaccountno
	Recinitexid     sql.NullString `json:"recinitexid"`     // recinitexid
	Reccomuniquesys sql.NullInt64  `json:"reccomuniquesys"` // reccomuniquesys
	EquinoxLrn      int64          `json:"equinox_lrn"`     // equinox_lrn
	EquinoxSec      sql.NullInt64  `json:"equinox_sec"`     // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Recruit exists in the database.
func (r *Recruit) Exists() bool {
	return r._exists
}

// Deleted provides information if the Recruit has been deleted from the database.
func (r *Recruit) Deleted() bool {
	return r._deleted
}

// Insert inserts the Recruit to the database.
func (r *Recruit) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if r._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.recruit (` +
		`recaccountno, recinitexid, reccomuniquesys, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, r.Recaccountno, r.Recinitexid, r.Reccomuniquesys, r.EquinoxSec)
	err = db.QueryRow(sqlstr, r.Recaccountno, r.Recinitexid, r.Reccomuniquesys, r.EquinoxSec).Scan(&r.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	r._exists = true

	return nil
}

// Update updates the Recruit in the database.
func (r *Recruit) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !r._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if r._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.recruit SET (` +
		`recaccountno, recinitexid, reccomuniquesys, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4` +
		`) WHERE equinox_lrn = $5`

	// run query
	XOLog(sqlstr, r.Recaccountno, r.Recinitexid, r.Reccomuniquesys, r.EquinoxSec, r.EquinoxLrn)
	_, err = db.Exec(sqlstr, r.Recaccountno, r.Recinitexid, r.Reccomuniquesys, r.EquinoxSec, r.EquinoxLrn)
	return err
}

// Save saves the Recruit to the database.
func (r *Recruit) Save(db XODB) error {
	if r.Exists() {
		return r.Update(db)
	}

	return r.Insert(db)
}

// Upsert performs an upsert for Recruit.
//
// NOTE: PostgreSQL 9.5+ only
func (r *Recruit) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if r._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.recruit (` +
		`recaccountno, recinitexid, reccomuniquesys, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`recaccountno, recinitexid, reccomuniquesys, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.recaccountno, EXCLUDED.recinitexid, EXCLUDED.reccomuniquesys, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, r.Recaccountno, r.Recinitexid, r.Reccomuniquesys, r.EquinoxLrn, r.EquinoxSec)
	_, err = db.Exec(sqlstr, r.Recaccountno, r.Recinitexid, r.Reccomuniquesys, r.EquinoxLrn, r.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	r._exists = true

	return nil
}

// Delete deletes the Recruit from the database.
func (r *Recruit) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !r._exists {
		return nil
	}

	// if deleted, bail
	if r._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.recruit WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, r.EquinoxLrn)
	_, err = db.Exec(sqlstr, r.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	r._deleted = true

	return nil
}

// RecruitByEquinoxLrn retrieves a row from 'equinox.recruit' as a Recruit.
//
// Generated from index 'recruit_pkey'.
func RecruitByEquinoxLrn(db XODB, equinoxLrn int64) (*Recruit, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`recaccountno, recinitexid, reccomuniquesys, equinox_lrn, equinox_sec ` +
		`FROM equinox.recruit ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	r := Recruit{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&r.Recaccountno, &r.Recinitexid, &r.Reccomuniquesys, &r.EquinoxLrn, &r.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &r, nil
}
