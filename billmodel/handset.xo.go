// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/lib/pq"
)

// Handset represents a row from 'equinox.handset'.
type Handset struct {
	HsID            sql.NullInt64   `json:"hs_id"`            // hs_id
	HsMake          sql.NullString  `json:"hs_make"`          // hs_make
	HsModel         sql.NullString  `json:"hs_model"`         // hs_model
	HsFeature1      sql.NullString  `json:"hs_feature_1"`     // hs_feature_1
	HsFeature2      sql.NullString  `json:"hs_feature_2"`     // hs_feature_2
	HsFeature3      sql.NullString  `json:"hs_feature_3"`     // hs_feature_3
	HsFeature4      sql.NullString  `json:"hs_feature_4"`     // hs_feature_4
	HsWeight        sql.NullInt64   `json:"hs_weight"`        // hs_weight
	HsTalktime      sql.NullFloat64 `json:"hs_talktime"`      // hs_talktime
	HsStandby       sql.NullInt64   `json:"hs_standby"`       // hs_standby
	HsSuspend       sql.NullInt64   `json:"hs_suspend"`       // hs_suspend
	HsBand          sql.NullString  `json:"hs_band"`          // hs_band
	HsWifi          sql.NullInt64   `json:"hs_wifi"`          // hs_wifi
	HsEmail         sql.NullInt64   `json:"hs_email"`         // hs_email
	HsMms           sql.NullInt64   `json:"hs_mms"`           // hs_mms
	HsBluetooth     sql.NullInt64   `json:"hs_bluetooth"`     // hs_bluetooth
	HsMemorycard    sql.NullInt64   `json:"hs_memorycard"`    // hs_memorycard
	HsInternetbrows sql.NullInt64   `json:"hs_internetbrows"` // hs_internetbrows
	HsMp3player     sql.NullInt64   `json:"hs_mp3player"`     // hs_mp3player
	HsFmradio       sql.NullInt64   `json:"hs_fmradio"`       // hs_fmradio
	HsCamera        sql.NullString  `json:"hs_camera"`        // hs_camera
	HsGps           sql.NullInt64   `json:"hs_gps"`           // hs_gps
	HsSmartphone    sql.NullFloat64 `json:"hs_smartphone"`    // hs_smartphone
	HsSpareC1       sql.NullString  `json:"hs_spare_c1"`      // hs_spare_c1
	HsSpareD1       pq.NullTime     `json:"hs_spare_d1"`      // hs_spare_d1
	HsSpareN1       sql.NullInt64   `json:"hs_spare_n1"`      // hs_spare_n1
	HsAllowImei     sql.NullInt64   `json:"hs_allow_imei"`    // hs_allow_imei
	HsSimtype       sql.NullInt64   `json:"hs_simtype"`       // hs_simtype
	HsIdrestrict    sql.NullInt64   `json:"hs_idrestrict"`    // hs_idrestrict
	HsStaffrestrict sql.NullInt64   `json:"hs_staffrestrict"` // hs_staffrestrict
	EquinoxLrn      int64           `json:"equinox_lrn"`      // equinox_lrn
	EquinoxSec      sql.NullInt64   `json:"equinox_sec"`      // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Handset exists in the database.
func (h *Handset) Exists() bool {
	return h._exists
}

// Deleted provides information if the Handset has been deleted from the database.
func (h *Handset) Deleted() bool {
	return h._deleted
}

// Insert inserts the Handset to the database.
func (h *Handset) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if h._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.handset (` +
		`hs_id, hs_make, hs_model, hs_feature_1, hs_feature_2, hs_feature_3, hs_feature_4, hs_weight, hs_talktime, hs_standby, hs_suspend, hs_band, hs_wifi, hs_email, hs_mms, hs_bluetooth, hs_memorycard, hs_internetbrows, hs_mp3player, hs_fmradio, hs_camera, hs_gps, hs_smartphone, hs_spare_c1, hs_spare_d1, hs_spare_n1, hs_allow_imei, hs_simtype, hs_idrestrict, hs_staffrestrict, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, h.HsID, h.HsMake, h.HsModel, h.HsFeature1, h.HsFeature2, h.HsFeature3, h.HsFeature4, h.HsWeight, h.HsTalktime, h.HsStandby, h.HsSuspend, h.HsBand, h.HsWifi, h.HsEmail, h.HsMms, h.HsBluetooth, h.HsMemorycard, h.HsInternetbrows, h.HsMp3player, h.HsFmradio, h.HsCamera, h.HsGps, h.HsSmartphone, h.HsSpareC1, h.HsSpareD1, h.HsSpareN1, h.HsAllowImei, h.HsSimtype, h.HsIdrestrict, h.HsStaffrestrict, h.EquinoxSec)
	err = db.QueryRow(sqlstr, h.HsID, h.HsMake, h.HsModel, h.HsFeature1, h.HsFeature2, h.HsFeature3, h.HsFeature4, h.HsWeight, h.HsTalktime, h.HsStandby, h.HsSuspend, h.HsBand, h.HsWifi, h.HsEmail, h.HsMms, h.HsBluetooth, h.HsMemorycard, h.HsInternetbrows, h.HsMp3player, h.HsFmradio, h.HsCamera, h.HsGps, h.HsSmartphone, h.HsSpareC1, h.HsSpareD1, h.HsSpareN1, h.HsAllowImei, h.HsSimtype, h.HsIdrestrict, h.HsStaffrestrict, h.EquinoxSec).Scan(&h.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	h._exists = true

	return nil
}

// Update updates the Handset in the database.
func (h *Handset) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !h._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if h._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.handset SET (` +
		`hs_id, hs_make, hs_model, hs_feature_1, hs_feature_2, hs_feature_3, hs_feature_4, hs_weight, hs_talktime, hs_standby, hs_suspend, hs_band, hs_wifi, hs_email, hs_mms, hs_bluetooth, hs_memorycard, hs_internetbrows, hs_mp3player, hs_fmradio, hs_camera, hs_gps, hs_smartphone, hs_spare_c1, hs_spare_d1, hs_spare_n1, hs_allow_imei, hs_simtype, hs_idrestrict, hs_staffrestrict, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31` +
		`) WHERE equinox_lrn = $32`

	// run query
	XOLog(sqlstr, h.HsID, h.HsMake, h.HsModel, h.HsFeature1, h.HsFeature2, h.HsFeature3, h.HsFeature4, h.HsWeight, h.HsTalktime, h.HsStandby, h.HsSuspend, h.HsBand, h.HsWifi, h.HsEmail, h.HsMms, h.HsBluetooth, h.HsMemorycard, h.HsInternetbrows, h.HsMp3player, h.HsFmradio, h.HsCamera, h.HsGps, h.HsSmartphone, h.HsSpareC1, h.HsSpareD1, h.HsSpareN1, h.HsAllowImei, h.HsSimtype, h.HsIdrestrict, h.HsStaffrestrict, h.EquinoxSec, h.EquinoxLrn)
	_, err = db.Exec(sqlstr, h.HsID, h.HsMake, h.HsModel, h.HsFeature1, h.HsFeature2, h.HsFeature3, h.HsFeature4, h.HsWeight, h.HsTalktime, h.HsStandby, h.HsSuspend, h.HsBand, h.HsWifi, h.HsEmail, h.HsMms, h.HsBluetooth, h.HsMemorycard, h.HsInternetbrows, h.HsMp3player, h.HsFmradio, h.HsCamera, h.HsGps, h.HsSmartphone, h.HsSpareC1, h.HsSpareD1, h.HsSpareN1, h.HsAllowImei, h.HsSimtype, h.HsIdrestrict, h.HsStaffrestrict, h.EquinoxSec, h.EquinoxLrn)
	return err
}

// Save saves the Handset to the database.
func (h *Handset) Save(db XODB) error {
	if h.Exists() {
		return h.Update(db)
	}

	return h.Insert(db)
}

// Upsert performs an upsert for Handset.
//
// NOTE: PostgreSQL 9.5+ only
func (h *Handset) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if h._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.handset (` +
		`hs_id, hs_make, hs_model, hs_feature_1, hs_feature_2, hs_feature_3, hs_feature_4, hs_weight, hs_talktime, hs_standby, hs_suspend, hs_band, hs_wifi, hs_email, hs_mms, hs_bluetooth, hs_memorycard, hs_internetbrows, hs_mp3player, hs_fmradio, hs_camera, hs_gps, hs_smartphone, hs_spare_c1, hs_spare_d1, hs_spare_n1, hs_allow_imei, hs_simtype, hs_idrestrict, hs_staffrestrict, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`hs_id, hs_make, hs_model, hs_feature_1, hs_feature_2, hs_feature_3, hs_feature_4, hs_weight, hs_talktime, hs_standby, hs_suspend, hs_band, hs_wifi, hs_email, hs_mms, hs_bluetooth, hs_memorycard, hs_internetbrows, hs_mp3player, hs_fmradio, hs_camera, hs_gps, hs_smartphone, hs_spare_c1, hs_spare_d1, hs_spare_n1, hs_allow_imei, hs_simtype, hs_idrestrict, hs_staffrestrict, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.hs_id, EXCLUDED.hs_make, EXCLUDED.hs_model, EXCLUDED.hs_feature_1, EXCLUDED.hs_feature_2, EXCLUDED.hs_feature_3, EXCLUDED.hs_feature_4, EXCLUDED.hs_weight, EXCLUDED.hs_talktime, EXCLUDED.hs_standby, EXCLUDED.hs_suspend, EXCLUDED.hs_band, EXCLUDED.hs_wifi, EXCLUDED.hs_email, EXCLUDED.hs_mms, EXCLUDED.hs_bluetooth, EXCLUDED.hs_memorycard, EXCLUDED.hs_internetbrows, EXCLUDED.hs_mp3player, EXCLUDED.hs_fmradio, EXCLUDED.hs_camera, EXCLUDED.hs_gps, EXCLUDED.hs_smartphone, EXCLUDED.hs_spare_c1, EXCLUDED.hs_spare_d1, EXCLUDED.hs_spare_n1, EXCLUDED.hs_allow_imei, EXCLUDED.hs_simtype, EXCLUDED.hs_idrestrict, EXCLUDED.hs_staffrestrict, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, h.HsID, h.HsMake, h.HsModel, h.HsFeature1, h.HsFeature2, h.HsFeature3, h.HsFeature4, h.HsWeight, h.HsTalktime, h.HsStandby, h.HsSuspend, h.HsBand, h.HsWifi, h.HsEmail, h.HsMms, h.HsBluetooth, h.HsMemorycard, h.HsInternetbrows, h.HsMp3player, h.HsFmradio, h.HsCamera, h.HsGps, h.HsSmartphone, h.HsSpareC1, h.HsSpareD1, h.HsSpareN1, h.HsAllowImei, h.HsSimtype, h.HsIdrestrict, h.HsStaffrestrict, h.EquinoxLrn, h.EquinoxSec)
	_, err = db.Exec(sqlstr, h.HsID, h.HsMake, h.HsModel, h.HsFeature1, h.HsFeature2, h.HsFeature3, h.HsFeature4, h.HsWeight, h.HsTalktime, h.HsStandby, h.HsSuspend, h.HsBand, h.HsWifi, h.HsEmail, h.HsMms, h.HsBluetooth, h.HsMemorycard, h.HsInternetbrows, h.HsMp3player, h.HsFmradio, h.HsCamera, h.HsGps, h.HsSmartphone, h.HsSpareC1, h.HsSpareD1, h.HsSpareN1, h.HsAllowImei, h.HsSimtype, h.HsIdrestrict, h.HsStaffrestrict, h.EquinoxLrn, h.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	h._exists = true

	return nil
}

// Delete deletes the Handset from the database.
func (h *Handset) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !h._exists {
		return nil
	}

	// if deleted, bail
	if h._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.handset WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, h.EquinoxLrn)
	_, err = db.Exec(sqlstr, h.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	h._deleted = true

	return nil
}

// HandsetByEquinoxLrn retrieves a row from 'equinox.handset' as a Handset.
//
// Generated from index 'handset_pkey'.
func HandsetByEquinoxLrn(db XODB, equinoxLrn int64) (*Handset, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`hs_id, hs_make, hs_model, hs_feature_1, hs_feature_2, hs_feature_3, hs_feature_4, hs_weight, hs_talktime, hs_standby, hs_suspend, hs_band, hs_wifi, hs_email, hs_mms, hs_bluetooth, hs_memorycard, hs_internetbrows, hs_mp3player, hs_fmradio, hs_camera, hs_gps, hs_smartphone, hs_spare_c1, hs_spare_d1, hs_spare_n1, hs_allow_imei, hs_simtype, hs_idrestrict, hs_staffrestrict, equinox_lrn, equinox_sec ` +
		`FROM equinox.handset ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	h := Handset{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&h.HsID, &h.HsMake, &h.HsModel, &h.HsFeature1, &h.HsFeature2, &h.HsFeature3, &h.HsFeature4, &h.HsWeight, &h.HsTalktime, &h.HsStandby, &h.HsSuspend, &h.HsBand, &h.HsWifi, &h.HsEmail, &h.HsMms, &h.HsBluetooth, &h.HsMemorycard, &h.HsInternetbrows, &h.HsMp3player, &h.HsFmradio, &h.HsCamera, &h.HsGps, &h.HsSmartphone, &h.HsSpareC1, &h.HsSpareD1, &h.HsSpareN1, &h.HsAllowImei, &h.HsSimtype, &h.HsIdrestrict, &h.HsStaffrestrict, &h.EquinoxLrn, &h.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &h, nil
}
