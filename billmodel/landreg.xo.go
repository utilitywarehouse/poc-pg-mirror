// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/lib/pq"
)

// Landreg represents a row from 'equinox.landreg'.
type Landreg struct {
	LrCustref       sql.NullString  `json:"lr_custref"`       // lr_custref
	LrSurname       sql.NullString  `json:"lr_surname"`       // lr_surname
	LrPostcode      sql.NullString  `json:"lr_postcode"`      // lr_postcode
	LrAMatchresult  sql.NullString  `json:"lr_a_matchresult"` // lr_a_matchresult
	LrTitleno       sql.NullString  `json:"lr_titleno"`       // lr_titleno
	LrNMatchresult  sql.NullString  `json:"lr_n_matchresult"` // lr_n_matchresult
	LrDateOut       pq.NullTime     `json:"lr_date_out"`      // lr_date_out
	LrDateIn        pq.NullTime     `json:"lr_date_in"`       // lr_date_in
	LrBillreference sql.NullString  `json:"lr_billreference"` // lr_billreference
	LrCommisvalue   sql.NullFloat64 `json:"lr_commisvalue"`   // lr_commisvalue
	LrQty           sql.NullInt64   `json:"lr_qty"`           // lr_qty
	LrMemo          sql.NullInt64   `json:"lr_memo"`          // lr_memo
	EquinoxLrn      int64           `json:"equinox_lrn"`      // equinox_lrn
	EquinoxSec      sql.NullInt64   `json:"equinox_sec"`      // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Landreg exists in the database.
func (l *Landreg) Exists() bool {
	return l._exists
}

// Deleted provides information if the Landreg has been deleted from the database.
func (l *Landreg) Deleted() bool {
	return l._deleted
}

// Insert inserts the Landreg to the database.
func (l *Landreg) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if l._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.landreg (` +
		`lr_custref, lr_surname, lr_postcode, lr_a_matchresult, lr_titleno, lr_n_matchresult, lr_date_out, lr_date_in, lr_billreference, lr_commisvalue, lr_qty, lr_memo, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, l.LrCustref, l.LrSurname, l.LrPostcode, l.LrAMatchresult, l.LrTitleno, l.LrNMatchresult, l.LrDateOut, l.LrDateIn, l.LrBillreference, l.LrCommisvalue, l.LrQty, l.LrMemo, l.EquinoxSec)
	err = db.QueryRow(sqlstr, l.LrCustref, l.LrSurname, l.LrPostcode, l.LrAMatchresult, l.LrTitleno, l.LrNMatchresult, l.LrDateOut, l.LrDateIn, l.LrBillreference, l.LrCommisvalue, l.LrQty, l.LrMemo, l.EquinoxSec).Scan(&l.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	l._exists = true

	return nil
}

// Update updates the Landreg in the database.
func (l *Landreg) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !l._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if l._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.landreg SET (` +
		`lr_custref, lr_surname, lr_postcode, lr_a_matchresult, lr_titleno, lr_n_matchresult, lr_date_out, lr_date_in, lr_billreference, lr_commisvalue, lr_qty, lr_memo, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13` +
		`) WHERE equinox_lrn = $14`

	// run query
	XOLog(sqlstr, l.LrCustref, l.LrSurname, l.LrPostcode, l.LrAMatchresult, l.LrTitleno, l.LrNMatchresult, l.LrDateOut, l.LrDateIn, l.LrBillreference, l.LrCommisvalue, l.LrQty, l.LrMemo, l.EquinoxSec, l.EquinoxLrn)
	_, err = db.Exec(sqlstr, l.LrCustref, l.LrSurname, l.LrPostcode, l.LrAMatchresult, l.LrTitleno, l.LrNMatchresult, l.LrDateOut, l.LrDateIn, l.LrBillreference, l.LrCommisvalue, l.LrQty, l.LrMemo, l.EquinoxSec, l.EquinoxLrn)
	return err
}

// Save saves the Landreg to the database.
func (l *Landreg) Save(db XODB) error {
	if l.Exists() {
		return l.Update(db)
	}

	return l.Insert(db)
}

// Upsert performs an upsert for Landreg.
//
// NOTE: PostgreSQL 9.5+ only
func (l *Landreg) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if l._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.landreg (` +
		`lr_custref, lr_surname, lr_postcode, lr_a_matchresult, lr_titleno, lr_n_matchresult, lr_date_out, lr_date_in, lr_billreference, lr_commisvalue, lr_qty, lr_memo, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`lr_custref, lr_surname, lr_postcode, lr_a_matchresult, lr_titleno, lr_n_matchresult, lr_date_out, lr_date_in, lr_billreference, lr_commisvalue, lr_qty, lr_memo, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.lr_custref, EXCLUDED.lr_surname, EXCLUDED.lr_postcode, EXCLUDED.lr_a_matchresult, EXCLUDED.lr_titleno, EXCLUDED.lr_n_matchresult, EXCLUDED.lr_date_out, EXCLUDED.lr_date_in, EXCLUDED.lr_billreference, EXCLUDED.lr_commisvalue, EXCLUDED.lr_qty, EXCLUDED.lr_memo, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, l.LrCustref, l.LrSurname, l.LrPostcode, l.LrAMatchresult, l.LrTitleno, l.LrNMatchresult, l.LrDateOut, l.LrDateIn, l.LrBillreference, l.LrCommisvalue, l.LrQty, l.LrMemo, l.EquinoxLrn, l.EquinoxSec)
	_, err = db.Exec(sqlstr, l.LrCustref, l.LrSurname, l.LrPostcode, l.LrAMatchresult, l.LrTitleno, l.LrNMatchresult, l.LrDateOut, l.LrDateIn, l.LrBillreference, l.LrCommisvalue, l.LrQty, l.LrMemo, l.EquinoxLrn, l.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	l._exists = true

	return nil
}

// Delete deletes the Landreg from the database.
func (l *Landreg) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !l._exists {
		return nil
	}

	// if deleted, bail
	if l._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.landreg WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, l.EquinoxLrn)
	_, err = db.Exec(sqlstr, l.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	l._deleted = true

	return nil
}

// LandregByEquinoxLrn retrieves a row from 'equinox.landreg' as a Landreg.
//
// Generated from index 'landreg_pkey'.
func LandregByEquinoxLrn(db XODB, equinoxLrn int64) (*Landreg, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`lr_custref, lr_surname, lr_postcode, lr_a_matchresult, lr_titleno, lr_n_matchresult, lr_date_out, lr_date_in, lr_billreference, lr_commisvalue, lr_qty, lr_memo, equinox_lrn, equinox_sec ` +
		`FROM equinox.landreg ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	l := Landreg{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&l.LrCustref, &l.LrSurname, &l.LrPostcode, &l.LrAMatchresult, &l.LrTitleno, &l.LrNMatchresult, &l.LrDateOut, &l.LrDateIn, &l.LrBillreference, &l.LrCommisvalue, &l.LrQty, &l.LrMemo, &l.EquinoxLrn, &l.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &l, nil
}
