// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"

	"github.com/lib/pq"
)

// Gappread represents a row from 'equinox.gappread'.
type Gappread struct {
	Gappvalread      sql.NullInt64  `json:"gappvalread"`      // gappvalread
	Gappvalreaddate  pq.NullTime    `json:"gappvalreaddate"`  // gappvalreaddate
	Gappvalreadsourc sql.NullString `json:"gappvalreadsourc"` // gappvalreadsourc
	Gappreadtype     sql.NullString `json:"gappreadtype"`     // gappreadtype
	Gappreadreason   sql.NullString `json:"gappreadreason"`   // gappreadreason
	Gappreadttz      sql.NullInt64  `json:"gappreadttz"`      // gappreadttz
	Gappanomaly      sql.NullString `json:"gappanomaly"`      // gappanomaly
	Gappaq           sql.NullInt64  `json:"gappaq"`           // gappaq
	EquinoxPrn       sql.NullInt64  `json:"equinox_prn"`      // equinox_prn
	EquinoxLrn       int64          `json:"equinox_lrn"`      // equinox_lrn
	EquinoxSec       sql.NullInt64  `json:"equinox_sec"`      // equinox_sec
}

func AllGappread(db XODB, callback func(x Gappread) bool) error {

	// sql query
	const sqlstr = `SELECT ` +
		`gappvalread, gappvalreaddate, gappvalreadsourc, gappreadtype, gappreadreason, gappreadttz, gappanomaly, gappaq, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.gappread `

	q, err := db.Query(sqlstr)

	if err != nil {
		return err
	}
	defer q.Close()

	// load results
	for q.Next() {
		g := Gappread{}

		// scan
		err = q.Scan(&g.Gappvalread, &g.Gappvalreaddate, &g.Gappvalreadsourc, &g.Gappreadtype, &g.Gappreadreason, &g.Gappreadttz, &g.Gappanomaly, &g.Gappaq, &g.EquinoxPrn, &g.EquinoxLrn, &g.EquinoxSec)
		if err != nil {
			return err
		}
		if !callback(g) {
			return nil
		}
	}

	return nil
}

// GappreadByEquinoxLrn retrieves a row from 'equinox.gappread' as a Gappread.
//
// Generated from index 'gappread_pkey'.
func GappreadByEquinoxLrn(db XODB, equinoxLrn int64) (*Gappread, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`gappvalread, gappvalreaddate, gappvalreadsourc, gappreadtype, gappreadreason, gappreadttz, gappanomaly, gappaq, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.gappread ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	g := Gappread{}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&g.Gappvalread, &g.Gappvalreaddate, &g.Gappvalreadsourc, &g.Gappreadtype, &g.Gappreadreason, &g.Gappreadttz, &g.Gappanomaly, &g.Gappaq, &g.EquinoxPrn, &g.EquinoxLrn, &g.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &g, nil
}
