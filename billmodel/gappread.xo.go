// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/lib/pq"
)

// Gappread represents a row from 'equinox.gappread'.
type Gappread struct {
	Gappvalread      sql.NullInt64  `json:"gappvalread"`      // gappvalread
	Gappvalreaddate  pq.NullTime    `json:"gappvalreaddate"`  // gappvalreaddate
	Gappvalreadsourc sql.NullString `json:"gappvalreadsourc"` // gappvalreadsourc
	Gappreadtype     sql.NullString `json:"gappreadtype"`     // gappreadtype
	Gappreadreason   sql.NullString `json:"gappreadreason"`   // gappreadreason
	Gappreadttz      sql.NullInt64  `json:"gappreadttz"`      // gappreadttz
	Gappanomaly      sql.NullString `json:"gappanomaly"`      // gappanomaly
	Gappaq           sql.NullInt64  `json:"gappaq"`           // gappaq
	EquinoxPrn       sql.NullInt64  `json:"equinox_prn"`      // equinox_prn
	EquinoxLrn       int64          `json:"equinox_lrn"`      // equinox_lrn
	EquinoxSec       sql.NullInt64  `json:"equinox_sec"`      // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Gappread exists in the database.
func (g *Gappread) Exists() bool {
	return g._exists
}

// Deleted provides information if the Gappread has been deleted from the database.
func (g *Gappread) Deleted() bool {
	return g._deleted
}

// Insert inserts the Gappread to the database.
func (g *Gappread) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if g._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.gappread (` +
		`gappvalread, gappvalreaddate, gappvalreadsourc, gappreadtype, gappreadreason, gappreadttz, gappanomaly, gappaq, equinox_prn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, g.Gappvalread, g.Gappvalreaddate, g.Gappvalreadsourc, g.Gappreadtype, g.Gappreadreason, g.Gappreadttz, g.Gappanomaly, g.Gappaq, g.EquinoxPrn, g.EquinoxSec)
	err = db.QueryRow(sqlstr, g.Gappvalread, g.Gappvalreaddate, g.Gappvalreadsourc, g.Gappreadtype, g.Gappreadreason, g.Gappreadttz, g.Gappanomaly, g.Gappaq, g.EquinoxPrn, g.EquinoxSec).Scan(&g.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	g._exists = true

	return nil
}

// Update updates the Gappread in the database.
func (g *Gappread) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !g._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if g._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.gappread SET (` +
		`gappvalread, gappvalreaddate, gappvalreadsourc, gappreadtype, gappreadreason, gappreadttz, gappanomaly, gappaq, equinox_prn, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10` +
		`) WHERE equinox_lrn = $11`

	// run query
	XOLog(sqlstr, g.Gappvalread, g.Gappvalreaddate, g.Gappvalreadsourc, g.Gappreadtype, g.Gappreadreason, g.Gappreadttz, g.Gappanomaly, g.Gappaq, g.EquinoxPrn, g.EquinoxSec, g.EquinoxLrn)
	_, err = db.Exec(sqlstr, g.Gappvalread, g.Gappvalreaddate, g.Gappvalreadsourc, g.Gappreadtype, g.Gappreadreason, g.Gappreadttz, g.Gappanomaly, g.Gappaq, g.EquinoxPrn, g.EquinoxSec, g.EquinoxLrn)
	return err
}

// Save saves the Gappread to the database.
func (g *Gappread) Save(db XODB) error {
	if g.Exists() {
		return g.Update(db)
	}

	return g.Insert(db)
}

// Upsert performs an upsert for Gappread.
//
// NOTE: PostgreSQL 9.5+ only
func (g *Gappread) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if g._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.gappread (` +
		`gappvalread, gappvalreaddate, gappvalreadsourc, gappreadtype, gappreadreason, gappreadttz, gappanomaly, gappaq, equinox_prn, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`gappvalread, gappvalreaddate, gappvalreadsourc, gappreadtype, gappreadreason, gappreadttz, gappanomaly, gappaq, equinox_prn, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.gappvalread, EXCLUDED.gappvalreaddate, EXCLUDED.gappvalreadsourc, EXCLUDED.gappreadtype, EXCLUDED.gappreadreason, EXCLUDED.gappreadttz, EXCLUDED.gappanomaly, EXCLUDED.gappaq, EXCLUDED.equinox_prn, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, g.Gappvalread, g.Gappvalreaddate, g.Gappvalreadsourc, g.Gappreadtype, g.Gappreadreason, g.Gappreadttz, g.Gappanomaly, g.Gappaq, g.EquinoxPrn, g.EquinoxLrn, g.EquinoxSec)
	_, err = db.Exec(sqlstr, g.Gappvalread, g.Gappvalreaddate, g.Gappvalreadsourc, g.Gappreadtype, g.Gappreadreason, g.Gappreadttz, g.Gappanomaly, g.Gappaq, g.EquinoxPrn, g.EquinoxLrn, g.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	g._exists = true

	return nil
}

// Delete deletes the Gappread from the database.
func (g *Gappread) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !g._exists {
		return nil
	}

	// if deleted, bail
	if g._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.gappread WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, g.EquinoxLrn)
	_, err = db.Exec(sqlstr, g.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	g._deleted = true

	return nil
}

// GappreadByEquinoxLrn retrieves a row from 'equinox.gappread' as a Gappread.
//
// Generated from index 'gappread_pkey'.
func GappreadByEquinoxLrn(db XODB, equinoxLrn int64) (*Gappread, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`gappvalread, gappvalreaddate, gappvalreadsourc, gappreadtype, gappreadreason, gappreadttz, gappanomaly, gappaq, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.gappread ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	g := Gappread{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&g.Gappvalread, &g.Gappvalreaddate, &g.Gappvalreadsourc, &g.Gappreadtype, &g.Gappreadreason, &g.Gappreadttz, &g.Gappanomaly, &g.Gappaq, &g.EquinoxPrn, &g.EquinoxLrn, &g.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &g, nil
}
