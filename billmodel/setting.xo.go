// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"

	"github.com/lib/pq"
)

// Setting represents a row from 'equinox.settings'.
type Setting struct {
	Slookupkey       sql.NullString `json:"slookupkey"`       // slookupkey
	Svaluelive       sql.NullString `json:"svaluelive"`       // svaluelive
	Svaluetest       sql.NullString `json:"svaluetest"`       // svaluetest
	Lastmodifieddate pq.NullTime    `json:"lastmodifieddate"` // lastmodifieddate
	Lastmodifiedtime pq.NullTime    `json:"lastmodifiedtime"` // lastmodifiedtime
	Lastmodifiedby   sql.NullString `json:"lastmodifiedby"`   // lastmodifiedby
	Svalueliveprev   sql.NullString `json:"svalueliveprev"`   // svalueliveprev
	Notes            sql.NullInt64  `json:"notes"`            // notes
	EquinoxLrn       int64          `json:"equinox_lrn"`      // equinox_lrn
	EquinoxSec       sql.NullInt64  `json:"equinox_sec"`      // equinox_sec
}

func AllSetting(db XODB, callback func(x Setting) bool) error {

	// sql query
	const sqlstr = `SELECT ` +
		`slookupkey, svaluelive, svaluetest, lastmodifieddate, lastmodifiedtime, lastmodifiedby, svalueliveprev, notes, equinox_lrn, equinox_sec ` +
		`FROM equinox.settings `

	q, err := db.Query(sqlstr)

	if err != nil {
		return err
	}
	defer q.Close()

	// load results
	for q.Next() {
		s := Setting{}

		// scan
		err = q.Scan(&s.Slookupkey, &s.Svaluelive, &s.Svaluetest, &s.Lastmodifieddate, &s.Lastmodifiedtime, &s.Lastmodifiedby, &s.Svalueliveprev, &s.Notes, &s.EquinoxLrn, &s.EquinoxSec)
		if err != nil {
			return err
		}
		if !callback(s) {
			return nil
		}
	}

	return nil
}

// SettingByEquinoxLrn retrieves a row from 'equinox.settings' as a Setting.
//
// Generated from index 'settings_pkey'.
func SettingByEquinoxLrn(db XODB, equinoxLrn int64) (*Setting, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`slookupkey, svaluelive, svaluetest, lastmodifieddate, lastmodifiedtime, lastmodifiedby, svalueliveprev, notes, equinox_lrn, equinox_sec ` +
		`FROM equinox.settings ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	s := Setting{}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&s.Slookupkey, &s.Svaluelive, &s.Svaluetest, &s.Lastmodifieddate, &s.Lastmodifiedtime, &s.Lastmodifiedby, &s.Svalueliveprev, &s.Notes, &s.EquinoxLrn, &s.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &s, nil
}
