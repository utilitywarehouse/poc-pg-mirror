// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import "database/sql"

// Allowed represents a row from 'equinox.allowed'.
type Allowed struct {
	Allowedmeter  sql.NullString `json:"allowedmeter"`  // allowedmeter
	Allowedexecid sql.NullString `json:"allowedexecid"` // allowedexecid
	EquinoxLrn    int64          `json:"equinox_lrn"`   // equinox_lrn
	EquinoxSec    sql.NullInt64  `json:"equinox_sec"`   // equinox_sec
}

func AllAllowed(db XODB, callback func(x Allowed) bool) error {

	// sql query
	const sqlstr = `SELECT ` +
		`allowedmeter, allowedexecid, equinox_lrn, equinox_sec ` +
		`FROM equinox.allowed `

	q, err := db.Query(sqlstr)

	if err != nil {
		return err
	}
	defer q.Close()

	// load results
	for q.Next() {
		a := Allowed{}

		// scan
		err = q.Scan(&a.Allowedmeter, &a.Allowedexecid, &a.EquinoxLrn, &a.EquinoxSec)
		if err != nil {
			return err
		}
		if !callback(a) {
			return nil
		}
	}

	return nil
}

// AllowedByEquinoxLrn retrieves a row from 'equinox.allowed' as a Allowed.
//
// Generated from index 'allowed_pkey'.
func AllowedByEquinoxLrn(db XODB, equinoxLrn int64) (*Allowed, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`allowedmeter, allowedexecid, equinox_lrn, equinox_sec ` +
		`FROM equinox.allowed ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	a := Allowed{}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&a.Allowedmeter, &a.Allowedexecid, &a.EquinoxLrn, &a.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &a, nil
}
