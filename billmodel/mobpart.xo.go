// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// Mobpart represents a row from 'equinox.mobpart'.
type Mobpart struct {
	Mobpartupc   sql.NullString `json:"mobpartupc"`   // mobpartupc
	Mobpartmake  sql.NullString `json:"mobpartmake"`  // mobpartmake
	Mobpartmodel sql.NullString `json:"mobpartmodel"` // mobpartmodel
	EquinoxPrn   sql.NullInt64  `json:"equinox_prn"`  // equinox_prn
	EquinoxLrn   int64          `json:"equinox_lrn"`  // equinox_lrn
	EquinoxSec   sql.NullInt64  `json:"equinox_sec"`  // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Mobpart exists in the database.
func (m *Mobpart) Exists() bool {
	return m._exists
}

// Deleted provides information if the Mobpart has been deleted from the database.
func (m *Mobpart) Deleted() bool {
	return m._deleted
}

// Insert inserts the Mobpart to the database.
func (m *Mobpart) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if m._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.mobpart (` +
		`mobpartupc, mobpartmake, mobpartmodel, equinox_prn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, m.Mobpartupc, m.Mobpartmake, m.Mobpartmodel, m.EquinoxPrn, m.EquinoxSec)
	err = db.QueryRow(sqlstr, m.Mobpartupc, m.Mobpartmake, m.Mobpartmodel, m.EquinoxPrn, m.EquinoxSec).Scan(&m.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	m._exists = true

	return nil
}

// Update updates the Mobpart in the database.
func (m *Mobpart) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !m._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if m._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.mobpart SET (` +
		`mobpartupc, mobpartmake, mobpartmodel, equinox_prn, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5` +
		`) WHERE equinox_lrn = $6`

	// run query
	XOLog(sqlstr, m.Mobpartupc, m.Mobpartmake, m.Mobpartmodel, m.EquinoxPrn, m.EquinoxSec, m.EquinoxLrn)
	_, err = db.Exec(sqlstr, m.Mobpartupc, m.Mobpartmake, m.Mobpartmodel, m.EquinoxPrn, m.EquinoxSec, m.EquinoxLrn)
	return err
}

// Save saves the Mobpart to the database.
func (m *Mobpart) Save(db XODB) error {
	if m.Exists() {
		return m.Update(db)
	}

	return m.Insert(db)
}

// Upsert performs an upsert for Mobpart.
//
// NOTE: PostgreSQL 9.5+ only
func (m *Mobpart) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if m._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.mobpart (` +
		`mobpartupc, mobpartmake, mobpartmodel, equinox_prn, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`mobpartupc, mobpartmake, mobpartmodel, equinox_prn, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.mobpartupc, EXCLUDED.mobpartmake, EXCLUDED.mobpartmodel, EXCLUDED.equinox_prn, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, m.Mobpartupc, m.Mobpartmake, m.Mobpartmodel, m.EquinoxPrn, m.EquinoxLrn, m.EquinoxSec)
	_, err = db.Exec(sqlstr, m.Mobpartupc, m.Mobpartmake, m.Mobpartmodel, m.EquinoxPrn, m.EquinoxLrn, m.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	m._exists = true

	return nil
}

// Delete deletes the Mobpart from the database.
func (m *Mobpart) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !m._exists {
		return nil
	}

	// if deleted, bail
	if m._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.mobpart WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, m.EquinoxLrn)
	_, err = db.Exec(sqlstr, m.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	m._deleted = true

	return nil
}

// MobpartByEquinoxLrn retrieves a row from 'equinox.mobpart' as a Mobpart.
//
// Generated from index 'mobpart_pkey'.
func MobpartByEquinoxLrn(db XODB, equinoxLrn int64) (*Mobpart, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`mobpartupc, mobpartmake, mobpartmodel, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.mobpart ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	m := Mobpart{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&m.Mobpartupc, &m.Mobpartmake, &m.Mobpartmodel, &m.EquinoxPrn, &m.EquinoxLrn, &m.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &m, nil
}
