// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// Minibn represents a row from 'equinox.minibns'.
type Minibn struct {
	Minischeme      sql.NullFloat64 `json:"minischeme"`      // minischeme
	Miniidbonus     sql.NullFloat64 `json:"miniidbonus"`     // miniidbonus
	Minicustbonus   sql.NullFloat64 `json:"minicustbonus"`   // minicustbonus
	Minibonuscap    sql.NullFloat64 `json:"minibonuscap"`    // minibonuscap
	Miniglbonus     sql.NullFloat64 `json:"miniglbonus"`     // miniglbonus
	Minisglbonus    sql.NullFloat64 `json:"minisglbonus"`    // minisglbonus
	Minidescription sql.NullString  `json:"minidescription"` // minidescription
	EquinoxLrn      int64           `json:"equinox_lrn"`     // equinox_lrn
	EquinoxSec      sql.NullInt64   `json:"equinox_sec"`     // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Minibn exists in the database.
func (m *Minibn) Exists() bool {
	return m._exists
}

// Deleted provides information if the Minibn has been deleted from the database.
func (m *Minibn) Deleted() bool {
	return m._deleted
}

// Insert inserts the Minibn to the database.
func (m *Minibn) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if m._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.minibns (` +
		`minischeme, miniidbonus, minicustbonus, minibonuscap, miniglbonus, minisglbonus, minidescription, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, m.Minischeme, m.Miniidbonus, m.Minicustbonus, m.Minibonuscap, m.Miniglbonus, m.Minisglbonus, m.Minidescription, m.EquinoxSec)
	err = db.QueryRow(sqlstr, m.Minischeme, m.Miniidbonus, m.Minicustbonus, m.Minibonuscap, m.Miniglbonus, m.Minisglbonus, m.Minidescription, m.EquinoxSec).Scan(&m.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	m._exists = true

	return nil
}

// Update updates the Minibn in the database.
func (m *Minibn) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !m._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if m._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.minibns SET (` +
		`minischeme, miniidbonus, minicustbonus, minibonuscap, miniglbonus, minisglbonus, minidescription, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`) WHERE equinox_lrn = $9`

	// run query
	XOLog(sqlstr, m.Minischeme, m.Miniidbonus, m.Minicustbonus, m.Minibonuscap, m.Miniglbonus, m.Minisglbonus, m.Minidescription, m.EquinoxSec, m.EquinoxLrn)
	_, err = db.Exec(sqlstr, m.Minischeme, m.Miniidbonus, m.Minicustbonus, m.Minibonuscap, m.Miniglbonus, m.Minisglbonus, m.Minidescription, m.EquinoxSec, m.EquinoxLrn)
	return err
}

// Save saves the Minibn to the database.
func (m *Minibn) Save(db XODB) error {
	if m.Exists() {
		return m.Update(db)
	}

	return m.Insert(db)
}

// Upsert performs an upsert for Minibn.
//
// NOTE: PostgreSQL 9.5+ only
func (m *Minibn) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if m._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.minibns (` +
		`minischeme, miniidbonus, minicustbonus, minibonuscap, miniglbonus, minisglbonus, minidescription, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`minischeme, miniidbonus, minicustbonus, minibonuscap, miniglbonus, minisglbonus, minidescription, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.minischeme, EXCLUDED.miniidbonus, EXCLUDED.minicustbonus, EXCLUDED.minibonuscap, EXCLUDED.miniglbonus, EXCLUDED.minisglbonus, EXCLUDED.minidescription, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, m.Minischeme, m.Miniidbonus, m.Minicustbonus, m.Minibonuscap, m.Miniglbonus, m.Minisglbonus, m.Minidescription, m.EquinoxLrn, m.EquinoxSec)
	_, err = db.Exec(sqlstr, m.Minischeme, m.Miniidbonus, m.Minicustbonus, m.Minibonuscap, m.Miniglbonus, m.Minisglbonus, m.Minidescription, m.EquinoxLrn, m.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	m._exists = true

	return nil
}

// Delete deletes the Minibn from the database.
func (m *Minibn) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !m._exists {
		return nil
	}

	// if deleted, bail
	if m._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.minibns WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, m.EquinoxLrn)
	_, err = db.Exec(sqlstr, m.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	m._deleted = true

	return nil
}

// MinibnByEquinoxLrn retrieves a row from 'equinox.minibns' as a Minibn.
//
// Generated from index 'minibns_pkey'.
func MinibnByEquinoxLrn(db XODB, equinoxLrn int64) (*Minibn, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`minischeme, miniidbonus, minicustbonus, minibonuscap, miniglbonus, minisglbonus, minidescription, equinox_lrn, equinox_sec ` +
		`FROM equinox.minibns ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	m := Minibn{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&m.Minischeme, &m.Miniidbonus, &m.Minicustbonus, &m.Minibonuscap, &m.Miniglbonus, &m.Minisglbonus, &m.Minidescription, &m.EquinoxLrn, &m.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &m, nil
}
