// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/lib/pq"
)

// Ppfile represents a row from 'equinox.ppfiles'.
type Ppfile struct {
	Ppfilename     sql.NullString  `json:"ppfilename"`     // ppfilename
	Ppfiletype     sql.NullString  `json:"ppfiletype"`     // ppfiletype
	Ppfiledate     pq.NullTime     `json:"ppfiledate"`     // ppfiledate
	Ppfilenopays   sql.NullInt64   `json:"ppfilenopays"`   // ppfilenopays
	Ppfilesupplier sql.NullString  `json:"ppfilesupplier"` // ppfilesupplier
	Ppfiletotal    sql.NullFloat64 `json:"ppfiletotal"`    // ppfiletotal
	Ppfilecashrec  sql.NullFloat64 `json:"ppfilecashrec"`  // ppfilecashrec
	Ppfilelastupd  pq.NullTime     `json:"ppfilelastupd"`  // ppfilelastupd
	Ppfilelastusr  sql.NullString  `json:"ppfilelastusr"`  // ppfilelastusr
	EquinoxLrn     int64           `json:"equinox_lrn"`    // equinox_lrn
	EquinoxSec     sql.NullInt64   `json:"equinox_sec"`    // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Ppfile exists in the database.
func (p *Ppfile) Exists() bool {
	return p._exists
}

// Deleted provides information if the Ppfile has been deleted from the database.
func (p *Ppfile) Deleted() bool {
	return p._deleted
}

// Insert inserts the Ppfile to the database.
func (p *Ppfile) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if p._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.ppfiles (` +
		`ppfilename, ppfiletype, ppfiledate, ppfilenopays, ppfilesupplier, ppfiletotal, ppfilecashrec, ppfilelastupd, ppfilelastusr, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, p.Ppfilename, p.Ppfiletype, p.Ppfiledate, p.Ppfilenopays, p.Ppfilesupplier, p.Ppfiletotal, p.Ppfilecashrec, p.Ppfilelastupd, p.Ppfilelastusr, p.EquinoxSec)
	err = db.QueryRow(sqlstr, p.Ppfilename, p.Ppfiletype, p.Ppfiledate, p.Ppfilenopays, p.Ppfilesupplier, p.Ppfiletotal, p.Ppfilecashrec, p.Ppfilelastupd, p.Ppfilelastusr, p.EquinoxSec).Scan(&p.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	p._exists = true

	return nil
}

// Update updates the Ppfile in the database.
func (p *Ppfile) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if p._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.ppfiles SET (` +
		`ppfilename, ppfiletype, ppfiledate, ppfilenopays, ppfilesupplier, ppfiletotal, ppfilecashrec, ppfilelastupd, ppfilelastusr, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10` +
		`) WHERE equinox_lrn = $11`

	// run query
	XOLog(sqlstr, p.Ppfilename, p.Ppfiletype, p.Ppfiledate, p.Ppfilenopays, p.Ppfilesupplier, p.Ppfiletotal, p.Ppfilecashrec, p.Ppfilelastupd, p.Ppfilelastusr, p.EquinoxSec, p.EquinoxLrn)
	_, err = db.Exec(sqlstr, p.Ppfilename, p.Ppfiletype, p.Ppfiledate, p.Ppfilenopays, p.Ppfilesupplier, p.Ppfiletotal, p.Ppfilecashrec, p.Ppfilelastupd, p.Ppfilelastusr, p.EquinoxSec, p.EquinoxLrn)
	return err
}

// Save saves the Ppfile to the database.
func (p *Ppfile) Save(db XODB) error {
	if p.Exists() {
		return p.Update(db)
	}

	return p.Insert(db)
}

// Upsert performs an upsert for Ppfile.
//
// NOTE: PostgreSQL 9.5+ only
func (p *Ppfile) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if p._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.ppfiles (` +
		`ppfilename, ppfiletype, ppfiledate, ppfilenopays, ppfilesupplier, ppfiletotal, ppfilecashrec, ppfilelastupd, ppfilelastusr, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`ppfilename, ppfiletype, ppfiledate, ppfilenopays, ppfilesupplier, ppfiletotal, ppfilecashrec, ppfilelastupd, ppfilelastusr, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.ppfilename, EXCLUDED.ppfiletype, EXCLUDED.ppfiledate, EXCLUDED.ppfilenopays, EXCLUDED.ppfilesupplier, EXCLUDED.ppfiletotal, EXCLUDED.ppfilecashrec, EXCLUDED.ppfilelastupd, EXCLUDED.ppfilelastusr, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, p.Ppfilename, p.Ppfiletype, p.Ppfiledate, p.Ppfilenopays, p.Ppfilesupplier, p.Ppfiletotal, p.Ppfilecashrec, p.Ppfilelastupd, p.Ppfilelastusr, p.EquinoxLrn, p.EquinoxSec)
	_, err = db.Exec(sqlstr, p.Ppfilename, p.Ppfiletype, p.Ppfiledate, p.Ppfilenopays, p.Ppfilesupplier, p.Ppfiletotal, p.Ppfilecashrec, p.Ppfilelastupd, p.Ppfilelastusr, p.EquinoxLrn, p.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	p._exists = true

	return nil
}

// Delete deletes the Ppfile from the database.
func (p *Ppfile) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return nil
	}

	// if deleted, bail
	if p._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.ppfiles WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, p.EquinoxLrn)
	_, err = db.Exec(sqlstr, p.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	p._deleted = true

	return nil
}

// PpfileByEquinoxLrn retrieves a row from 'equinox.ppfiles' as a Ppfile.
//
// Generated from index 'ppfiles_pkey'.
func PpfileByEquinoxLrn(db XODB, equinoxLrn int64) (*Ppfile, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`ppfilename, ppfiletype, ppfiledate, ppfilenopays, ppfilesupplier, ppfiletotal, ppfilecashrec, ppfilelastupd, ppfilelastusr, equinox_lrn, equinox_sec ` +
		`FROM equinox.ppfiles ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	p := Ppfile{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&p.Ppfilename, &p.Ppfiletype, &p.Ppfiledate, &p.Ppfilenopays, &p.Ppfilesupplier, &p.Ppfiletotal, &p.Ppfilecashrec, &p.Ppfilelastupd, &p.Ppfilelastusr, &p.EquinoxLrn, &p.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &p, nil
}
