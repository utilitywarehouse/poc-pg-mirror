// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import "database/sql"

// Crmsblok represents a row from 'equinox.crmsblok'.
type Crmsblok struct {
	Crmsblkno      sql.NullInt64  `json:"crmsblkno"`      // crmsblkno
	Crmsblkdesc    sql.NullString `json:"crmsblkdesc"`    // crmsblkdesc
	Crmsblkstartok sql.NullString `json:"crmsblkstartok"` // crmsblkstartok
	Crmsblkstpproc sql.NullInt64  `json:"crmsblkstpproc"` // crmsblkstpproc
	Crmsblkdepends sql.NullString `json:"crmsblkdepends"` // crmsblkdepends
	EquinoxLrn     int64          `json:"equinox_lrn"`    // equinox_lrn
	EquinoxSec     sql.NullInt64  `json:"equinox_sec"`    // equinox_sec
}

func AllCrmsblok(db XODB, callback func(x Crmsblok) bool) error {

	// sql query
	const sqlstr = `SELECT ` +
		`crmsblkno, crmsblkdesc, crmsblkstartok, crmsblkstpproc, crmsblkdepends, equinox_lrn, equinox_sec ` +
		`FROM equinox.crmsblok `

	q, err := db.Query(sqlstr)

	if err != nil {
		return err
	}
	defer q.Close()

	// load results
	for q.Next() {
		c := Crmsblok{}

		// scan
		err = q.Scan(&c.Crmsblkno, &c.Crmsblkdesc, &c.Crmsblkstartok, &c.Crmsblkstpproc, &c.Crmsblkdepends, &c.EquinoxLrn, &c.EquinoxSec)
		if err != nil {
			return err
		}
		if !callback(c) {
			return nil
		}
	}

	return nil
}

// CrmsblokByEquinoxLrn retrieves a row from 'equinox.crmsblok' as a Crmsblok.
//
// Generated from index 'crmsblok_pkey'.
func CrmsblokByEquinoxLrn(db XODB, equinoxLrn int64) (*Crmsblok, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`crmsblkno, crmsblkdesc, crmsblkstartok, crmsblkstpproc, crmsblkdepends, equinox_lrn, equinox_sec ` +
		`FROM equinox.crmsblok ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	c := Crmsblok{}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&c.Crmsblkno, &c.Crmsblkdesc, &c.Crmsblkstartok, &c.Crmsblkstpproc, &c.Crmsblkdepends, &c.EquinoxLrn, &c.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &c, nil
}
