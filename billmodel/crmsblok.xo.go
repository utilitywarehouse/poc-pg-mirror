// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// Crmsblok represents a row from 'equinox.crmsblok'.
type Crmsblok struct {
	Crmsblkno      sql.NullInt64  `json:"crmsblkno"`      // crmsblkno
	Crmsblkdesc    sql.NullString `json:"crmsblkdesc"`    // crmsblkdesc
	Crmsblkstartok sql.NullString `json:"crmsblkstartok"` // crmsblkstartok
	Crmsblkstpproc sql.NullInt64  `json:"crmsblkstpproc"` // crmsblkstpproc
	Crmsblkdepends sql.NullString `json:"crmsblkdepends"` // crmsblkdepends
	EquinoxLrn     int64          `json:"equinox_lrn"`    // equinox_lrn
	EquinoxSec     sql.NullInt64  `json:"equinox_sec"`    // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Crmsblok exists in the database.
func (c *Crmsblok) Exists() bool {
	return c._exists
}

// Deleted provides information if the Crmsblok has been deleted from the database.
func (c *Crmsblok) Deleted() bool {
	return c._deleted
}

// Insert inserts the Crmsblok to the database.
func (c *Crmsblok) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.crmsblok (` +
		`crmsblkno, crmsblkdesc, crmsblkstartok, crmsblkstpproc, crmsblkdepends, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, c.Crmsblkno, c.Crmsblkdesc, c.Crmsblkstartok, c.Crmsblkstpproc, c.Crmsblkdepends, c.EquinoxSec)
	err = db.QueryRow(sqlstr, c.Crmsblkno, c.Crmsblkdesc, c.Crmsblkstartok, c.Crmsblkstpproc, c.Crmsblkdepends, c.EquinoxSec).Scan(&c.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Update updates the Crmsblok in the database.
func (c *Crmsblok) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if c._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.crmsblok SET (` +
		`crmsblkno, crmsblkdesc, crmsblkstartok, crmsblkstpproc, crmsblkdepends, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6` +
		`) WHERE equinox_lrn = $7`

	// run query
	XOLog(sqlstr, c.Crmsblkno, c.Crmsblkdesc, c.Crmsblkstartok, c.Crmsblkstpproc, c.Crmsblkdepends, c.EquinoxSec, c.EquinoxLrn)
	_, err = db.Exec(sqlstr, c.Crmsblkno, c.Crmsblkdesc, c.Crmsblkstartok, c.Crmsblkstpproc, c.Crmsblkdepends, c.EquinoxSec, c.EquinoxLrn)
	return err
}

// Save saves the Crmsblok to the database.
func (c *Crmsblok) Save(db XODB) error {
	if c.Exists() {
		return c.Update(db)
	}

	return c.Insert(db)
}

// Upsert performs an upsert for Crmsblok.
//
// NOTE: PostgreSQL 9.5+ only
func (c *Crmsblok) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.crmsblok (` +
		`crmsblkno, crmsblkdesc, crmsblkstartok, crmsblkstpproc, crmsblkdepends, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`crmsblkno, crmsblkdesc, crmsblkstartok, crmsblkstpproc, crmsblkdepends, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.crmsblkno, EXCLUDED.crmsblkdesc, EXCLUDED.crmsblkstartok, EXCLUDED.crmsblkstpproc, EXCLUDED.crmsblkdepends, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, c.Crmsblkno, c.Crmsblkdesc, c.Crmsblkstartok, c.Crmsblkstpproc, c.Crmsblkdepends, c.EquinoxLrn, c.EquinoxSec)
	_, err = db.Exec(sqlstr, c.Crmsblkno, c.Crmsblkdesc, c.Crmsblkstartok, c.Crmsblkstpproc, c.Crmsblkdepends, c.EquinoxLrn, c.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Delete deletes the Crmsblok from the database.
func (c *Crmsblok) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return nil
	}

	// if deleted, bail
	if c._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.crmsblok WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, c.EquinoxLrn)
	_, err = db.Exec(sqlstr, c.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	c._deleted = true

	return nil
}

// CrmsblokByEquinoxLrn retrieves a row from 'equinox.crmsblok' as a Crmsblok.
//
// Generated from index 'crmsblok_pkey'.
func CrmsblokByEquinoxLrn(db XODB, equinoxLrn int64) (*Crmsblok, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`crmsblkno, crmsblkdesc, crmsblkstartok, crmsblkstpproc, crmsblkdepends, equinox_lrn, equinox_sec ` +
		`FROM equinox.crmsblok ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	c := Crmsblok{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&c.Crmsblkno, &c.Crmsblkdesc, &c.Crmsblkstartok, &c.Crmsblkstpproc, &c.Crmsblkdepends, &c.EquinoxLrn, &c.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &c, nil
}
