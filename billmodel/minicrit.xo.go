// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import "database/sql"

// Minicrit represents a row from 'equinox.minicrit'.
type Minicrit struct {
	Minicrcriteriano sql.NullInt64 `json:"minicrcriteriano"` // minicrcriteriano
	Minicrcustomers  sql.NullInt64 `json:"minicrcustomers"`  // minicrcustomers
	Minicrids        sql.NullInt64 `json:"minicrids"`        // minicrids
	EquinoxPrn       sql.NullInt64 `json:"equinox_prn"`      // equinox_prn
	EquinoxLrn       int64         `json:"equinox_lrn"`      // equinox_lrn
	EquinoxSec       sql.NullInt64 `json:"equinox_sec"`      // equinox_sec
}

func AllMinicrit(db XODB, callback func(x Minicrit) bool) error {

	// sql query
	const sqlstr = `SELECT ` +
		`minicrcriteriano, minicrcustomers, minicrids, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.minicrit `

	q, err := db.Query(sqlstr)

	if err != nil {
		return err
	}
	defer q.Close()

	// load results
	for q.Next() {
		m := Minicrit{}

		// scan
		err = q.Scan(&m.Minicrcriteriano, &m.Minicrcustomers, &m.Minicrids, &m.EquinoxPrn, &m.EquinoxLrn, &m.EquinoxSec)
		if err != nil {
			return err
		}
		if !callback(m) {
			return nil
		}
	}

	return nil
}

// MinicritByEquinoxLrn retrieves a row from 'equinox.minicrit' as a Minicrit.
//
// Generated from index 'minicrit_pkey'.
func MinicritByEquinoxLrn(db XODB, equinoxLrn int64) (*Minicrit, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`minicrcriteriano, minicrcustomers, minicrids, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.minicrit ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	m := Minicrit{}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&m.Minicrcriteriano, &m.Minicrcustomers, &m.Minicrids, &m.EquinoxPrn, &m.EquinoxLrn, &m.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &m, nil
}
