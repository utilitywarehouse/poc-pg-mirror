// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"

	"github.com/lib/pq"
)

// Ccfield represents a row from 'equinox.ccfields'.
type Ccfield struct {
	Ccfieldname    sql.NullString  `json:"ccfieldname"`    // ccfieldname
	Ccfdescription sql.NullString  `json:"ccfdescription"` // ccfdescription
	Ccfcontents    sql.NullString  `json:"ccfcontents"`    // ccfcontents
	Ccsparec1      sql.NullString  `json:"ccsparec1"`      // ccsparec1
	Ccsparec2      sql.NullString  `json:"ccsparec2"`      // ccsparec2
	Ccsparec3      sql.NullString  `json:"ccsparec3"`      // ccsparec3
	Ccsparen1      sql.NullFloat64 `json:"ccsparen1"`      // ccsparen1
	Ccsparen2      sql.NullFloat64 `json:"ccsparen2"`      // ccsparen2
	Ccspared1      pq.NullTime     `json:"ccspared1"`      // ccspared1
	EquinoxPrn     sql.NullInt64   `json:"equinox_prn"`    // equinox_prn
	EquinoxLrn     int64           `json:"equinox_lrn"`    // equinox_lrn
	EquinoxSec     sql.NullInt64   `json:"equinox_sec"`    // equinox_sec
}

func AllCcfield(db XODB, callback func(x Ccfield) bool) error {

	// sql query
	const sqlstr = `SELECT ` +
		`ccfieldname, ccfdescription, ccfcontents, ccsparec1, ccsparec2, ccsparec3, ccsparen1, ccsparen2, ccspared1, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.ccfields `

	q, err := db.Query(sqlstr)

	if err != nil {
		return err
	}
	defer q.Close()

	// load results
	for q.Next() {
		c := Ccfield{}

		// scan
		err = q.Scan(&c.Ccfieldname, &c.Ccfdescription, &c.Ccfcontents, &c.Ccsparec1, &c.Ccsparec2, &c.Ccsparec3, &c.Ccsparen1, &c.Ccsparen2, &c.Ccspared1, &c.EquinoxPrn, &c.EquinoxLrn, &c.EquinoxSec)
		if err != nil {
			return err
		}
		if !callback(c) {
			return nil
		}
	}

	return nil
}

// CcfieldByEquinoxLrn retrieves a row from 'equinox.ccfields' as a Ccfield.
//
// Generated from index 'ccfields_pkey'.
func CcfieldByEquinoxLrn(db XODB, equinoxLrn int64) (*Ccfield, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`ccfieldname, ccfdescription, ccfcontents, ccsparec1, ccsparec2, ccsparec3, ccsparen1, ccsparen2, ccspared1, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.ccfields ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	c := Ccfield{}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&c.Ccfieldname, &c.Ccfdescription, &c.Ccfcontents, &c.Ccsparec1, &c.Ccsparec2, &c.Ccsparec3, &c.Ccsparen1, &c.Ccsparen2, &c.Ccspared1, &c.EquinoxPrn, &c.EquinoxLrn, &c.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &c, nil
}
