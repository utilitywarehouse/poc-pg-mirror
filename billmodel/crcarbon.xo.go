// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"

	"github.com/lib/pq"
)

// Crcarbon represents a row from 'equinox.crcarbon'.
type Crcarbon struct {
	Crcarbonusid     sql.NullInt64   `json:"crcarbonusid"`     // crcarbonusid
	Crcbexecid       sql.NullString  `json:"crcbexecid"`       // crcbexecid
	Crcbrepayment    sql.NullString  `json:"crcbrepayment"`    // crcbrepayment
	Crcbrepaymentfee sql.NullFloat64 `json:"crcbrepaymentfee"` // crcbrepaymentfee
	Crcbbonuseligibl sql.NullString  `json:"crcbbonuseligibl"` // crcbbonuseligibl
	Crcbbonusamount  sql.NullFloat64 `json:"crcbbonusamount"`  // crcbbonusamount
	Crcbcommitted    pq.NullTime     `json:"crcbcommitted"`    // crcbcommitted
	Crcbnotes        sql.NullInt64   `json:"crcbnotes"`        // crcbnotes
	Crcbscheme       sql.NullString  `json:"crcbscheme"`       // crcbscheme
	Crcbsparec2      sql.NullString  `json:"crcbsparec2"`      // crcbsparec2
	Crcbbalance      sql.NullFloat64 `json:"crcbbalance"`      // crcbbalance
	Crcbsparenum1    sql.NullFloat64 `json:"crcbsparenum1"`    // crcbsparenum1
	Crcbsparenum2    sql.NullFloat64 `json:"crcbsparenum2"`    // crcbsparenum2
	Crcbsparedate1   pq.NullTime     `json:"crcbsparedate1"`   // crcbsparedate1
	Crcbsparedate2   pq.NullTime     `json:"crcbsparedate2"`   // crcbsparedate2
	EquinoxPrn       sql.NullInt64   `json:"equinox_prn"`      // equinox_prn
	EquinoxLrn       int64           `json:"equinox_lrn"`      // equinox_lrn
	EquinoxSec       sql.NullInt64   `json:"equinox_sec"`      // equinox_sec
}

func AllCrcarbon(db XODB, callback func(x Crcarbon) bool) error {

	// sql query
	const sqlstr = `SELECT ` +
		`crcarbonusid, crcbexecid, crcbrepayment, crcbrepaymentfee, crcbbonuseligibl, crcbbonusamount, crcbcommitted, crcbnotes, crcbscheme, crcbsparec2, crcbbalance, crcbsparenum1, crcbsparenum2, crcbsparedate1, crcbsparedate2, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.crcarbon `

	q, err := db.Query(sqlstr)

	if err != nil {
		return err
	}
	defer q.Close()

	// load results
	for q.Next() {
		c := Crcarbon{}

		// scan
		err = q.Scan(&c.Crcarbonusid, &c.Crcbexecid, &c.Crcbrepayment, &c.Crcbrepaymentfee, &c.Crcbbonuseligibl, &c.Crcbbonusamount, &c.Crcbcommitted, &c.Crcbnotes, &c.Crcbscheme, &c.Crcbsparec2, &c.Crcbbalance, &c.Crcbsparenum1, &c.Crcbsparenum2, &c.Crcbsparedate1, &c.Crcbsparedate2, &c.EquinoxPrn, &c.EquinoxLrn, &c.EquinoxSec)
		if err != nil {
			return err
		}
		if !callback(c) {
			return nil
		}
	}

	return nil
}

// CrcarbonByEquinoxLrn retrieves a row from 'equinox.crcarbon' as a Crcarbon.
//
// Generated from index 'crcarbon_pkey'.
func CrcarbonByEquinoxLrn(db XODB, equinoxLrn int64) (*Crcarbon, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`crcarbonusid, crcbexecid, crcbrepayment, crcbrepaymentfee, crcbbonuseligibl, crcbbonusamount, crcbcommitted, crcbnotes, crcbscheme, crcbsparec2, crcbbalance, crcbsparenum1, crcbsparenum2, crcbsparedate1, crcbsparedate2, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.crcarbon ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	c := Crcarbon{}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&c.Crcarbonusid, &c.Crcbexecid, &c.Crcbrepayment, &c.Crcbrepaymentfee, &c.Crcbbonuseligibl, &c.Crcbbonusamount, &c.Crcbcommitted, &c.Crcbnotes, &c.Crcbscheme, &c.Crcbsparec2, &c.Crcbbalance, &c.Crcbsparenum1, &c.Crcbsparenum2, &c.Crcbsparedate1, &c.Crcbsparedate2, &c.EquinoxPrn, &c.EquinoxLrn, &c.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &c, nil
}
