// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/lib/pq"
)

// Crcarbon represents a row from 'equinox.crcarbon'.
type Crcarbon struct {
	Crcarbonusid     sql.NullInt64   `json:"crcarbonusid"`     // crcarbonusid
	Crcbexecid       sql.NullString  `json:"crcbexecid"`       // crcbexecid
	Crcbrepayment    sql.NullString  `json:"crcbrepayment"`    // crcbrepayment
	Crcbrepaymentfee sql.NullFloat64 `json:"crcbrepaymentfee"` // crcbrepaymentfee
	Crcbbonuseligibl sql.NullString  `json:"crcbbonuseligibl"` // crcbbonuseligibl
	Crcbbonusamount  sql.NullFloat64 `json:"crcbbonusamount"`  // crcbbonusamount
	Crcbcommitted    pq.NullTime     `json:"crcbcommitted"`    // crcbcommitted
	Crcbnotes        sql.NullInt64   `json:"crcbnotes"`        // crcbnotes
	Crcbscheme       sql.NullString  `json:"crcbscheme"`       // crcbscheme
	Crcbsparec2      sql.NullString  `json:"crcbsparec2"`      // crcbsparec2
	Crcbbalance      sql.NullFloat64 `json:"crcbbalance"`      // crcbbalance
	Crcbsparenum1    sql.NullFloat64 `json:"crcbsparenum1"`    // crcbsparenum1
	Crcbsparenum2    sql.NullFloat64 `json:"crcbsparenum2"`    // crcbsparenum2
	Crcbsparedate1   pq.NullTime     `json:"crcbsparedate1"`   // crcbsparedate1
	Crcbsparedate2   pq.NullTime     `json:"crcbsparedate2"`   // crcbsparedate2
	EquinoxPrn       sql.NullInt64   `json:"equinox_prn"`      // equinox_prn
	EquinoxLrn       int64           `json:"equinox_lrn"`      // equinox_lrn
	EquinoxSec       sql.NullInt64   `json:"equinox_sec"`      // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Crcarbon exists in the database.
func (c *Crcarbon) Exists() bool {
	return c._exists
}

// Deleted provides information if the Crcarbon has been deleted from the database.
func (c *Crcarbon) Deleted() bool {
	return c._deleted
}

// Insert inserts the Crcarbon to the database.
func (c *Crcarbon) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.crcarbon (` +
		`crcarbonusid, crcbexecid, crcbrepayment, crcbrepaymentfee, crcbbonuseligibl, crcbbonusamount, crcbcommitted, crcbnotes, crcbscheme, crcbsparec2, crcbbalance, crcbsparenum1, crcbsparenum2, crcbsparedate1, crcbsparedate2, equinox_prn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, c.Crcarbonusid, c.Crcbexecid, c.Crcbrepayment, c.Crcbrepaymentfee, c.Crcbbonuseligibl, c.Crcbbonusamount, c.Crcbcommitted, c.Crcbnotes, c.Crcbscheme, c.Crcbsparec2, c.Crcbbalance, c.Crcbsparenum1, c.Crcbsparenum2, c.Crcbsparedate1, c.Crcbsparedate2, c.EquinoxPrn, c.EquinoxSec)
	err = db.QueryRow(sqlstr, c.Crcarbonusid, c.Crcbexecid, c.Crcbrepayment, c.Crcbrepaymentfee, c.Crcbbonuseligibl, c.Crcbbonusamount, c.Crcbcommitted, c.Crcbnotes, c.Crcbscheme, c.Crcbsparec2, c.Crcbbalance, c.Crcbsparenum1, c.Crcbsparenum2, c.Crcbsparedate1, c.Crcbsparedate2, c.EquinoxPrn, c.EquinoxSec).Scan(&c.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Update updates the Crcarbon in the database.
func (c *Crcarbon) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if c._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.crcarbon SET (` +
		`crcarbonusid, crcbexecid, crcbrepayment, crcbrepaymentfee, crcbbonuseligibl, crcbbonusamount, crcbcommitted, crcbnotes, crcbscheme, crcbsparec2, crcbbalance, crcbsparenum1, crcbsparenum2, crcbsparedate1, crcbsparedate2, equinox_prn, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17` +
		`) WHERE equinox_lrn = $18`

	// run query
	XOLog(sqlstr, c.Crcarbonusid, c.Crcbexecid, c.Crcbrepayment, c.Crcbrepaymentfee, c.Crcbbonuseligibl, c.Crcbbonusamount, c.Crcbcommitted, c.Crcbnotes, c.Crcbscheme, c.Crcbsparec2, c.Crcbbalance, c.Crcbsparenum1, c.Crcbsparenum2, c.Crcbsparedate1, c.Crcbsparedate2, c.EquinoxPrn, c.EquinoxSec, c.EquinoxLrn)
	_, err = db.Exec(sqlstr, c.Crcarbonusid, c.Crcbexecid, c.Crcbrepayment, c.Crcbrepaymentfee, c.Crcbbonuseligibl, c.Crcbbonusamount, c.Crcbcommitted, c.Crcbnotes, c.Crcbscheme, c.Crcbsparec2, c.Crcbbalance, c.Crcbsparenum1, c.Crcbsparenum2, c.Crcbsparedate1, c.Crcbsparedate2, c.EquinoxPrn, c.EquinoxSec, c.EquinoxLrn)
	return err
}

// Save saves the Crcarbon to the database.
func (c *Crcarbon) Save(db XODB) error {
	if c.Exists() {
		return c.Update(db)
	}

	return c.Insert(db)
}

// Upsert performs an upsert for Crcarbon.
//
// NOTE: PostgreSQL 9.5+ only
func (c *Crcarbon) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.crcarbon (` +
		`crcarbonusid, crcbexecid, crcbrepayment, crcbrepaymentfee, crcbbonuseligibl, crcbbonusamount, crcbcommitted, crcbnotes, crcbscheme, crcbsparec2, crcbbalance, crcbsparenum1, crcbsparenum2, crcbsparedate1, crcbsparedate2, equinox_prn, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`crcarbonusid, crcbexecid, crcbrepayment, crcbrepaymentfee, crcbbonuseligibl, crcbbonusamount, crcbcommitted, crcbnotes, crcbscheme, crcbsparec2, crcbbalance, crcbsparenum1, crcbsparenum2, crcbsparedate1, crcbsparedate2, equinox_prn, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.crcarbonusid, EXCLUDED.crcbexecid, EXCLUDED.crcbrepayment, EXCLUDED.crcbrepaymentfee, EXCLUDED.crcbbonuseligibl, EXCLUDED.crcbbonusamount, EXCLUDED.crcbcommitted, EXCLUDED.crcbnotes, EXCLUDED.crcbscheme, EXCLUDED.crcbsparec2, EXCLUDED.crcbbalance, EXCLUDED.crcbsparenum1, EXCLUDED.crcbsparenum2, EXCLUDED.crcbsparedate1, EXCLUDED.crcbsparedate2, EXCLUDED.equinox_prn, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, c.Crcarbonusid, c.Crcbexecid, c.Crcbrepayment, c.Crcbrepaymentfee, c.Crcbbonuseligibl, c.Crcbbonusamount, c.Crcbcommitted, c.Crcbnotes, c.Crcbscheme, c.Crcbsparec2, c.Crcbbalance, c.Crcbsparenum1, c.Crcbsparenum2, c.Crcbsparedate1, c.Crcbsparedate2, c.EquinoxPrn, c.EquinoxLrn, c.EquinoxSec)
	_, err = db.Exec(sqlstr, c.Crcarbonusid, c.Crcbexecid, c.Crcbrepayment, c.Crcbrepaymentfee, c.Crcbbonuseligibl, c.Crcbbonusamount, c.Crcbcommitted, c.Crcbnotes, c.Crcbscheme, c.Crcbsparec2, c.Crcbbalance, c.Crcbsparenum1, c.Crcbsparenum2, c.Crcbsparedate1, c.Crcbsparedate2, c.EquinoxPrn, c.EquinoxLrn, c.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Delete deletes the Crcarbon from the database.
func (c *Crcarbon) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return nil
	}

	// if deleted, bail
	if c._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.crcarbon WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, c.EquinoxLrn)
	_, err = db.Exec(sqlstr, c.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	c._deleted = true

	return nil
}

// CrcarbonByEquinoxLrn retrieves a row from 'equinox.crcarbon' as a Crcarbon.
//
// Generated from index 'crcarbon_pkey'.
func CrcarbonByEquinoxLrn(db XODB, equinoxLrn int64) (*Crcarbon, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`crcarbonusid, crcbexecid, crcbrepayment, crcbrepaymentfee, crcbbonuseligibl, crcbbonusamount, crcbcommitted, crcbnotes, crcbscheme, crcbsparec2, crcbbalance, crcbsparenum1, crcbsparenum2, crcbsparedate1, crcbsparedate2, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.crcarbon ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	c := Crcarbon{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&c.Crcarbonusid, &c.Crcbexecid, &c.Crcbrepayment, &c.Crcbrepaymentfee, &c.Crcbbonuseligibl, &c.Crcbbonusamount, &c.Crcbcommitted, &c.Crcbnotes, &c.Crcbscheme, &c.Crcbsparec2, &c.Crcbbalance, &c.Crcbsparenum1, &c.Crcbsparenum2, &c.Crcbsparedate1, &c.Crcbsparedate2, &c.EquinoxPrn, &c.EquinoxLrn, &c.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &c, nil
}
