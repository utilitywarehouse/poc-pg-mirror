// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// Ctprice represents a row from 'equinox.ctprices'.
type Ctprice struct {
	Ctprireguser   sql.NullString  `json:"ctprireguser"`   // ctprireguser
	Ctpriwapgas    sql.NullFloat64 `json:"ctpriwapgas"`    // ctpriwapgas
	Ctpriwapgd     sql.NullFloat64 `json:"ctpriwapgd"`     // ctpriwapgd
	Ctpriwape7     sql.NullFloat64 `json:"ctpriwape7"`     // ctpriwape7
	Ctpritvggas    sql.NullFloat64 `json:"ctpritvggas"`    // ctpritvggas
	Ctpritvggd     sql.NullFloat64 `json:"ctpritvggd"`     // ctpritvggd
	Ctpritvge7     sql.NullFloat64 `json:"ctpritvge7"`     // ctpritvge7
	Ctpritvgdual   sql.NullFloat64 `json:"ctpritvgdual"`   // ctpritvgdual
	Ctpritvgduale7 sql.NullFloat64 `json:"ctpritvgduale7"` // ctpritvgduale7
	Ctprihrtgas    sql.NullFloat64 `json:"ctprihrtgas"`    // ctprihrtgas
	Ctprihrtgd     sql.NullFloat64 `json:"ctprihrtgd"`     // ctprihrtgd
	Ctprihrte7     sql.NullFloat64 `json:"ctprihrte7"`     // ctprihrte7
	Ctprihrtdual   sql.NullFloat64 `json:"ctprihrtdual"`   // ctprihrtdual
	Ctprihrtduale7 sql.NullFloat64 `json:"ctprihrtduale7"` // ctprihrtduale7
	EquinoxPrn     sql.NullInt64   `json:"equinox_prn"`    // equinox_prn
	EquinoxLrn     int64           `json:"equinox_lrn"`    // equinox_lrn
	EquinoxSec     sql.NullInt64   `json:"equinox_sec"`    // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Ctprice exists in the database.
func (c *Ctprice) Exists() bool {
	return c._exists
}

// Deleted provides information if the Ctprice has been deleted from the database.
func (c *Ctprice) Deleted() bool {
	return c._deleted
}

// Insert inserts the Ctprice to the database.
func (c *Ctprice) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.ctprices (` +
		`ctprireguser, ctpriwapgas, ctpriwapgd, ctpriwape7, ctpritvggas, ctpritvggd, ctpritvge7, ctpritvgdual, ctpritvgduale7, ctprihrtgas, ctprihrtgd, ctprihrte7, ctprihrtdual, ctprihrtduale7, equinox_prn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, c.Ctprireguser, c.Ctpriwapgas, c.Ctpriwapgd, c.Ctpriwape7, c.Ctpritvggas, c.Ctpritvggd, c.Ctpritvge7, c.Ctpritvgdual, c.Ctpritvgduale7, c.Ctprihrtgas, c.Ctprihrtgd, c.Ctprihrte7, c.Ctprihrtdual, c.Ctprihrtduale7, c.EquinoxPrn, c.EquinoxSec)
	err = db.QueryRow(sqlstr, c.Ctprireguser, c.Ctpriwapgas, c.Ctpriwapgd, c.Ctpriwape7, c.Ctpritvggas, c.Ctpritvggd, c.Ctpritvge7, c.Ctpritvgdual, c.Ctpritvgduale7, c.Ctprihrtgas, c.Ctprihrtgd, c.Ctprihrte7, c.Ctprihrtdual, c.Ctprihrtduale7, c.EquinoxPrn, c.EquinoxSec).Scan(&c.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Update updates the Ctprice in the database.
func (c *Ctprice) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if c._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.ctprices SET (` +
		`ctprireguser, ctpriwapgas, ctpriwapgd, ctpriwape7, ctpritvggas, ctpritvggd, ctpritvge7, ctpritvgdual, ctpritvgduale7, ctprihrtgas, ctprihrtgd, ctprihrte7, ctprihrtdual, ctprihrtduale7, equinox_prn, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16` +
		`) WHERE equinox_lrn = $17`

	// run query
	XOLog(sqlstr, c.Ctprireguser, c.Ctpriwapgas, c.Ctpriwapgd, c.Ctpriwape7, c.Ctpritvggas, c.Ctpritvggd, c.Ctpritvge7, c.Ctpritvgdual, c.Ctpritvgduale7, c.Ctprihrtgas, c.Ctprihrtgd, c.Ctprihrte7, c.Ctprihrtdual, c.Ctprihrtduale7, c.EquinoxPrn, c.EquinoxSec, c.EquinoxLrn)
	_, err = db.Exec(sqlstr, c.Ctprireguser, c.Ctpriwapgas, c.Ctpriwapgd, c.Ctpriwape7, c.Ctpritvggas, c.Ctpritvggd, c.Ctpritvge7, c.Ctpritvgdual, c.Ctpritvgduale7, c.Ctprihrtgas, c.Ctprihrtgd, c.Ctprihrte7, c.Ctprihrtdual, c.Ctprihrtduale7, c.EquinoxPrn, c.EquinoxSec, c.EquinoxLrn)
	return err
}

// Save saves the Ctprice to the database.
func (c *Ctprice) Save(db XODB) error {
	if c.Exists() {
		return c.Update(db)
	}

	return c.Insert(db)
}

// Upsert performs an upsert for Ctprice.
//
// NOTE: PostgreSQL 9.5+ only
func (c *Ctprice) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.ctprices (` +
		`ctprireguser, ctpriwapgas, ctpriwapgd, ctpriwape7, ctpritvggas, ctpritvggd, ctpritvge7, ctpritvgdual, ctpritvgduale7, ctprihrtgas, ctprihrtgd, ctprihrte7, ctprihrtdual, ctprihrtduale7, equinox_prn, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`ctprireguser, ctpriwapgas, ctpriwapgd, ctpriwape7, ctpritvggas, ctpritvggd, ctpritvge7, ctpritvgdual, ctpritvgduale7, ctprihrtgas, ctprihrtgd, ctprihrte7, ctprihrtdual, ctprihrtduale7, equinox_prn, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.ctprireguser, EXCLUDED.ctpriwapgas, EXCLUDED.ctpriwapgd, EXCLUDED.ctpriwape7, EXCLUDED.ctpritvggas, EXCLUDED.ctpritvggd, EXCLUDED.ctpritvge7, EXCLUDED.ctpritvgdual, EXCLUDED.ctpritvgduale7, EXCLUDED.ctprihrtgas, EXCLUDED.ctprihrtgd, EXCLUDED.ctprihrte7, EXCLUDED.ctprihrtdual, EXCLUDED.ctprihrtduale7, EXCLUDED.equinox_prn, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, c.Ctprireguser, c.Ctpriwapgas, c.Ctpriwapgd, c.Ctpriwape7, c.Ctpritvggas, c.Ctpritvggd, c.Ctpritvge7, c.Ctpritvgdual, c.Ctpritvgduale7, c.Ctprihrtgas, c.Ctprihrtgd, c.Ctprihrte7, c.Ctprihrtdual, c.Ctprihrtduale7, c.EquinoxPrn, c.EquinoxLrn, c.EquinoxSec)
	_, err = db.Exec(sqlstr, c.Ctprireguser, c.Ctpriwapgas, c.Ctpriwapgd, c.Ctpriwape7, c.Ctpritvggas, c.Ctpritvggd, c.Ctpritvge7, c.Ctpritvgdual, c.Ctpritvgduale7, c.Ctprihrtgas, c.Ctprihrtgd, c.Ctprihrte7, c.Ctprihrtdual, c.Ctprihrtduale7, c.EquinoxPrn, c.EquinoxLrn, c.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Delete deletes the Ctprice from the database.
func (c *Ctprice) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return nil
	}

	// if deleted, bail
	if c._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.ctprices WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, c.EquinoxLrn)
	_, err = db.Exec(sqlstr, c.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	c._deleted = true

	return nil
}

// CtpriceByEquinoxLrn retrieves a row from 'equinox.ctprices' as a Ctprice.
//
// Generated from index 'ctprices_pkey'.
func CtpriceByEquinoxLrn(db XODB, equinoxLrn int64) (*Ctprice, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`ctprireguser, ctpriwapgas, ctpriwapgd, ctpriwape7, ctpritvggas, ctpritvggd, ctpritvge7, ctpritvgdual, ctpritvgduale7, ctprihrtgas, ctprihrtgd, ctprihrte7, ctprihrtdual, ctprihrtduale7, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.ctprices ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	c := Ctprice{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&c.Ctprireguser, &c.Ctpriwapgas, &c.Ctpriwapgd, &c.Ctpriwape7, &c.Ctpritvggas, &c.Ctpritvggd, &c.Ctpritvge7, &c.Ctpritvgdual, &c.Ctpritvgduale7, &c.Ctprihrtgas, &c.Ctprihrtgd, &c.Ctprihrte7, &c.Ctprihrtdual, &c.Ctprihrtduale7, &c.EquinoxPrn, &c.EquinoxLrn, &c.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &c, nil
}
