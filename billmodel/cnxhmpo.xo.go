// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// Cnxhmpo represents a row from 'equinox.cnxhmpo'.
type Cnxhmpo struct {
	Cnxhmpoforename sql.NullString `json:"cnxhmpoforename"` // cnxhmpoforename
	Cnxhmposurname  sql.NullString `json:"cnxhmposurname"`  // cnxhmposurname
	Cnxhmpocontname sql.NullString `json:"cnxhmpocontname"` // cnxhmpocontname
	Cnxhmpoconame   sql.NullString `json:"cnxhmpoconame"`   // cnxhmpoconame
	Cnxhmpollpcode  sql.NullString `json:"cnxhmpollpcode"`  // cnxhmpollpcode
	Cnxhmpolladdr1  sql.NullString `json:"cnxhmpolladdr1"`  // cnxhmpolladdr1
	Cnxhmpolladdr2  sql.NullString `json:"cnxhmpolladdr2"`  // cnxhmpolladdr2
	Cnxhmpolladdr3  sql.NullString `json:"cnxhmpolladdr3"`  // cnxhmpolladdr3
	Cnxhmpolladdr4  sql.NullString `json:"cnxhmpolladdr4"`  // cnxhmpolladdr4
	Cnxhmpollcounty sql.NullString `json:"cnxhmpollcounty"` // cnxhmpollcounty
	Cnxhmpolapcode  sql.NullString `json:"cnxhmpolapcode"`  // cnxhmpolapcode
	Cnxhmpolaaddr1  sql.NullString `json:"cnxhmpolaaddr1"`  // cnxhmpolaaddr1
	Cnxhmpolaaddr2  sql.NullString `json:"cnxhmpolaaddr2"`  // cnxhmpolaaddr2
	Cnxhmpolaaddr3  sql.NullString `json:"cnxhmpolaaddr3"`  // cnxhmpolaaddr3
	Cnxhmpolaaddr4  sql.NullString `json:"cnxhmpolaaddr4"`  // cnxhmpolaaddr4
	Cnxhmpolacounty sql.NullString `json:"cnxhmpolacounty"` // cnxhmpolacounty
	Cnxhmpollmobile sql.NullString `json:"cnxhmpollmobile"` // cnxhmpollmobile
	Cnxhmpollemail  sql.NullString `json:"cnxhmpollemail"`  // cnxhmpollemail
	Cnxhmpolltel    sql.NullString `json:"cnxhmpolltel"`    // cnxhmpolltel
	Cnxhmpolamobile sql.NullString `json:"cnxhmpolamobile"` // cnxhmpolamobile
	Cnxhmpolaemail  sql.NullString `json:"cnxhmpolaemail"`  // cnxhmpolaemail
	Cnxhmpolatel    sql.NullString `json:"cnxhmpolatel"`    // cnxhmpolatel
	Cnxhmpounique   sql.NullInt64  `json:"cnxhmpounique"`   // cnxhmpounique
	EquinoxPrn      sql.NullInt64  `json:"equinox_prn"`     // equinox_prn
	EquinoxLrn      int64          `json:"equinox_lrn"`     // equinox_lrn
	EquinoxSec      sql.NullInt64  `json:"equinox_sec"`     // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Cnxhmpo exists in the database.
func (c *Cnxhmpo) Exists() bool {
	return c._exists
}

// Deleted provides information if the Cnxhmpo has been deleted from the database.
func (c *Cnxhmpo) Deleted() bool {
	return c._deleted
}

// Insert inserts the Cnxhmpo to the database.
func (c *Cnxhmpo) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.cnxhmpo (` +
		`cnxhmpoforename, cnxhmposurname, cnxhmpocontname, cnxhmpoconame, cnxhmpollpcode, cnxhmpolladdr1, cnxhmpolladdr2, cnxhmpolladdr3, cnxhmpolladdr4, cnxhmpollcounty, cnxhmpolapcode, cnxhmpolaaddr1, cnxhmpolaaddr2, cnxhmpolaaddr3, cnxhmpolaaddr4, cnxhmpolacounty, cnxhmpollmobile, cnxhmpollemail, cnxhmpolltel, cnxhmpolamobile, cnxhmpolaemail, cnxhmpolatel, cnxhmpounique, equinox_prn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, c.Cnxhmpoforename, c.Cnxhmposurname, c.Cnxhmpocontname, c.Cnxhmpoconame, c.Cnxhmpollpcode, c.Cnxhmpolladdr1, c.Cnxhmpolladdr2, c.Cnxhmpolladdr3, c.Cnxhmpolladdr4, c.Cnxhmpollcounty, c.Cnxhmpolapcode, c.Cnxhmpolaaddr1, c.Cnxhmpolaaddr2, c.Cnxhmpolaaddr3, c.Cnxhmpolaaddr4, c.Cnxhmpolacounty, c.Cnxhmpollmobile, c.Cnxhmpollemail, c.Cnxhmpolltel, c.Cnxhmpolamobile, c.Cnxhmpolaemail, c.Cnxhmpolatel, c.Cnxhmpounique, c.EquinoxPrn, c.EquinoxSec)
	err = db.QueryRow(sqlstr, c.Cnxhmpoforename, c.Cnxhmposurname, c.Cnxhmpocontname, c.Cnxhmpoconame, c.Cnxhmpollpcode, c.Cnxhmpolladdr1, c.Cnxhmpolladdr2, c.Cnxhmpolladdr3, c.Cnxhmpolladdr4, c.Cnxhmpollcounty, c.Cnxhmpolapcode, c.Cnxhmpolaaddr1, c.Cnxhmpolaaddr2, c.Cnxhmpolaaddr3, c.Cnxhmpolaaddr4, c.Cnxhmpolacounty, c.Cnxhmpollmobile, c.Cnxhmpollemail, c.Cnxhmpolltel, c.Cnxhmpolamobile, c.Cnxhmpolaemail, c.Cnxhmpolatel, c.Cnxhmpounique, c.EquinoxPrn, c.EquinoxSec).Scan(&c.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Update updates the Cnxhmpo in the database.
func (c *Cnxhmpo) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if c._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.cnxhmpo SET (` +
		`cnxhmpoforename, cnxhmposurname, cnxhmpocontname, cnxhmpoconame, cnxhmpollpcode, cnxhmpolladdr1, cnxhmpolladdr2, cnxhmpolladdr3, cnxhmpolladdr4, cnxhmpollcounty, cnxhmpolapcode, cnxhmpolaaddr1, cnxhmpolaaddr2, cnxhmpolaaddr3, cnxhmpolaaddr4, cnxhmpolacounty, cnxhmpollmobile, cnxhmpollemail, cnxhmpolltel, cnxhmpolamobile, cnxhmpolaemail, cnxhmpolatel, cnxhmpounique, equinox_prn, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25` +
		`) WHERE equinox_lrn = $26`

	// run query
	XOLog(sqlstr, c.Cnxhmpoforename, c.Cnxhmposurname, c.Cnxhmpocontname, c.Cnxhmpoconame, c.Cnxhmpollpcode, c.Cnxhmpolladdr1, c.Cnxhmpolladdr2, c.Cnxhmpolladdr3, c.Cnxhmpolladdr4, c.Cnxhmpollcounty, c.Cnxhmpolapcode, c.Cnxhmpolaaddr1, c.Cnxhmpolaaddr2, c.Cnxhmpolaaddr3, c.Cnxhmpolaaddr4, c.Cnxhmpolacounty, c.Cnxhmpollmobile, c.Cnxhmpollemail, c.Cnxhmpolltel, c.Cnxhmpolamobile, c.Cnxhmpolaemail, c.Cnxhmpolatel, c.Cnxhmpounique, c.EquinoxPrn, c.EquinoxSec, c.EquinoxLrn)
	_, err = db.Exec(sqlstr, c.Cnxhmpoforename, c.Cnxhmposurname, c.Cnxhmpocontname, c.Cnxhmpoconame, c.Cnxhmpollpcode, c.Cnxhmpolladdr1, c.Cnxhmpolladdr2, c.Cnxhmpolladdr3, c.Cnxhmpolladdr4, c.Cnxhmpollcounty, c.Cnxhmpolapcode, c.Cnxhmpolaaddr1, c.Cnxhmpolaaddr2, c.Cnxhmpolaaddr3, c.Cnxhmpolaaddr4, c.Cnxhmpolacounty, c.Cnxhmpollmobile, c.Cnxhmpollemail, c.Cnxhmpolltel, c.Cnxhmpolamobile, c.Cnxhmpolaemail, c.Cnxhmpolatel, c.Cnxhmpounique, c.EquinoxPrn, c.EquinoxSec, c.EquinoxLrn)
	return err
}

// Save saves the Cnxhmpo to the database.
func (c *Cnxhmpo) Save(db XODB) error {
	if c.Exists() {
		return c.Update(db)
	}

	return c.Insert(db)
}

// Upsert performs an upsert for Cnxhmpo.
//
// NOTE: PostgreSQL 9.5+ only
func (c *Cnxhmpo) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.cnxhmpo (` +
		`cnxhmpoforename, cnxhmposurname, cnxhmpocontname, cnxhmpoconame, cnxhmpollpcode, cnxhmpolladdr1, cnxhmpolladdr2, cnxhmpolladdr3, cnxhmpolladdr4, cnxhmpollcounty, cnxhmpolapcode, cnxhmpolaaddr1, cnxhmpolaaddr2, cnxhmpolaaddr3, cnxhmpolaaddr4, cnxhmpolacounty, cnxhmpollmobile, cnxhmpollemail, cnxhmpolltel, cnxhmpolamobile, cnxhmpolaemail, cnxhmpolatel, cnxhmpounique, equinox_prn, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`cnxhmpoforename, cnxhmposurname, cnxhmpocontname, cnxhmpoconame, cnxhmpollpcode, cnxhmpolladdr1, cnxhmpolladdr2, cnxhmpolladdr3, cnxhmpolladdr4, cnxhmpollcounty, cnxhmpolapcode, cnxhmpolaaddr1, cnxhmpolaaddr2, cnxhmpolaaddr3, cnxhmpolaaddr4, cnxhmpolacounty, cnxhmpollmobile, cnxhmpollemail, cnxhmpolltel, cnxhmpolamobile, cnxhmpolaemail, cnxhmpolatel, cnxhmpounique, equinox_prn, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.cnxhmpoforename, EXCLUDED.cnxhmposurname, EXCLUDED.cnxhmpocontname, EXCLUDED.cnxhmpoconame, EXCLUDED.cnxhmpollpcode, EXCLUDED.cnxhmpolladdr1, EXCLUDED.cnxhmpolladdr2, EXCLUDED.cnxhmpolladdr3, EXCLUDED.cnxhmpolladdr4, EXCLUDED.cnxhmpollcounty, EXCLUDED.cnxhmpolapcode, EXCLUDED.cnxhmpolaaddr1, EXCLUDED.cnxhmpolaaddr2, EXCLUDED.cnxhmpolaaddr3, EXCLUDED.cnxhmpolaaddr4, EXCLUDED.cnxhmpolacounty, EXCLUDED.cnxhmpollmobile, EXCLUDED.cnxhmpollemail, EXCLUDED.cnxhmpolltel, EXCLUDED.cnxhmpolamobile, EXCLUDED.cnxhmpolaemail, EXCLUDED.cnxhmpolatel, EXCLUDED.cnxhmpounique, EXCLUDED.equinox_prn, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, c.Cnxhmpoforename, c.Cnxhmposurname, c.Cnxhmpocontname, c.Cnxhmpoconame, c.Cnxhmpollpcode, c.Cnxhmpolladdr1, c.Cnxhmpolladdr2, c.Cnxhmpolladdr3, c.Cnxhmpolladdr4, c.Cnxhmpollcounty, c.Cnxhmpolapcode, c.Cnxhmpolaaddr1, c.Cnxhmpolaaddr2, c.Cnxhmpolaaddr3, c.Cnxhmpolaaddr4, c.Cnxhmpolacounty, c.Cnxhmpollmobile, c.Cnxhmpollemail, c.Cnxhmpolltel, c.Cnxhmpolamobile, c.Cnxhmpolaemail, c.Cnxhmpolatel, c.Cnxhmpounique, c.EquinoxPrn, c.EquinoxLrn, c.EquinoxSec)
	_, err = db.Exec(sqlstr, c.Cnxhmpoforename, c.Cnxhmposurname, c.Cnxhmpocontname, c.Cnxhmpoconame, c.Cnxhmpollpcode, c.Cnxhmpolladdr1, c.Cnxhmpolladdr2, c.Cnxhmpolladdr3, c.Cnxhmpolladdr4, c.Cnxhmpollcounty, c.Cnxhmpolapcode, c.Cnxhmpolaaddr1, c.Cnxhmpolaaddr2, c.Cnxhmpolaaddr3, c.Cnxhmpolaaddr4, c.Cnxhmpolacounty, c.Cnxhmpollmobile, c.Cnxhmpollemail, c.Cnxhmpolltel, c.Cnxhmpolamobile, c.Cnxhmpolaemail, c.Cnxhmpolatel, c.Cnxhmpounique, c.EquinoxPrn, c.EquinoxLrn, c.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Delete deletes the Cnxhmpo from the database.
func (c *Cnxhmpo) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return nil
	}

	// if deleted, bail
	if c._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.cnxhmpo WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, c.EquinoxLrn)
	_, err = db.Exec(sqlstr, c.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	c._deleted = true

	return nil
}

// CnxhmpoByEquinoxLrn retrieves a row from 'equinox.cnxhmpo' as a Cnxhmpo.
//
// Generated from index 'cnxhmpo_pkey'.
func CnxhmpoByEquinoxLrn(db XODB, equinoxLrn int64) (*Cnxhmpo, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`cnxhmpoforename, cnxhmposurname, cnxhmpocontname, cnxhmpoconame, cnxhmpollpcode, cnxhmpolladdr1, cnxhmpolladdr2, cnxhmpolladdr3, cnxhmpolladdr4, cnxhmpollcounty, cnxhmpolapcode, cnxhmpolaaddr1, cnxhmpolaaddr2, cnxhmpolaaddr3, cnxhmpolaaddr4, cnxhmpolacounty, cnxhmpollmobile, cnxhmpollemail, cnxhmpolltel, cnxhmpolamobile, cnxhmpolaemail, cnxhmpolatel, cnxhmpounique, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.cnxhmpo ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	c := Cnxhmpo{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&c.Cnxhmpoforename, &c.Cnxhmposurname, &c.Cnxhmpocontname, &c.Cnxhmpoconame, &c.Cnxhmpollpcode, &c.Cnxhmpolladdr1, &c.Cnxhmpolladdr2, &c.Cnxhmpolladdr3, &c.Cnxhmpolladdr4, &c.Cnxhmpollcounty, &c.Cnxhmpolapcode, &c.Cnxhmpolaaddr1, &c.Cnxhmpolaaddr2, &c.Cnxhmpolaaddr3, &c.Cnxhmpolaaddr4, &c.Cnxhmpolacounty, &c.Cnxhmpollmobile, &c.Cnxhmpollemail, &c.Cnxhmpolltel, &c.Cnxhmpolamobile, &c.Cnxhmpolaemail, &c.Cnxhmpolatel, &c.Cnxhmpounique, &c.EquinoxPrn, &c.EquinoxLrn, &c.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &c, nil
}
