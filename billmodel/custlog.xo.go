// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/lib/pq"
)

// Custlog represents a row from 'equinox.custlog'.
type Custlog struct {
	Clogcustaccountn sql.NullString `json:"clogcustaccountn"` // clogcustaccountn
	Clogcustexecid   sql.NullString `json:"clogcustexecid"`   // clogcustexecid
	Clogcustvirtexec sql.NullString `json:"clogcustvirtexec"` // clogcustvirtexec
	Clogchangedate   pq.NullTime    `json:"clogchangedate"`   // clogchangedate
	Clogpersonalcust sql.NullInt64  `json:"clogpersonalcust"` // clogpersonalcust
	EquinoxLrn       int64          `json:"equinox_lrn"`      // equinox_lrn
	EquinoxSec       sql.NullInt64  `json:"equinox_sec"`      // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Custlog exists in the database.
func (c *Custlog) Exists() bool {
	return c._exists
}

// Deleted provides information if the Custlog has been deleted from the database.
func (c *Custlog) Deleted() bool {
	return c._deleted
}

// Insert inserts the Custlog to the database.
func (c *Custlog) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.custlog (` +
		`clogcustaccountn, clogcustexecid, clogcustvirtexec, clogchangedate, clogpersonalcust, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, c.Clogcustaccountn, c.Clogcustexecid, c.Clogcustvirtexec, c.Clogchangedate, c.Clogpersonalcust, c.EquinoxSec)
	err = db.QueryRow(sqlstr, c.Clogcustaccountn, c.Clogcustexecid, c.Clogcustvirtexec, c.Clogchangedate, c.Clogpersonalcust, c.EquinoxSec).Scan(&c.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Update updates the Custlog in the database.
func (c *Custlog) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if c._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.custlog SET (` +
		`clogcustaccountn, clogcustexecid, clogcustvirtexec, clogchangedate, clogpersonalcust, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6` +
		`) WHERE equinox_lrn = $7`

	// run query
	XOLog(sqlstr, c.Clogcustaccountn, c.Clogcustexecid, c.Clogcustvirtexec, c.Clogchangedate, c.Clogpersonalcust, c.EquinoxSec, c.EquinoxLrn)
	_, err = db.Exec(sqlstr, c.Clogcustaccountn, c.Clogcustexecid, c.Clogcustvirtexec, c.Clogchangedate, c.Clogpersonalcust, c.EquinoxSec, c.EquinoxLrn)
	return err
}

// Save saves the Custlog to the database.
func (c *Custlog) Save(db XODB) error {
	if c.Exists() {
		return c.Update(db)
	}

	return c.Insert(db)
}

// Upsert performs an upsert for Custlog.
//
// NOTE: PostgreSQL 9.5+ only
func (c *Custlog) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.custlog (` +
		`clogcustaccountn, clogcustexecid, clogcustvirtexec, clogchangedate, clogpersonalcust, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`clogcustaccountn, clogcustexecid, clogcustvirtexec, clogchangedate, clogpersonalcust, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.clogcustaccountn, EXCLUDED.clogcustexecid, EXCLUDED.clogcustvirtexec, EXCLUDED.clogchangedate, EXCLUDED.clogpersonalcust, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, c.Clogcustaccountn, c.Clogcustexecid, c.Clogcustvirtexec, c.Clogchangedate, c.Clogpersonalcust, c.EquinoxLrn, c.EquinoxSec)
	_, err = db.Exec(sqlstr, c.Clogcustaccountn, c.Clogcustexecid, c.Clogcustvirtexec, c.Clogchangedate, c.Clogpersonalcust, c.EquinoxLrn, c.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Delete deletes the Custlog from the database.
func (c *Custlog) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return nil
	}

	// if deleted, bail
	if c._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.custlog WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, c.EquinoxLrn)
	_, err = db.Exec(sqlstr, c.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	c._deleted = true

	return nil
}

// CustlogByEquinoxLrn retrieves a row from 'equinox.custlog' as a Custlog.
//
// Generated from index 'custlog_pkey'.
func CustlogByEquinoxLrn(db XODB, equinoxLrn int64) (*Custlog, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`clogcustaccountn, clogcustexecid, clogcustvirtexec, clogchangedate, clogpersonalcust, equinox_lrn, equinox_sec ` +
		`FROM equinox.custlog ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	c := Custlog{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&c.Clogcustaccountn, &c.Clogcustexecid, &c.Clogcustvirtexec, &c.Clogchangedate, &c.Clogpersonalcust, &c.EquinoxLrn, &c.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &c, nil
}
