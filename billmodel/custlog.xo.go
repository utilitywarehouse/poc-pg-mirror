// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"

	"github.com/lib/pq"
)

// Custlog represents a row from 'equinox.custlog'.
type Custlog struct {
	Clogcustaccountn sql.NullString `json:"clogcustaccountn"` // clogcustaccountn
	Clogcustexecid   sql.NullString `json:"clogcustexecid"`   // clogcustexecid
	Clogcustvirtexec sql.NullString `json:"clogcustvirtexec"` // clogcustvirtexec
	Clogchangedate   pq.NullTime    `json:"clogchangedate"`   // clogchangedate
	Clogpersonalcust sql.NullInt64  `json:"clogpersonalcust"` // clogpersonalcust
	EquinoxLrn       int64          `json:"equinox_lrn"`      // equinox_lrn
	EquinoxSec       sql.NullInt64  `json:"equinox_sec"`      // equinox_sec
}

func AllCustlog(db XODB, callback func(x Custlog) bool) error {

	// sql query
	const sqlstr = `SELECT ` +
		`clogcustaccountn, clogcustexecid, clogcustvirtexec, clogchangedate, clogpersonalcust, equinox_lrn, equinox_sec ` +
		`FROM equinox.custlog `

	q, err := db.Query(sqlstr)

	if err != nil {
		return err
	}
	defer q.Close()

	// load results
	for q.Next() {
		c := Custlog{}

		// scan
		err = q.Scan(&c.Clogcustaccountn, &c.Clogcustexecid, &c.Clogcustvirtexec, &c.Clogchangedate, &c.Clogpersonalcust, &c.EquinoxLrn, &c.EquinoxSec)
		if err != nil {
			return err
		}
		if !callback(c) {
			return nil
		}
	}

	return nil
}

// CustlogByEquinoxLrn retrieves a row from 'equinox.custlog' as a Custlog.
//
// Generated from index 'custlog_pkey'.
func CustlogByEquinoxLrn(db XODB, equinoxLrn int64) (*Custlog, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`clogcustaccountn, clogcustexecid, clogcustvirtexec, clogchangedate, clogpersonalcust, equinox_lrn, equinox_sec ` +
		`FROM equinox.custlog ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	c := Custlog{}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&c.Clogcustaccountn, &c.Clogcustexecid, &c.Clogcustvirtexec, &c.Clogchangedate, &c.Clogpersonalcust, &c.EquinoxLrn, &c.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &c, nil
}
