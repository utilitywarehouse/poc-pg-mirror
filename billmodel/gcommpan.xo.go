// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// Gcommpan represents a row from 'equinox.gcommpan'.
type Gcommpan struct {
	Gcommpanprofile sql.NullString `json:"gcommpanprofile"` // gcommpanprofile
	Gcommpanmts     sql.NullString `json:"gcommpanmts"`     // gcommpanmts
	Gcommpanllf     sql.NullString `json:"gcommpanllf"`     // gcommpanllf
	Gcommpanbot1    sql.NullString `json:"gcommpanbot1"`    // gcommpanbot1
	Gcommpanbot2    sql.NullString `json:"gcommpanbot2"`    // gcommpanbot2
	Gcommpanbot3    sql.NullString `json:"gcommpanbot3"`    // gcommpanbot3
	Gcommpanbot4    sql.NullString `json:"gcommpanbot4"`    // gcommpanbot4
	Gcommpanfull    sql.NullString `json:"gcommpanfull"`    // gcommpanfull
	EquinoxPrn      sql.NullInt64  `json:"equinox_prn"`     // equinox_prn
	EquinoxLrn      int64          `json:"equinox_lrn"`     // equinox_lrn
	EquinoxSec      sql.NullInt64  `json:"equinox_sec"`     // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Gcommpan exists in the database.
func (g *Gcommpan) Exists() bool {
	return g._exists
}

// Deleted provides information if the Gcommpan has been deleted from the database.
func (g *Gcommpan) Deleted() bool {
	return g._deleted
}

// Insert inserts the Gcommpan to the database.
func (g *Gcommpan) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if g._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.gcommpan (` +
		`gcommpanprofile, gcommpanmts, gcommpanllf, gcommpanbot1, gcommpanbot2, gcommpanbot3, gcommpanbot4, gcommpanfull, equinox_prn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, g.Gcommpanprofile, g.Gcommpanmts, g.Gcommpanllf, g.Gcommpanbot1, g.Gcommpanbot2, g.Gcommpanbot3, g.Gcommpanbot4, g.Gcommpanfull, g.EquinoxPrn, g.EquinoxSec)
	err = db.QueryRow(sqlstr, g.Gcommpanprofile, g.Gcommpanmts, g.Gcommpanllf, g.Gcommpanbot1, g.Gcommpanbot2, g.Gcommpanbot3, g.Gcommpanbot4, g.Gcommpanfull, g.EquinoxPrn, g.EquinoxSec).Scan(&g.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	g._exists = true

	return nil
}

// Update updates the Gcommpan in the database.
func (g *Gcommpan) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !g._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if g._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.gcommpan SET (` +
		`gcommpanprofile, gcommpanmts, gcommpanllf, gcommpanbot1, gcommpanbot2, gcommpanbot3, gcommpanbot4, gcommpanfull, equinox_prn, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10` +
		`) WHERE equinox_lrn = $11`

	// run query
	XOLog(sqlstr, g.Gcommpanprofile, g.Gcommpanmts, g.Gcommpanllf, g.Gcommpanbot1, g.Gcommpanbot2, g.Gcommpanbot3, g.Gcommpanbot4, g.Gcommpanfull, g.EquinoxPrn, g.EquinoxSec, g.EquinoxLrn)
	_, err = db.Exec(sqlstr, g.Gcommpanprofile, g.Gcommpanmts, g.Gcommpanllf, g.Gcommpanbot1, g.Gcommpanbot2, g.Gcommpanbot3, g.Gcommpanbot4, g.Gcommpanfull, g.EquinoxPrn, g.EquinoxSec, g.EquinoxLrn)
	return err
}

// Save saves the Gcommpan to the database.
func (g *Gcommpan) Save(db XODB) error {
	if g.Exists() {
		return g.Update(db)
	}

	return g.Insert(db)
}

// Upsert performs an upsert for Gcommpan.
//
// NOTE: PostgreSQL 9.5+ only
func (g *Gcommpan) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if g._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.gcommpan (` +
		`gcommpanprofile, gcommpanmts, gcommpanllf, gcommpanbot1, gcommpanbot2, gcommpanbot3, gcommpanbot4, gcommpanfull, equinox_prn, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`gcommpanprofile, gcommpanmts, gcommpanllf, gcommpanbot1, gcommpanbot2, gcommpanbot3, gcommpanbot4, gcommpanfull, equinox_prn, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.gcommpanprofile, EXCLUDED.gcommpanmts, EXCLUDED.gcommpanllf, EXCLUDED.gcommpanbot1, EXCLUDED.gcommpanbot2, EXCLUDED.gcommpanbot3, EXCLUDED.gcommpanbot4, EXCLUDED.gcommpanfull, EXCLUDED.equinox_prn, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, g.Gcommpanprofile, g.Gcommpanmts, g.Gcommpanllf, g.Gcommpanbot1, g.Gcommpanbot2, g.Gcommpanbot3, g.Gcommpanbot4, g.Gcommpanfull, g.EquinoxPrn, g.EquinoxLrn, g.EquinoxSec)
	_, err = db.Exec(sqlstr, g.Gcommpanprofile, g.Gcommpanmts, g.Gcommpanllf, g.Gcommpanbot1, g.Gcommpanbot2, g.Gcommpanbot3, g.Gcommpanbot4, g.Gcommpanfull, g.EquinoxPrn, g.EquinoxLrn, g.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	g._exists = true

	return nil
}

// Delete deletes the Gcommpan from the database.
func (g *Gcommpan) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !g._exists {
		return nil
	}

	// if deleted, bail
	if g._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.gcommpan WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, g.EquinoxLrn)
	_, err = db.Exec(sqlstr, g.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	g._deleted = true

	return nil
}

// GcommpanByEquinoxLrn retrieves a row from 'equinox.gcommpan' as a Gcommpan.
//
// Generated from index 'gcommpan_pkey'.
func GcommpanByEquinoxLrn(db XODB, equinoxLrn int64) (*Gcommpan, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`gcommpanprofile, gcommpanmts, gcommpanllf, gcommpanbot1, gcommpanbot2, gcommpanbot3, gcommpanbot4, gcommpanfull, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.gcommpan ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	g := Gcommpan{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&g.Gcommpanprofile, &g.Gcommpanmts, &g.Gcommpanllf, &g.Gcommpanbot1, &g.Gcommpanbot2, &g.Gcommpanbot3, &g.Gcommpanbot4, &g.Gcommpanfull, &g.EquinoxPrn, &g.EquinoxLrn, &g.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &g, nil
}
