// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/lib/pq"
)

// Regphist represents a row from 'equinox.regphist'.
type Regphist struct {
	RphPromonamex   sql.NullString `json:"rph_promonamex"`   // rph_promonamex
	RphQualifyingx  sql.NullInt64  `json:"rph_qualifyingx"`  // rph_qualifyingx
	RphDatex        pq.NullTime    `json:"rph_datex"`        // rph_datex
	RphNotesx       sql.NullInt64  `json:"rph_notesx"`       // rph_notesx
	RphPeriodcountx sql.NullInt64  `json:"rph_periodcountx"` // rph_periodcountx
	RphPeriodstartx pq.NullTime    `json:"rph_periodstartx"` // rph_periodstartx
	RphPeriodendx   pq.NullTime    `json:"rph_periodendx"`   // rph_periodendx
	RphStatusx      sql.NullInt64  `json:"rph_statusx"`      // rph_statusx
	EquinoxPrn      sql.NullInt64  `json:"equinox_prn"`      // equinox_prn
	EquinoxLrn      int64          `json:"equinox_lrn"`      // equinox_lrn
	EquinoxSec      sql.NullInt64  `json:"equinox_sec"`      // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Regphist exists in the database.
func (r *Regphist) Exists() bool {
	return r._exists
}

// Deleted provides information if the Regphist has been deleted from the database.
func (r *Regphist) Deleted() bool {
	return r._deleted
}

// Insert inserts the Regphist to the database.
func (r *Regphist) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if r._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.regphist (` +
		`rph_promonamex, rph_qualifyingx, rph_datex, rph_notesx, rph_periodcountx, rph_periodstartx, rph_periodendx, rph_statusx, equinox_prn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, r.RphPromonamex, r.RphQualifyingx, r.RphDatex, r.RphNotesx, r.RphPeriodcountx, r.RphPeriodstartx, r.RphPeriodendx, r.RphStatusx, r.EquinoxPrn, r.EquinoxSec)
	err = db.QueryRow(sqlstr, r.RphPromonamex, r.RphQualifyingx, r.RphDatex, r.RphNotesx, r.RphPeriodcountx, r.RphPeriodstartx, r.RphPeriodendx, r.RphStatusx, r.EquinoxPrn, r.EquinoxSec).Scan(&r.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	r._exists = true

	return nil
}

// Update updates the Regphist in the database.
func (r *Regphist) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !r._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if r._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.regphist SET (` +
		`rph_promonamex, rph_qualifyingx, rph_datex, rph_notesx, rph_periodcountx, rph_periodstartx, rph_periodendx, rph_statusx, equinox_prn, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10` +
		`) WHERE equinox_lrn = $11`

	// run query
	XOLog(sqlstr, r.RphPromonamex, r.RphQualifyingx, r.RphDatex, r.RphNotesx, r.RphPeriodcountx, r.RphPeriodstartx, r.RphPeriodendx, r.RphStatusx, r.EquinoxPrn, r.EquinoxSec, r.EquinoxLrn)
	_, err = db.Exec(sqlstr, r.RphPromonamex, r.RphQualifyingx, r.RphDatex, r.RphNotesx, r.RphPeriodcountx, r.RphPeriodstartx, r.RphPeriodendx, r.RphStatusx, r.EquinoxPrn, r.EquinoxSec, r.EquinoxLrn)
	return err
}

// Save saves the Regphist to the database.
func (r *Regphist) Save(db XODB) error {
	if r.Exists() {
		return r.Update(db)
	}

	return r.Insert(db)
}

// Upsert performs an upsert for Regphist.
//
// NOTE: PostgreSQL 9.5+ only
func (r *Regphist) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if r._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.regphist (` +
		`rph_promonamex, rph_qualifyingx, rph_datex, rph_notesx, rph_periodcountx, rph_periodstartx, rph_periodendx, rph_statusx, equinox_prn, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`rph_promonamex, rph_qualifyingx, rph_datex, rph_notesx, rph_periodcountx, rph_periodstartx, rph_periodendx, rph_statusx, equinox_prn, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.rph_promonamex, EXCLUDED.rph_qualifyingx, EXCLUDED.rph_datex, EXCLUDED.rph_notesx, EXCLUDED.rph_periodcountx, EXCLUDED.rph_periodstartx, EXCLUDED.rph_periodendx, EXCLUDED.rph_statusx, EXCLUDED.equinox_prn, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, r.RphPromonamex, r.RphQualifyingx, r.RphDatex, r.RphNotesx, r.RphPeriodcountx, r.RphPeriodstartx, r.RphPeriodendx, r.RphStatusx, r.EquinoxPrn, r.EquinoxLrn, r.EquinoxSec)
	_, err = db.Exec(sqlstr, r.RphPromonamex, r.RphQualifyingx, r.RphDatex, r.RphNotesx, r.RphPeriodcountx, r.RphPeriodstartx, r.RphPeriodendx, r.RphStatusx, r.EquinoxPrn, r.EquinoxLrn, r.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	r._exists = true

	return nil
}

// Delete deletes the Regphist from the database.
func (r *Regphist) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !r._exists {
		return nil
	}

	// if deleted, bail
	if r._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.regphist WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, r.EquinoxLrn)
	_, err = db.Exec(sqlstr, r.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	r._deleted = true

	return nil
}

// RegphistByEquinoxLrn retrieves a row from 'equinox.regphist' as a Regphist.
//
// Generated from index 'regphist_pkey'.
func RegphistByEquinoxLrn(db XODB, equinoxLrn int64) (*Regphist, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`rph_promonamex, rph_qualifyingx, rph_datex, rph_notesx, rph_periodcountx, rph_periodstartx, rph_periodendx, rph_statusx, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.regphist ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	r := Regphist{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&r.RphPromonamex, &r.RphQualifyingx, &r.RphDatex, &r.RphNotesx, &r.RphPeriodcountx, &r.RphPeriodstartx, &r.RphPeriodendx, &r.RphStatusx, &r.EquinoxPrn, &r.EquinoxLrn, &r.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &r, nil
}
