// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import "database/sql"

// Chrgcall represents a row from 'equinox.chrgcall'.
type Chrgcall struct {
	Chrgcode         sql.NullString  `json:"chrgcode"`         // chrgcode
	Chrgmincostpence sql.NullFloat64 `json:"chrgmincostpence"` // chrgmincostpence
	Chrgcallunits    sql.NullInt64   `json:"chrgcallunits"`    // chrgcallunits
	Chrgminduration  sql.NullInt64   `json:"chrgminduration"`  // chrgminduration
	Chrgroundingpenc sql.NullInt64   `json:"chrgroundingpenc"` // chrgroundingpenc
	Chrgcallsetup    sql.NullFloat64 `json:"chrgcallsetup"`    // chrgcallsetup
	Chrgaccesspence  sql.NullFloat64 `json:"chrgaccesspence"`  // chrgaccesspence
	Chrgroundup      sql.NullInt64   `json:"chrgroundup"`      // chrgroundup
	Chrgdescrip      sql.NullString  `json:"chrgdescrip"`      // chrgdescrip
	Chrgmaxcostpence sql.NullFloat64 `json:"chrgmaxcostpence"` // chrgmaxcostpence
	EquinoxLrn       int64           `json:"equinox_lrn"`      // equinox_lrn
	EquinoxSec       sql.NullInt64   `json:"equinox_sec"`      // equinox_sec
}

// ChrgcallByEquinoxLrn retrieves a row from 'equinox.chrgcall' as a Chrgcall.
//
// Generated from index 'chrgcall_pkey'.
func ChrgcallByEquinoxLrn(db XODB, equinoxLrn int64) (*Chrgcall, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`chrgcode, chrgmincostpence, chrgcallunits, chrgminduration, chrgroundingpenc, chrgcallsetup, chrgaccesspence, chrgroundup, chrgdescrip, chrgmaxcostpence, equinox_lrn, equinox_sec ` +
		`FROM equinox.chrgcall ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	c := Chrgcall{}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&c.Chrgcode, &c.Chrgmincostpence, &c.Chrgcallunits, &c.Chrgminduration, &c.Chrgroundingpenc, &c.Chrgcallsetup, &c.Chrgaccesspence, &c.Chrgroundup, &c.Chrgdescrip, &c.Chrgmaxcostpence, &c.EquinoxLrn, &c.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &c, nil
}
