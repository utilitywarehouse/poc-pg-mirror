// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// Holcust represents a row from 'equinox.holcust'.
type Holcust struct {
	Holcustmonth     sql.NullString  `json:"holcustmonth"`     // holcustmonth
	Holcustcustaccno sql.NullString  `json:"holcustcustaccno"` // holcustcustaccno
	Holcustinitsvs   sql.NullInt64   `json:"holcustinitsvs"`   // holcustinitsvs
	Holcustlivesvs1  sql.NullInt64   `json:"holcustlivesvs1"`  // holcustlivesvs1
	Holcustlivesvs2  sql.NullInt64   `json:"holcustlivesvs2"`  // holcustlivesvs2
	Holcustdebt      sql.NullFloat64 `json:"holcustdebt"`      // holcustdebt
	Holcustrevenue   sql.NullFloat64 `json:"holcustrevenue"`   // holcustrevenue
	EquinoxPrn       sql.NullInt64   `json:"equinox_prn"`      // equinox_prn
	EquinoxLrn       int64           `json:"equinox_lrn"`      // equinox_lrn
	EquinoxSec       sql.NullInt64   `json:"equinox_sec"`      // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Holcust exists in the database.
func (h *Holcust) Exists() bool {
	return h._exists
}

// Deleted provides information if the Holcust has been deleted from the database.
func (h *Holcust) Deleted() bool {
	return h._deleted
}

// Insert inserts the Holcust to the database.
func (h *Holcust) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if h._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.holcust (` +
		`holcustmonth, holcustcustaccno, holcustinitsvs, holcustlivesvs1, holcustlivesvs2, holcustdebt, holcustrevenue, equinox_prn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, h.Holcustmonth, h.Holcustcustaccno, h.Holcustinitsvs, h.Holcustlivesvs1, h.Holcustlivesvs2, h.Holcustdebt, h.Holcustrevenue, h.EquinoxPrn, h.EquinoxSec)
	err = db.QueryRow(sqlstr, h.Holcustmonth, h.Holcustcustaccno, h.Holcustinitsvs, h.Holcustlivesvs1, h.Holcustlivesvs2, h.Holcustdebt, h.Holcustrevenue, h.EquinoxPrn, h.EquinoxSec).Scan(&h.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	h._exists = true

	return nil
}

// Update updates the Holcust in the database.
func (h *Holcust) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !h._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if h._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.holcust SET (` +
		`holcustmonth, holcustcustaccno, holcustinitsvs, holcustlivesvs1, holcustlivesvs2, holcustdebt, holcustrevenue, equinox_prn, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9` +
		`) WHERE equinox_lrn = $10`

	// run query
	XOLog(sqlstr, h.Holcustmonth, h.Holcustcustaccno, h.Holcustinitsvs, h.Holcustlivesvs1, h.Holcustlivesvs2, h.Holcustdebt, h.Holcustrevenue, h.EquinoxPrn, h.EquinoxSec, h.EquinoxLrn)
	_, err = db.Exec(sqlstr, h.Holcustmonth, h.Holcustcustaccno, h.Holcustinitsvs, h.Holcustlivesvs1, h.Holcustlivesvs2, h.Holcustdebt, h.Holcustrevenue, h.EquinoxPrn, h.EquinoxSec, h.EquinoxLrn)
	return err
}

// Save saves the Holcust to the database.
func (h *Holcust) Save(db XODB) error {
	if h.Exists() {
		return h.Update(db)
	}

	return h.Insert(db)
}

// Upsert performs an upsert for Holcust.
//
// NOTE: PostgreSQL 9.5+ only
func (h *Holcust) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if h._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.holcust (` +
		`holcustmonth, holcustcustaccno, holcustinitsvs, holcustlivesvs1, holcustlivesvs2, holcustdebt, holcustrevenue, equinox_prn, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`holcustmonth, holcustcustaccno, holcustinitsvs, holcustlivesvs1, holcustlivesvs2, holcustdebt, holcustrevenue, equinox_prn, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.holcustmonth, EXCLUDED.holcustcustaccno, EXCLUDED.holcustinitsvs, EXCLUDED.holcustlivesvs1, EXCLUDED.holcustlivesvs2, EXCLUDED.holcustdebt, EXCLUDED.holcustrevenue, EXCLUDED.equinox_prn, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, h.Holcustmonth, h.Holcustcustaccno, h.Holcustinitsvs, h.Holcustlivesvs1, h.Holcustlivesvs2, h.Holcustdebt, h.Holcustrevenue, h.EquinoxPrn, h.EquinoxLrn, h.EquinoxSec)
	_, err = db.Exec(sqlstr, h.Holcustmonth, h.Holcustcustaccno, h.Holcustinitsvs, h.Holcustlivesvs1, h.Holcustlivesvs2, h.Holcustdebt, h.Holcustrevenue, h.EquinoxPrn, h.EquinoxLrn, h.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	h._exists = true

	return nil
}

// Delete deletes the Holcust from the database.
func (h *Holcust) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !h._exists {
		return nil
	}

	// if deleted, bail
	if h._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.holcust WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, h.EquinoxLrn)
	_, err = db.Exec(sqlstr, h.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	h._deleted = true

	return nil
}

// HolcustByEquinoxLrn retrieves a row from 'equinox.holcust' as a Holcust.
//
// Generated from index 'holcust_pkey'.
func HolcustByEquinoxLrn(db XODB, equinoxLrn int64) (*Holcust, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`holcustmonth, holcustcustaccno, holcustinitsvs, holcustlivesvs1, holcustlivesvs2, holcustdebt, holcustrevenue, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.holcust ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	h := Holcust{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&h.Holcustmonth, &h.Holcustcustaccno, &h.Holcustinitsvs, &h.Holcustlivesvs1, &h.Holcustlivesvs2, &h.Holcustdebt, &h.Holcustrevenue, &h.EquinoxPrn, &h.EquinoxLrn, &h.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &h, nil
}
