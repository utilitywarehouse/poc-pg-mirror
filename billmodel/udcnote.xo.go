// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/lib/pq"
)

// Udcnote represents a row from 'equinox.udcnotes'.
type Udcnote struct {
	Udcnotes         sql.NullInt64  `json:"udcnotes"`         // udcnotes
	Udcentereddate   pq.NullTime    `json:"udcentereddate"`   // udcentereddate
	Udcenteredtime   pq.NullTime    `json:"udcenteredtime"`   // udcenteredtime
	Udcenteredby     sql.NullString `json:"udcenteredby"`     // udcenteredby
	Uddateofreminder pq.NullTime    `json:"uddateofreminder"` // uddateofreminder
	Udcdiarise       sql.NullInt64  `json:"udcdiarise"`       // udcdiarise
	Udcncategory     sql.NullString `json:"udcncategory"`     // udcncategory
	EquinoxPrn       sql.NullInt64  `json:"equinox_prn"`      // equinox_prn
	EquinoxLrn       int64          `json:"equinox_lrn"`      // equinox_lrn
	EquinoxSec       sql.NullInt64  `json:"equinox_sec"`      // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Udcnote exists in the database.
func (u *Udcnote) Exists() bool {
	return u._exists
}

// Deleted provides information if the Udcnote has been deleted from the database.
func (u *Udcnote) Deleted() bool {
	return u._deleted
}

// Insert inserts the Udcnote to the database.
func (u *Udcnote) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if u._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.udcnotes (` +
		`udcnotes, udcentereddate, udcenteredtime, udcenteredby, uddateofreminder, udcdiarise, udcncategory, equinox_prn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, u.Udcnotes, u.Udcentereddate, u.Udcenteredtime, u.Udcenteredby, u.Uddateofreminder, u.Udcdiarise, u.Udcncategory, u.EquinoxPrn, u.EquinoxSec)
	err = db.QueryRow(sqlstr, u.Udcnotes, u.Udcentereddate, u.Udcenteredtime, u.Udcenteredby, u.Uddateofreminder, u.Udcdiarise, u.Udcncategory, u.EquinoxPrn, u.EquinoxSec).Scan(&u.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	u._exists = true

	return nil
}

// Update updates the Udcnote in the database.
func (u *Udcnote) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !u._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if u._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.udcnotes SET (` +
		`udcnotes, udcentereddate, udcenteredtime, udcenteredby, uddateofreminder, udcdiarise, udcncategory, equinox_prn, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9` +
		`) WHERE equinox_lrn = $10`

	// run query
	XOLog(sqlstr, u.Udcnotes, u.Udcentereddate, u.Udcenteredtime, u.Udcenteredby, u.Uddateofreminder, u.Udcdiarise, u.Udcncategory, u.EquinoxPrn, u.EquinoxSec, u.EquinoxLrn)
	_, err = db.Exec(sqlstr, u.Udcnotes, u.Udcentereddate, u.Udcenteredtime, u.Udcenteredby, u.Uddateofreminder, u.Udcdiarise, u.Udcncategory, u.EquinoxPrn, u.EquinoxSec, u.EquinoxLrn)
	return err
}

// Save saves the Udcnote to the database.
func (u *Udcnote) Save(db XODB) error {
	if u.Exists() {
		return u.Update(db)
	}

	return u.Insert(db)
}

// Upsert performs an upsert for Udcnote.
//
// NOTE: PostgreSQL 9.5+ only
func (u *Udcnote) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if u._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.udcnotes (` +
		`udcnotes, udcentereddate, udcenteredtime, udcenteredby, uddateofreminder, udcdiarise, udcncategory, equinox_prn, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`udcnotes, udcentereddate, udcenteredtime, udcenteredby, uddateofreminder, udcdiarise, udcncategory, equinox_prn, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.udcnotes, EXCLUDED.udcentereddate, EXCLUDED.udcenteredtime, EXCLUDED.udcenteredby, EXCLUDED.uddateofreminder, EXCLUDED.udcdiarise, EXCLUDED.udcncategory, EXCLUDED.equinox_prn, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, u.Udcnotes, u.Udcentereddate, u.Udcenteredtime, u.Udcenteredby, u.Uddateofreminder, u.Udcdiarise, u.Udcncategory, u.EquinoxPrn, u.EquinoxLrn, u.EquinoxSec)
	_, err = db.Exec(sqlstr, u.Udcnotes, u.Udcentereddate, u.Udcenteredtime, u.Udcenteredby, u.Uddateofreminder, u.Udcdiarise, u.Udcncategory, u.EquinoxPrn, u.EquinoxLrn, u.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	u._exists = true

	return nil
}

// Delete deletes the Udcnote from the database.
func (u *Udcnote) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !u._exists {
		return nil
	}

	// if deleted, bail
	if u._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.udcnotes WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, u.EquinoxLrn)
	_, err = db.Exec(sqlstr, u.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	u._deleted = true

	return nil
}

// UdcnoteByEquinoxLrn retrieves a row from 'equinox.udcnotes' as a Udcnote.
//
// Generated from index 'udcnotes_pkey'.
func UdcnoteByEquinoxLrn(db XODB, equinoxLrn int64) (*Udcnote, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`udcnotes, udcentereddate, udcenteredtime, udcenteredby, uddateofreminder, udcdiarise, udcncategory, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.udcnotes ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	u := Udcnote{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&u.Udcnotes, &u.Udcentereddate, &u.Udcenteredtime, &u.Udcenteredby, &u.Uddateofreminder, &u.Udcdiarise, &u.Udcncategory, &u.EquinoxPrn, &u.EquinoxLrn, &u.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &u, nil
}
