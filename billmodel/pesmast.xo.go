// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/lib/pq"
)

// Pesmast represents a row from 'equinox.pesmast'.
type Pesmast struct {
	Pmtariff       sql.NullString  `json:"pmtariff"`       // pmtariff
	Pmdescription  sql.NullString  `json:"pmdescription"`  // pmdescription
	Pmpaymethod    sql.NullString  `json:"pmpaymethod"`    // pmpaymethod
	Pmdatefrom     pq.NullTime     `json:"pmdatefrom"`     // pmdatefrom
	Pmdateto       pq.NullTime     `json:"pmdateto"`       // pmdateto
	Pmrmrflag      sql.NullString  `json:"pmrmrflag"`      // pmrmrflag
	Pmmonthorday   sql.NullString  `json:"pmmonthorday"`   // pmmonthorday
	Pmfixeddateend pq.NullTime     `json:"pmfixeddateend"` // pmfixeddateend
	Pmtype         sql.NullString  `json:"pmtype"`         // pmtype
	Pmtiedshort    sql.NullInt64   `json:"pmtiedshort"`    // pmtiedshort
	Pmtiedlong     sql.NullInt64   `json:"pmtiedlong"`     // pmtiedlong
	Pmrct          sql.NullString  `json:"pmrct"`          // pmrct
	Pmact          sql.NullString  `json:"pmact"`          // pmact
	Pmtermfee      sql.NullFloat64 `json:"pmtermfee"`      // pmtermfee
	Pmddequiv      sql.NullString  `json:"pmddequiv"`      // pmddequiv
	Pmnonddeqiv    sql.NullString  `json:"pmnonddeqiv"`    // pmnonddeqiv
	EquinoxLrn     int64           `json:"equinox_lrn"`    // equinox_lrn
	EquinoxSec     sql.NullInt64   `json:"equinox_sec"`    // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Pesmast exists in the database.
func (p *Pesmast) Exists() bool {
	return p._exists
}

// Deleted provides information if the Pesmast has been deleted from the database.
func (p *Pesmast) Deleted() bool {
	return p._deleted
}

// Insert inserts the Pesmast to the database.
func (p *Pesmast) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if p._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.pesmast (` +
		`pmtariff, pmdescription, pmpaymethod, pmdatefrom, pmdateto, pmrmrflag, pmmonthorday, pmfixeddateend, pmtype, pmtiedshort, pmtiedlong, pmrct, pmact, pmtermfee, pmddequiv, pmnonddeqiv, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, p.Pmtariff, p.Pmdescription, p.Pmpaymethod, p.Pmdatefrom, p.Pmdateto, p.Pmrmrflag, p.Pmmonthorday, p.Pmfixeddateend, p.Pmtype, p.Pmtiedshort, p.Pmtiedlong, p.Pmrct, p.Pmact, p.Pmtermfee, p.Pmddequiv, p.Pmnonddeqiv, p.EquinoxSec)
	err = db.QueryRow(sqlstr, p.Pmtariff, p.Pmdescription, p.Pmpaymethod, p.Pmdatefrom, p.Pmdateto, p.Pmrmrflag, p.Pmmonthorday, p.Pmfixeddateend, p.Pmtype, p.Pmtiedshort, p.Pmtiedlong, p.Pmrct, p.Pmact, p.Pmtermfee, p.Pmddequiv, p.Pmnonddeqiv, p.EquinoxSec).Scan(&p.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	p._exists = true

	return nil
}

// Update updates the Pesmast in the database.
func (p *Pesmast) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if p._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.pesmast SET (` +
		`pmtariff, pmdescription, pmpaymethod, pmdatefrom, pmdateto, pmrmrflag, pmmonthorday, pmfixeddateend, pmtype, pmtiedshort, pmtiedlong, pmrct, pmact, pmtermfee, pmddequiv, pmnonddeqiv, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17` +
		`) WHERE equinox_lrn = $18`

	// run query
	XOLog(sqlstr, p.Pmtariff, p.Pmdescription, p.Pmpaymethod, p.Pmdatefrom, p.Pmdateto, p.Pmrmrflag, p.Pmmonthorday, p.Pmfixeddateend, p.Pmtype, p.Pmtiedshort, p.Pmtiedlong, p.Pmrct, p.Pmact, p.Pmtermfee, p.Pmddequiv, p.Pmnonddeqiv, p.EquinoxSec, p.EquinoxLrn)
	_, err = db.Exec(sqlstr, p.Pmtariff, p.Pmdescription, p.Pmpaymethod, p.Pmdatefrom, p.Pmdateto, p.Pmrmrflag, p.Pmmonthorday, p.Pmfixeddateend, p.Pmtype, p.Pmtiedshort, p.Pmtiedlong, p.Pmrct, p.Pmact, p.Pmtermfee, p.Pmddequiv, p.Pmnonddeqiv, p.EquinoxSec, p.EquinoxLrn)
	return err
}

// Save saves the Pesmast to the database.
func (p *Pesmast) Save(db XODB) error {
	if p.Exists() {
		return p.Update(db)
	}

	return p.Insert(db)
}

// Upsert performs an upsert for Pesmast.
//
// NOTE: PostgreSQL 9.5+ only
func (p *Pesmast) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if p._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.pesmast (` +
		`pmtariff, pmdescription, pmpaymethod, pmdatefrom, pmdateto, pmrmrflag, pmmonthorday, pmfixeddateend, pmtype, pmtiedshort, pmtiedlong, pmrct, pmact, pmtermfee, pmddequiv, pmnonddeqiv, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`pmtariff, pmdescription, pmpaymethod, pmdatefrom, pmdateto, pmrmrflag, pmmonthorday, pmfixeddateend, pmtype, pmtiedshort, pmtiedlong, pmrct, pmact, pmtermfee, pmddequiv, pmnonddeqiv, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.pmtariff, EXCLUDED.pmdescription, EXCLUDED.pmpaymethod, EXCLUDED.pmdatefrom, EXCLUDED.pmdateto, EXCLUDED.pmrmrflag, EXCLUDED.pmmonthorday, EXCLUDED.pmfixeddateend, EXCLUDED.pmtype, EXCLUDED.pmtiedshort, EXCLUDED.pmtiedlong, EXCLUDED.pmrct, EXCLUDED.pmact, EXCLUDED.pmtermfee, EXCLUDED.pmddequiv, EXCLUDED.pmnonddeqiv, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, p.Pmtariff, p.Pmdescription, p.Pmpaymethod, p.Pmdatefrom, p.Pmdateto, p.Pmrmrflag, p.Pmmonthorday, p.Pmfixeddateend, p.Pmtype, p.Pmtiedshort, p.Pmtiedlong, p.Pmrct, p.Pmact, p.Pmtermfee, p.Pmddequiv, p.Pmnonddeqiv, p.EquinoxLrn, p.EquinoxSec)
	_, err = db.Exec(sqlstr, p.Pmtariff, p.Pmdescription, p.Pmpaymethod, p.Pmdatefrom, p.Pmdateto, p.Pmrmrflag, p.Pmmonthorday, p.Pmfixeddateend, p.Pmtype, p.Pmtiedshort, p.Pmtiedlong, p.Pmrct, p.Pmact, p.Pmtermfee, p.Pmddequiv, p.Pmnonddeqiv, p.EquinoxLrn, p.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	p._exists = true

	return nil
}

// Delete deletes the Pesmast from the database.
func (p *Pesmast) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return nil
	}

	// if deleted, bail
	if p._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.pesmast WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, p.EquinoxLrn)
	_, err = db.Exec(sqlstr, p.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	p._deleted = true

	return nil
}

// PesmastByEquinoxLrn retrieves a row from 'equinox.pesmast' as a Pesmast.
//
// Generated from index 'pesmast_pkey'.
func PesmastByEquinoxLrn(db XODB, equinoxLrn int64) (*Pesmast, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`pmtariff, pmdescription, pmpaymethod, pmdatefrom, pmdateto, pmrmrflag, pmmonthorday, pmfixeddateend, pmtype, pmtiedshort, pmtiedlong, pmrct, pmact, pmtermfee, pmddequiv, pmnonddeqiv, equinox_lrn, equinox_sec ` +
		`FROM equinox.pesmast ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	p := Pesmast{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&p.Pmtariff, &p.Pmdescription, &p.Pmpaymethod, &p.Pmdatefrom, &p.Pmdateto, &p.Pmrmrflag, &p.Pmmonthorday, &p.Pmfixeddateend, &p.Pmtype, &p.Pmtiedshort, &p.Pmtiedlong, &p.Pmrct, &p.Pmact, &p.Pmtermfee, &p.Pmddequiv, &p.Pmnonddeqiv, &p.EquinoxLrn, &p.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &p, nil
}
