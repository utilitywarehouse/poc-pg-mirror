// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/lib/pq"
)

// Bank represents a row from 'equinox.banks'.
type Bank struct {
	Banksortcode   sql.NullString  `json:"banksortcode"`   // banksortcode
	Bankname       sql.NullString  `json:"bankname"`       // bankname
	Bankadd1       sql.NullString  `json:"bankadd1"`       // bankadd1
	Bankadd2       sql.NullString  `json:"bankadd2"`       // bankadd2
	Bankadd3       sql.NullString  `json:"bankadd3"`       // bankadd3
	Bankadd4       sql.NullString  `json:"bankadd4"`       // bankadd4
	Bankadd5       sql.NullString  `json:"bankadd5"`       // bankadd5
	Bankpostcode   sql.NullString  `json:"bankpostcode"`   // bankpostcode
	Bankmask       sql.NullString  `json:"bankmask"`       // bankmask
	Bankmodulus    sql.NullFloat64 `json:"bankmodulus"`    // bankmodulus
	Bankbranchname sql.NullString  `json:"bankbranchname"` // bankbranchname
	Bankspared1    pq.NullTime     `json:"bankspared1"`    // bankspared1
	Bankspared2    pq.NullTime     `json:"bankspared2"`    // bankspared2
	Bankspared3    pq.NullTime     `json:"bankspared3"`    // bankspared3
	Banksparec1    sql.NullString  `json:"banksparec1"`    // banksparec1
	Banksparec2    sql.NullString  `json:"banksparec2"`    // banksparec2
	Banksparec3    sql.NullString  `json:"banksparec3"`    // banksparec3
	Banksparen1    sql.NullFloat64 `json:"banksparen1"`    // banksparen1
	Banksparen2    sql.NullFloat64 `json:"banksparen2"`    // banksparen2
	Banksparen3    sql.NullFloat64 `json:"banksparen3"`    // banksparen3
	EquinoxLrn     int64           `json:"equinox_lrn"`    // equinox_lrn
	EquinoxSec     sql.NullInt64   `json:"equinox_sec"`    // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Bank exists in the database.
func (b *Bank) Exists() bool {
	return b._exists
}

// Deleted provides information if the Bank has been deleted from the database.
func (b *Bank) Deleted() bool {
	return b._deleted
}

// Insert inserts the Bank to the database.
func (b *Bank) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if b._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.banks (` +
		`banksortcode, bankname, bankadd1, bankadd2, bankadd3, bankadd4, bankadd5, bankpostcode, bankmask, bankmodulus, bankbranchname, bankspared1, bankspared2, bankspared3, banksparec1, banksparec2, banksparec3, banksparen1, banksparen2, banksparen3, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, b.Banksortcode, b.Bankname, b.Bankadd1, b.Bankadd2, b.Bankadd3, b.Bankadd4, b.Bankadd5, b.Bankpostcode, b.Bankmask, b.Bankmodulus, b.Bankbranchname, b.Bankspared1, b.Bankspared2, b.Bankspared3, b.Banksparec1, b.Banksparec2, b.Banksparec3, b.Banksparen1, b.Banksparen2, b.Banksparen3, b.EquinoxSec)
	err = db.QueryRow(sqlstr, b.Banksortcode, b.Bankname, b.Bankadd1, b.Bankadd2, b.Bankadd3, b.Bankadd4, b.Bankadd5, b.Bankpostcode, b.Bankmask, b.Bankmodulus, b.Bankbranchname, b.Bankspared1, b.Bankspared2, b.Bankspared3, b.Banksparec1, b.Banksparec2, b.Banksparec3, b.Banksparen1, b.Banksparen2, b.Banksparen3, b.EquinoxSec).Scan(&b.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	b._exists = true

	return nil
}

// Update updates the Bank in the database.
func (b *Bank) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !b._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if b._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.banks SET (` +
		`banksortcode, bankname, bankadd1, bankadd2, bankadd3, bankadd4, bankadd5, bankpostcode, bankmask, bankmodulus, bankbranchname, bankspared1, bankspared2, bankspared3, banksparec1, banksparec2, banksparec3, banksparen1, banksparen2, banksparen3, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21` +
		`) WHERE equinox_lrn = $22`

	// run query
	XOLog(sqlstr, b.Banksortcode, b.Bankname, b.Bankadd1, b.Bankadd2, b.Bankadd3, b.Bankadd4, b.Bankadd5, b.Bankpostcode, b.Bankmask, b.Bankmodulus, b.Bankbranchname, b.Bankspared1, b.Bankspared2, b.Bankspared3, b.Banksparec1, b.Banksparec2, b.Banksparec3, b.Banksparen1, b.Banksparen2, b.Banksparen3, b.EquinoxSec, b.EquinoxLrn)
	_, err = db.Exec(sqlstr, b.Banksortcode, b.Bankname, b.Bankadd1, b.Bankadd2, b.Bankadd3, b.Bankadd4, b.Bankadd5, b.Bankpostcode, b.Bankmask, b.Bankmodulus, b.Bankbranchname, b.Bankspared1, b.Bankspared2, b.Bankspared3, b.Banksparec1, b.Banksparec2, b.Banksparec3, b.Banksparen1, b.Banksparen2, b.Banksparen3, b.EquinoxSec, b.EquinoxLrn)
	return err
}

// Save saves the Bank to the database.
func (b *Bank) Save(db XODB) error {
	if b.Exists() {
		return b.Update(db)
	}

	return b.Insert(db)
}

// Upsert performs an upsert for Bank.
//
// NOTE: PostgreSQL 9.5+ only
func (b *Bank) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if b._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.banks (` +
		`banksortcode, bankname, bankadd1, bankadd2, bankadd3, bankadd4, bankadd5, bankpostcode, bankmask, bankmodulus, bankbranchname, bankspared1, bankspared2, bankspared3, banksparec1, banksparec2, banksparec3, banksparen1, banksparen2, banksparen3, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`banksortcode, bankname, bankadd1, bankadd2, bankadd3, bankadd4, bankadd5, bankpostcode, bankmask, bankmodulus, bankbranchname, bankspared1, bankspared2, bankspared3, banksparec1, banksparec2, banksparec3, banksparen1, banksparen2, banksparen3, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.banksortcode, EXCLUDED.bankname, EXCLUDED.bankadd1, EXCLUDED.bankadd2, EXCLUDED.bankadd3, EXCLUDED.bankadd4, EXCLUDED.bankadd5, EXCLUDED.bankpostcode, EXCLUDED.bankmask, EXCLUDED.bankmodulus, EXCLUDED.bankbranchname, EXCLUDED.bankspared1, EXCLUDED.bankspared2, EXCLUDED.bankspared3, EXCLUDED.banksparec1, EXCLUDED.banksparec2, EXCLUDED.banksparec3, EXCLUDED.banksparen1, EXCLUDED.banksparen2, EXCLUDED.banksparen3, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, b.Banksortcode, b.Bankname, b.Bankadd1, b.Bankadd2, b.Bankadd3, b.Bankadd4, b.Bankadd5, b.Bankpostcode, b.Bankmask, b.Bankmodulus, b.Bankbranchname, b.Bankspared1, b.Bankspared2, b.Bankspared3, b.Banksparec1, b.Banksparec2, b.Banksparec3, b.Banksparen1, b.Banksparen2, b.Banksparen3, b.EquinoxLrn, b.EquinoxSec)
	_, err = db.Exec(sqlstr, b.Banksortcode, b.Bankname, b.Bankadd1, b.Bankadd2, b.Bankadd3, b.Bankadd4, b.Bankadd5, b.Bankpostcode, b.Bankmask, b.Bankmodulus, b.Bankbranchname, b.Bankspared1, b.Bankspared2, b.Bankspared3, b.Banksparec1, b.Banksparec2, b.Banksparec3, b.Banksparen1, b.Banksparen2, b.Banksparen3, b.EquinoxLrn, b.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	b._exists = true

	return nil
}

// Delete deletes the Bank from the database.
func (b *Bank) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !b._exists {
		return nil
	}

	// if deleted, bail
	if b._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.banks WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, b.EquinoxLrn)
	_, err = db.Exec(sqlstr, b.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	b._deleted = true

	return nil
}

// BankByEquinoxLrn retrieves a row from 'equinox.banks' as a Bank.
//
// Generated from index 'banks_pkey'.
func BankByEquinoxLrn(db XODB, equinoxLrn int64) (*Bank, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`banksortcode, bankname, bankadd1, bankadd2, bankadd3, bankadd4, bankadd5, bankpostcode, bankmask, bankmodulus, bankbranchname, bankspared1, bankspared2, bankspared3, banksparec1, banksparec2, banksparec3, banksparen1, banksparen2, banksparen3, equinox_lrn, equinox_sec ` +
		`FROM equinox.banks ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	b := Bank{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&b.Banksortcode, &b.Bankname, &b.Bankadd1, &b.Bankadd2, &b.Bankadd3, &b.Bankadd4, &b.Bankadd5, &b.Bankpostcode, &b.Bankmask, &b.Bankmodulus, &b.Bankbranchname, &b.Bankspared1, &b.Bankspared2, &b.Bankspared3, &b.Banksparec1, &b.Banksparec2, &b.Banksparec3, &b.Banksparen1, &b.Banksparen2, &b.Banksparen3, &b.EquinoxLrn, &b.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &b, nil
}
