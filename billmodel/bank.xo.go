// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"

	"github.com/lib/pq"
)

// Bank represents a row from 'equinox.banks'.
type Bank struct {
	Banksortcode   sql.NullString  `json:"banksortcode"`   // banksortcode
	Bankname       sql.NullString  `json:"bankname"`       // bankname
	Bankadd1       sql.NullString  `json:"bankadd1"`       // bankadd1
	Bankadd2       sql.NullString  `json:"bankadd2"`       // bankadd2
	Bankadd3       sql.NullString  `json:"bankadd3"`       // bankadd3
	Bankadd4       sql.NullString  `json:"bankadd4"`       // bankadd4
	Bankadd5       sql.NullString  `json:"bankadd5"`       // bankadd5
	Bankpostcode   sql.NullString  `json:"bankpostcode"`   // bankpostcode
	Bankmask       sql.NullString  `json:"bankmask"`       // bankmask
	Bankmodulus    sql.NullFloat64 `json:"bankmodulus"`    // bankmodulus
	Bankbranchname sql.NullString  `json:"bankbranchname"` // bankbranchname
	Bankspared1    pq.NullTime     `json:"bankspared1"`    // bankspared1
	Bankspared2    pq.NullTime     `json:"bankspared2"`    // bankspared2
	Bankspared3    pq.NullTime     `json:"bankspared3"`    // bankspared3
	Banksparec1    sql.NullString  `json:"banksparec1"`    // banksparec1
	Banksparec2    sql.NullString  `json:"banksparec2"`    // banksparec2
	Banksparec3    sql.NullString  `json:"banksparec3"`    // banksparec3
	Banksparen1    sql.NullFloat64 `json:"banksparen1"`    // banksparen1
	Banksparen2    sql.NullFloat64 `json:"banksparen2"`    // banksparen2
	Banksparen3    sql.NullFloat64 `json:"banksparen3"`    // banksparen3
	EquinoxLrn     int64           `json:"equinox_lrn"`    // equinox_lrn
	EquinoxSec     sql.NullInt64   `json:"equinox_sec"`    // equinox_sec
}

func AllBank(db XODB, callback func(x Bank) bool) error {

	// sql query
	const sqlstr = `SELECT ` +
		`banksortcode, bankname, bankadd1, bankadd2, bankadd3, bankadd4, bankadd5, bankpostcode, bankmask, bankmodulus, bankbranchname, bankspared1, bankspared2, bankspared3, banksparec1, banksparec2, banksparec3, banksparen1, banksparen2, banksparen3, equinox_lrn, equinox_sec ` +
		`FROM equinox.banks `

	q, err := db.Query(sqlstr)

	if err != nil {
		return err
	}
	defer q.Close()

	// load results
	for q.Next() {
		b := Bank{}

		// scan
		err = q.Scan(&b.Banksortcode, &b.Bankname, &b.Bankadd1, &b.Bankadd2, &b.Bankadd3, &b.Bankadd4, &b.Bankadd5, &b.Bankpostcode, &b.Bankmask, &b.Bankmodulus, &b.Bankbranchname, &b.Bankspared1, &b.Bankspared2, &b.Bankspared3, &b.Banksparec1, &b.Banksparec2, &b.Banksparec3, &b.Banksparen1, &b.Banksparen2, &b.Banksparen3, &b.EquinoxLrn, &b.EquinoxSec)
		if err != nil {
			return err
		}
		if !callback(b) {
			return nil
		}
	}

	return nil
}

// BankByEquinoxLrn retrieves a row from 'equinox.banks' as a Bank.
//
// Generated from index 'banks_pkey'.
func BankByEquinoxLrn(db XODB, equinoxLrn int64) (*Bank, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`banksortcode, bankname, bankadd1, bankadd2, bankadd3, bankadd4, bankadd5, bankpostcode, bankmask, bankmodulus, bankbranchname, bankspared1, bankspared2, bankspared3, banksparec1, banksparec2, banksparec3, banksparen1, banksparen2, banksparen3, equinox_lrn, equinox_sec ` +
		`FROM equinox.banks ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	b := Bank{}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&b.Banksortcode, &b.Bankname, &b.Bankadd1, &b.Bankadd2, &b.Bankadd3, &b.Bankadd4, &b.Bankadd5, &b.Bankpostcode, &b.Bankmask, &b.Bankmodulus, &b.Bankbranchname, &b.Bankspared1, &b.Bankspared2, &b.Bankspared3, &b.Banksparec1, &b.Banksparec2, &b.Banksparec3, &b.Banksparen1, &b.Banksparen2, &b.Banksparen3, &b.EquinoxLrn, &b.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &b, nil
}
