// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/lib/pq"
)

// Pperrdbt represents a row from 'equinox.pperrdbt'.
type Pperrdbt struct {
	Pperrdbtdate     pq.NullTime     `json:"pperrdbtdate"`     // pperrdbtdate
	Pperrdbtdebt     sql.NullFloat64 `json:"pperrdbtdebt"`     // pperrdbtdebt
	Pperrdbtwkmax    sql.NullFloat64 `json:"pperrdbtwkmax"`    // pperrdbtwkmax
	Pperrdbtwkmin    sql.NullFloat64 `json:"pperrdbtwkmin"`    // pperrdbtwkmin
	Pperrdbtperc     sql.NullInt64   `json:"pperrdbtperc"`     // pperrdbtperc
	Pperrdbtngdbt    sql.NullFloat64 `json:"pperrdbtngdbt"`    // pperrdbtngdbt
	Pperrdbtemgcrdlm sql.NullFloat64 `json:"pperrdbtemgcrdlm"` // pperrdbtemgcrdlm
	Pperrdbtemhcrddb sql.NullFloat64 `json:"pperrdbtemhcrddb"` // pperrdbtemhcrddb
	Pperrdbtlog1     sql.NullInt64   `json:"pperrdbtlog1"`     // pperrdbtlog1
	Pperrdbtlog2     sql.NullInt64   `json:"pperrdbtlog2"`     // pperrdbtlog2
	Pperrdbtlog3     sql.NullInt64   `json:"pperrdbtlog3"`     // pperrdbtlog3
	Pperrdbtlog4     sql.NullInt64   `json:"pperrdbtlog4"`     // pperrdbtlog4
	Pperrdbtadded    pq.NullTime     `json:"pperrdbtadded"`    // pperrdbtadded
	Pperrdbtalloc    pq.NullTime     `json:"pperrdbtalloc"`    // pperrdbtalloc
	Pperrdbtallocto  sql.NullString  `json:"pperrdbtallocto"`  // pperrdbtallocto
	Pperrdbtsrc      sql.NullString  `json:"pperrdbtsrc"`      // pperrdbtsrc
	Pperrdbtorigref  sql.NullString  `json:"pperrdbtorigref"`  // pperrdbtorigref
	EquinoxPrn       sql.NullInt64   `json:"equinox_prn"`      // equinox_prn
	EquinoxLrn       int64           `json:"equinox_lrn"`      // equinox_lrn
	EquinoxSec       sql.NullInt64   `json:"equinox_sec"`      // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Pperrdbt exists in the database.
func (p *Pperrdbt) Exists() bool {
	return p._exists
}

// Deleted provides information if the Pperrdbt has been deleted from the database.
func (p *Pperrdbt) Deleted() bool {
	return p._deleted
}

// Insert inserts the Pperrdbt to the database.
func (p *Pperrdbt) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if p._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.pperrdbt (` +
		`pperrdbtdate, pperrdbtdebt, pperrdbtwkmax, pperrdbtwkmin, pperrdbtperc, pperrdbtngdbt, pperrdbtemgcrdlm, pperrdbtemhcrddb, pperrdbtlog1, pperrdbtlog2, pperrdbtlog3, pperrdbtlog4, pperrdbtadded, pperrdbtalloc, pperrdbtallocto, pperrdbtsrc, pperrdbtorigref, equinox_prn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, p.Pperrdbtdate, p.Pperrdbtdebt, p.Pperrdbtwkmax, p.Pperrdbtwkmin, p.Pperrdbtperc, p.Pperrdbtngdbt, p.Pperrdbtemgcrdlm, p.Pperrdbtemhcrddb, p.Pperrdbtlog1, p.Pperrdbtlog2, p.Pperrdbtlog3, p.Pperrdbtlog4, p.Pperrdbtadded, p.Pperrdbtalloc, p.Pperrdbtallocto, p.Pperrdbtsrc, p.Pperrdbtorigref, p.EquinoxPrn, p.EquinoxSec)
	err = db.QueryRow(sqlstr, p.Pperrdbtdate, p.Pperrdbtdebt, p.Pperrdbtwkmax, p.Pperrdbtwkmin, p.Pperrdbtperc, p.Pperrdbtngdbt, p.Pperrdbtemgcrdlm, p.Pperrdbtemhcrddb, p.Pperrdbtlog1, p.Pperrdbtlog2, p.Pperrdbtlog3, p.Pperrdbtlog4, p.Pperrdbtadded, p.Pperrdbtalloc, p.Pperrdbtallocto, p.Pperrdbtsrc, p.Pperrdbtorigref, p.EquinoxPrn, p.EquinoxSec).Scan(&p.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	p._exists = true

	return nil
}

// Update updates the Pperrdbt in the database.
func (p *Pperrdbt) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if p._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.pperrdbt SET (` +
		`pperrdbtdate, pperrdbtdebt, pperrdbtwkmax, pperrdbtwkmin, pperrdbtperc, pperrdbtngdbt, pperrdbtemgcrdlm, pperrdbtemhcrddb, pperrdbtlog1, pperrdbtlog2, pperrdbtlog3, pperrdbtlog4, pperrdbtadded, pperrdbtalloc, pperrdbtallocto, pperrdbtsrc, pperrdbtorigref, equinox_prn, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19` +
		`) WHERE equinox_lrn = $20`

	// run query
	XOLog(sqlstr, p.Pperrdbtdate, p.Pperrdbtdebt, p.Pperrdbtwkmax, p.Pperrdbtwkmin, p.Pperrdbtperc, p.Pperrdbtngdbt, p.Pperrdbtemgcrdlm, p.Pperrdbtemhcrddb, p.Pperrdbtlog1, p.Pperrdbtlog2, p.Pperrdbtlog3, p.Pperrdbtlog4, p.Pperrdbtadded, p.Pperrdbtalloc, p.Pperrdbtallocto, p.Pperrdbtsrc, p.Pperrdbtorigref, p.EquinoxPrn, p.EquinoxSec, p.EquinoxLrn)
	_, err = db.Exec(sqlstr, p.Pperrdbtdate, p.Pperrdbtdebt, p.Pperrdbtwkmax, p.Pperrdbtwkmin, p.Pperrdbtperc, p.Pperrdbtngdbt, p.Pperrdbtemgcrdlm, p.Pperrdbtemhcrddb, p.Pperrdbtlog1, p.Pperrdbtlog2, p.Pperrdbtlog3, p.Pperrdbtlog4, p.Pperrdbtadded, p.Pperrdbtalloc, p.Pperrdbtallocto, p.Pperrdbtsrc, p.Pperrdbtorigref, p.EquinoxPrn, p.EquinoxSec, p.EquinoxLrn)
	return err
}

// Save saves the Pperrdbt to the database.
func (p *Pperrdbt) Save(db XODB) error {
	if p.Exists() {
		return p.Update(db)
	}

	return p.Insert(db)
}

// Upsert performs an upsert for Pperrdbt.
//
// NOTE: PostgreSQL 9.5+ only
func (p *Pperrdbt) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if p._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.pperrdbt (` +
		`pperrdbtdate, pperrdbtdebt, pperrdbtwkmax, pperrdbtwkmin, pperrdbtperc, pperrdbtngdbt, pperrdbtemgcrdlm, pperrdbtemhcrddb, pperrdbtlog1, pperrdbtlog2, pperrdbtlog3, pperrdbtlog4, pperrdbtadded, pperrdbtalloc, pperrdbtallocto, pperrdbtsrc, pperrdbtorigref, equinox_prn, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`pperrdbtdate, pperrdbtdebt, pperrdbtwkmax, pperrdbtwkmin, pperrdbtperc, pperrdbtngdbt, pperrdbtemgcrdlm, pperrdbtemhcrddb, pperrdbtlog1, pperrdbtlog2, pperrdbtlog3, pperrdbtlog4, pperrdbtadded, pperrdbtalloc, pperrdbtallocto, pperrdbtsrc, pperrdbtorigref, equinox_prn, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.pperrdbtdate, EXCLUDED.pperrdbtdebt, EXCLUDED.pperrdbtwkmax, EXCLUDED.pperrdbtwkmin, EXCLUDED.pperrdbtperc, EXCLUDED.pperrdbtngdbt, EXCLUDED.pperrdbtemgcrdlm, EXCLUDED.pperrdbtemhcrddb, EXCLUDED.pperrdbtlog1, EXCLUDED.pperrdbtlog2, EXCLUDED.pperrdbtlog3, EXCLUDED.pperrdbtlog4, EXCLUDED.pperrdbtadded, EXCLUDED.pperrdbtalloc, EXCLUDED.pperrdbtallocto, EXCLUDED.pperrdbtsrc, EXCLUDED.pperrdbtorigref, EXCLUDED.equinox_prn, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, p.Pperrdbtdate, p.Pperrdbtdebt, p.Pperrdbtwkmax, p.Pperrdbtwkmin, p.Pperrdbtperc, p.Pperrdbtngdbt, p.Pperrdbtemgcrdlm, p.Pperrdbtemhcrddb, p.Pperrdbtlog1, p.Pperrdbtlog2, p.Pperrdbtlog3, p.Pperrdbtlog4, p.Pperrdbtadded, p.Pperrdbtalloc, p.Pperrdbtallocto, p.Pperrdbtsrc, p.Pperrdbtorigref, p.EquinoxPrn, p.EquinoxLrn, p.EquinoxSec)
	_, err = db.Exec(sqlstr, p.Pperrdbtdate, p.Pperrdbtdebt, p.Pperrdbtwkmax, p.Pperrdbtwkmin, p.Pperrdbtperc, p.Pperrdbtngdbt, p.Pperrdbtemgcrdlm, p.Pperrdbtemhcrddb, p.Pperrdbtlog1, p.Pperrdbtlog2, p.Pperrdbtlog3, p.Pperrdbtlog4, p.Pperrdbtadded, p.Pperrdbtalloc, p.Pperrdbtallocto, p.Pperrdbtsrc, p.Pperrdbtorigref, p.EquinoxPrn, p.EquinoxLrn, p.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	p._exists = true

	return nil
}

// Delete deletes the Pperrdbt from the database.
func (p *Pperrdbt) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return nil
	}

	// if deleted, bail
	if p._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.pperrdbt WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, p.EquinoxLrn)
	_, err = db.Exec(sqlstr, p.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	p._deleted = true

	return nil
}

// PperrdbtByEquinoxLrn retrieves a row from 'equinox.pperrdbt' as a Pperrdbt.
//
// Generated from index 'pperrdbt_pkey'.
func PperrdbtByEquinoxLrn(db XODB, equinoxLrn int64) (*Pperrdbt, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`pperrdbtdate, pperrdbtdebt, pperrdbtwkmax, pperrdbtwkmin, pperrdbtperc, pperrdbtngdbt, pperrdbtemgcrdlm, pperrdbtemhcrddb, pperrdbtlog1, pperrdbtlog2, pperrdbtlog3, pperrdbtlog4, pperrdbtadded, pperrdbtalloc, pperrdbtallocto, pperrdbtsrc, pperrdbtorigref, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.pperrdbt ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	p := Pperrdbt{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&p.Pperrdbtdate, &p.Pperrdbtdebt, &p.Pperrdbtwkmax, &p.Pperrdbtwkmin, &p.Pperrdbtperc, &p.Pperrdbtngdbt, &p.Pperrdbtemgcrdlm, &p.Pperrdbtemhcrddb, &p.Pperrdbtlog1, &p.Pperrdbtlog2, &p.Pperrdbtlog3, &p.Pperrdbtlog4, &p.Pperrdbtadded, &p.Pperrdbtalloc, &p.Pperrdbtallocto, &p.Pperrdbtsrc, &p.Pperrdbtorigref, &p.EquinoxPrn, &p.EquinoxLrn, &p.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &p, nil
}
