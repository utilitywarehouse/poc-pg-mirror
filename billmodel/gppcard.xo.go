// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"

	"github.com/lib/pq"
)

// Gppcard represents a row from 'equinox.gppcard'.
type Gppcard struct {
	Gppcardnum sql.NullString `json:"gppcardnum"`  // gppcardnum
	Gppcmsn    sql.NullString `json:"gppcmsn"`     // gppcmsn
	Gppcstart  pq.NullTime    `json:"gppcstart"`   // gppcstart
	Gppcend    pq.NullTime    `json:"gppcend"`     // gppcend
	EquinoxPrn sql.NullInt64  `json:"equinox_prn"` // equinox_prn
	EquinoxLrn int64          `json:"equinox_lrn"` // equinox_lrn
	EquinoxSec sql.NullInt64  `json:"equinox_sec"` // equinox_sec
}

func AllGppcard(db XODB, callback func(x Gppcard) bool) error {

	// sql query
	const sqlstr = `SELECT ` +
		`gppcardnum, gppcmsn, gppcstart, gppcend, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.gppcard `

	q, err := db.Query(sqlstr)

	if err != nil {
		return err
	}
	defer q.Close()

	// load results
	for q.Next() {
		g := Gppcard{}

		// scan
		err = q.Scan(&g.Gppcardnum, &g.Gppcmsn, &g.Gppcstart, &g.Gppcend, &g.EquinoxPrn, &g.EquinoxLrn, &g.EquinoxSec)
		if err != nil {
			return err
		}
		if !callback(g) {
			return nil
		}
	}

	return nil
}

// GppcardByEquinoxLrn retrieves a row from 'equinox.gppcard' as a Gppcard.
//
// Generated from index 'gppcard_pkey'.
func GppcardByEquinoxLrn(db XODB, equinoxLrn int64) (*Gppcard, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`gppcardnum, gppcmsn, gppcstart, gppcend, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.gppcard ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	g := Gppcard{}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&g.Gppcardnum, &g.Gppcmsn, &g.Gppcstart, &g.Gppcend, &g.EquinoxPrn, &g.EquinoxLrn, &g.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &g, nil
}
