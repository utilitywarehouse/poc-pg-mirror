// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/lib/pq"
)

// Ppmtran represents a row from 'equinox.ppmtrans'.
type Ppmtran struct {
	Ppmtdate        pq.NullTime     `json:"ppmtdate"`        // ppmtdate
	Ppmttime        pq.NullTime     `json:"ppmttime"`        // ppmttime
	Ppmtamount      sql.NullFloat64 `json:"ppmtamount"`      // ppmtamount
	Ppmtusenet      sql.NullFloat64 `json:"ppmtusenet"`      // ppmtusenet
	Ppmtusevat      sql.NullFloat64 `json:"ppmtusevat"`      // ppmtusevat
	Ppmtnrgdebtpay  sql.NullFloat64 `json:"ppmtnrgdebtpay"`  // ppmtnrgdebtpay
	Ppmtnnrgdebypay sql.NullFloat64 `json:"ppmtnnrgdebypay"` // ppmtnnrgdebypay
	Ppmtoutlet      sql.NullString  `json:"ppmtoutlet"`      // ppmtoutlet
	Ppmtreading     sql.NullInt64   `json:"ppmtreading"`     // ppmtreading
	Ppmtrtariff     sql.NullString  `json:"ppmtrtariff"`     // ppmtrtariff
	Ppmtrtariffdate pq.NullTime     `json:"ppmtrtariffdate"` // ppmtrtariffdate
	Ppmtnrgdebt     sql.NullFloat64 `json:"ppmtnrgdebt"`     // ppmtnrgdebt
	Ppmtnnrgdebt    sql.NullFloat64 `json:"ppmtnnrgdebt"`    // ppmtnnrgdebt
	Ppmtcalog       sql.NullFloat64 `json:"ppmtcalog"`       // ppmtcalog
	Ppmtnrgdlog     sql.NullFloat64 `json:"ppmtnrgdlog"`     // ppmtnrgdlog
	Ppmtnnrgdlog    sql.NullFloat64 `json:"ppmtnnrgdlog"`    // ppmtnnrgdlog
	Ppmtrecrate     sql.NullFloat64 `json:"ppmtrecrate"`     // ppmtrecrate
	Ppmttransactid  sql.NullString  `json:"ppmttransactid"`  // ppmttransactid
	Ppmtgreference  sql.NullString  `json:"ppmtgreference"`  // ppmtgreference
	Ppmtsparen1     sql.NullInt64   `json:"ppmtsparen1"`     // ppmtsparen1
	Ppmtspared1     pq.NullTime     `json:"ppmtspared1"`     // ppmtspared1
	EquinoxPrn      sql.NullInt64   `json:"equinox_prn"`     // equinox_prn
	EquinoxLrn      int64           `json:"equinox_lrn"`     // equinox_lrn
	EquinoxSec      sql.NullInt64   `json:"equinox_sec"`     // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Ppmtran exists in the database.
func (p *Ppmtran) Exists() bool {
	return p._exists
}

// Deleted provides information if the Ppmtran has been deleted from the database.
func (p *Ppmtran) Deleted() bool {
	return p._deleted
}

// Insert inserts the Ppmtran to the database.
func (p *Ppmtran) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if p._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.ppmtrans (` +
		`ppmtdate, ppmttime, ppmtamount, ppmtusenet, ppmtusevat, ppmtnrgdebtpay, ppmtnnrgdebypay, ppmtoutlet, ppmtreading, ppmtrtariff, ppmtrtariffdate, ppmtnrgdebt, ppmtnnrgdebt, ppmtcalog, ppmtnrgdlog, ppmtnnrgdlog, ppmtrecrate, ppmttransactid, ppmtgreference, ppmtsparen1, ppmtspared1, equinox_prn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, p.Ppmtdate, p.Ppmttime, p.Ppmtamount, p.Ppmtusenet, p.Ppmtusevat, p.Ppmtnrgdebtpay, p.Ppmtnnrgdebypay, p.Ppmtoutlet, p.Ppmtreading, p.Ppmtrtariff, p.Ppmtrtariffdate, p.Ppmtnrgdebt, p.Ppmtnnrgdebt, p.Ppmtcalog, p.Ppmtnrgdlog, p.Ppmtnnrgdlog, p.Ppmtrecrate, p.Ppmttransactid, p.Ppmtgreference, p.Ppmtsparen1, p.Ppmtspared1, p.EquinoxPrn, p.EquinoxSec)
	err = db.QueryRow(sqlstr, p.Ppmtdate, p.Ppmttime, p.Ppmtamount, p.Ppmtusenet, p.Ppmtusevat, p.Ppmtnrgdebtpay, p.Ppmtnnrgdebypay, p.Ppmtoutlet, p.Ppmtreading, p.Ppmtrtariff, p.Ppmtrtariffdate, p.Ppmtnrgdebt, p.Ppmtnnrgdebt, p.Ppmtcalog, p.Ppmtnrgdlog, p.Ppmtnnrgdlog, p.Ppmtrecrate, p.Ppmttransactid, p.Ppmtgreference, p.Ppmtsparen1, p.Ppmtspared1, p.EquinoxPrn, p.EquinoxSec).Scan(&p.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	p._exists = true

	return nil
}

// Update updates the Ppmtran in the database.
func (p *Ppmtran) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if p._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.ppmtrans SET (` +
		`ppmtdate, ppmttime, ppmtamount, ppmtusenet, ppmtusevat, ppmtnrgdebtpay, ppmtnnrgdebypay, ppmtoutlet, ppmtreading, ppmtrtariff, ppmtrtariffdate, ppmtnrgdebt, ppmtnnrgdebt, ppmtcalog, ppmtnrgdlog, ppmtnnrgdlog, ppmtrecrate, ppmttransactid, ppmtgreference, ppmtsparen1, ppmtspared1, equinox_prn, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23` +
		`) WHERE equinox_lrn = $24`

	// run query
	XOLog(sqlstr, p.Ppmtdate, p.Ppmttime, p.Ppmtamount, p.Ppmtusenet, p.Ppmtusevat, p.Ppmtnrgdebtpay, p.Ppmtnnrgdebypay, p.Ppmtoutlet, p.Ppmtreading, p.Ppmtrtariff, p.Ppmtrtariffdate, p.Ppmtnrgdebt, p.Ppmtnnrgdebt, p.Ppmtcalog, p.Ppmtnrgdlog, p.Ppmtnnrgdlog, p.Ppmtrecrate, p.Ppmttransactid, p.Ppmtgreference, p.Ppmtsparen1, p.Ppmtspared1, p.EquinoxPrn, p.EquinoxSec, p.EquinoxLrn)
	_, err = db.Exec(sqlstr, p.Ppmtdate, p.Ppmttime, p.Ppmtamount, p.Ppmtusenet, p.Ppmtusevat, p.Ppmtnrgdebtpay, p.Ppmtnnrgdebypay, p.Ppmtoutlet, p.Ppmtreading, p.Ppmtrtariff, p.Ppmtrtariffdate, p.Ppmtnrgdebt, p.Ppmtnnrgdebt, p.Ppmtcalog, p.Ppmtnrgdlog, p.Ppmtnnrgdlog, p.Ppmtrecrate, p.Ppmttransactid, p.Ppmtgreference, p.Ppmtsparen1, p.Ppmtspared1, p.EquinoxPrn, p.EquinoxSec, p.EquinoxLrn)
	return err
}

// Save saves the Ppmtran to the database.
func (p *Ppmtran) Save(db XODB) error {
	if p.Exists() {
		return p.Update(db)
	}

	return p.Insert(db)
}

// Upsert performs an upsert for Ppmtran.
//
// NOTE: PostgreSQL 9.5+ only
func (p *Ppmtran) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if p._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.ppmtrans (` +
		`ppmtdate, ppmttime, ppmtamount, ppmtusenet, ppmtusevat, ppmtnrgdebtpay, ppmtnnrgdebypay, ppmtoutlet, ppmtreading, ppmtrtariff, ppmtrtariffdate, ppmtnrgdebt, ppmtnnrgdebt, ppmtcalog, ppmtnrgdlog, ppmtnnrgdlog, ppmtrecrate, ppmttransactid, ppmtgreference, ppmtsparen1, ppmtspared1, equinox_prn, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`ppmtdate, ppmttime, ppmtamount, ppmtusenet, ppmtusevat, ppmtnrgdebtpay, ppmtnnrgdebypay, ppmtoutlet, ppmtreading, ppmtrtariff, ppmtrtariffdate, ppmtnrgdebt, ppmtnnrgdebt, ppmtcalog, ppmtnrgdlog, ppmtnnrgdlog, ppmtrecrate, ppmttransactid, ppmtgreference, ppmtsparen1, ppmtspared1, equinox_prn, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.ppmtdate, EXCLUDED.ppmttime, EXCLUDED.ppmtamount, EXCLUDED.ppmtusenet, EXCLUDED.ppmtusevat, EXCLUDED.ppmtnrgdebtpay, EXCLUDED.ppmtnnrgdebypay, EXCLUDED.ppmtoutlet, EXCLUDED.ppmtreading, EXCLUDED.ppmtrtariff, EXCLUDED.ppmtrtariffdate, EXCLUDED.ppmtnrgdebt, EXCLUDED.ppmtnnrgdebt, EXCLUDED.ppmtcalog, EXCLUDED.ppmtnrgdlog, EXCLUDED.ppmtnnrgdlog, EXCLUDED.ppmtrecrate, EXCLUDED.ppmttransactid, EXCLUDED.ppmtgreference, EXCLUDED.ppmtsparen1, EXCLUDED.ppmtspared1, EXCLUDED.equinox_prn, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, p.Ppmtdate, p.Ppmttime, p.Ppmtamount, p.Ppmtusenet, p.Ppmtusevat, p.Ppmtnrgdebtpay, p.Ppmtnnrgdebypay, p.Ppmtoutlet, p.Ppmtreading, p.Ppmtrtariff, p.Ppmtrtariffdate, p.Ppmtnrgdebt, p.Ppmtnnrgdebt, p.Ppmtcalog, p.Ppmtnrgdlog, p.Ppmtnnrgdlog, p.Ppmtrecrate, p.Ppmttransactid, p.Ppmtgreference, p.Ppmtsparen1, p.Ppmtspared1, p.EquinoxPrn, p.EquinoxLrn, p.EquinoxSec)
	_, err = db.Exec(sqlstr, p.Ppmtdate, p.Ppmttime, p.Ppmtamount, p.Ppmtusenet, p.Ppmtusevat, p.Ppmtnrgdebtpay, p.Ppmtnnrgdebypay, p.Ppmtoutlet, p.Ppmtreading, p.Ppmtrtariff, p.Ppmtrtariffdate, p.Ppmtnrgdebt, p.Ppmtnnrgdebt, p.Ppmtcalog, p.Ppmtnrgdlog, p.Ppmtnnrgdlog, p.Ppmtrecrate, p.Ppmttransactid, p.Ppmtgreference, p.Ppmtsparen1, p.Ppmtspared1, p.EquinoxPrn, p.EquinoxLrn, p.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	p._exists = true

	return nil
}

// Delete deletes the Ppmtran from the database.
func (p *Ppmtran) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return nil
	}

	// if deleted, bail
	if p._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.ppmtrans WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, p.EquinoxLrn)
	_, err = db.Exec(sqlstr, p.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	p._deleted = true

	return nil
}

// PpmtranByEquinoxLrn retrieves a row from 'equinox.ppmtrans' as a Ppmtran.
//
// Generated from index 'ppmtrans_pkey'.
func PpmtranByEquinoxLrn(db XODB, equinoxLrn int64) (*Ppmtran, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`ppmtdate, ppmttime, ppmtamount, ppmtusenet, ppmtusevat, ppmtnrgdebtpay, ppmtnnrgdebypay, ppmtoutlet, ppmtreading, ppmtrtariff, ppmtrtariffdate, ppmtnrgdebt, ppmtnnrgdebt, ppmtcalog, ppmtnrgdlog, ppmtnnrgdlog, ppmtrecrate, ppmttransactid, ppmtgreference, ppmtsparen1, ppmtspared1, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.ppmtrans ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	p := Ppmtran{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&p.Ppmtdate, &p.Ppmttime, &p.Ppmtamount, &p.Ppmtusenet, &p.Ppmtusevat, &p.Ppmtnrgdebtpay, &p.Ppmtnnrgdebypay, &p.Ppmtoutlet, &p.Ppmtreading, &p.Ppmtrtariff, &p.Ppmtrtariffdate, &p.Ppmtnrgdebt, &p.Ppmtnnrgdebt, &p.Ppmtcalog, &p.Ppmtnrgdlog, &p.Ppmtnnrgdlog, &p.Ppmtrecrate, &p.Ppmttransactid, &p.Ppmtgreference, &p.Ppmtsparen1, &p.Ppmtspared1, &p.EquinoxPrn, &p.EquinoxLrn, &p.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &p, nil
}
