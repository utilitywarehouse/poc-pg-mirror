// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import "database/sql"

// Psr represents a row from 'equinox.psr'.
type Psr struct {
	PsrCode        sql.NullString `json:"psr_code"`        // psr_code
	PsrDescription sql.NullString `json:"psr_description"` // psr_description
	EquinoxLrn     int64          `json:"equinox_lrn"`     // equinox_lrn
	EquinoxSec     sql.NullInt64  `json:"equinox_sec"`     // equinox_sec
}

func AllPsr(db XODB, callback func(x Psr) bool) error {

	// sql query
	const sqlstr = `SELECT ` +
		`psr_code, psr_description, equinox_lrn, equinox_sec ` +
		`FROM equinox.psr `

	q, err := db.Query(sqlstr)

	if err != nil {
		return err
	}
	defer q.Close()

	// load results
	for q.Next() {
		p := Psr{}

		// scan
		err = q.Scan(&p.PsrCode, &p.PsrDescription, &p.EquinoxLrn, &p.EquinoxSec)
		if err != nil {
			return err
		}
		if !callback(p) {
			return nil
		}
	}

	return nil
}

// PsrByEquinoxLrn retrieves a row from 'equinox.psr' as a Psr.
//
// Generated from index 'psr_pkey'.
func PsrByEquinoxLrn(db XODB, equinoxLrn int64) (*Psr, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`psr_code, psr_description, equinox_lrn, equinox_sec ` +
		`FROM equinox.psr ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	p := Psr{}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&p.PsrCode, &p.PsrDescription, &p.EquinoxLrn, &p.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &p, nil
}
