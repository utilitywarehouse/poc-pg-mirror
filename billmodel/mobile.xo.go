// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/lib/pq"
)

// Mobile represents a row from 'equinox.mobiles'.
type Mobile struct {
	Mobtype          sql.NullString  `json:"mobtype"`          // mobtype
	Mobiemi          sql.NullString  `json:"mobiemi"`          // mobiemi
	Mobaccountnumber sql.NullString  `json:"mobaccountnumber"` // mobaccountnumber
	Mobsim           sql.NullString  `json:"mobsim"`           // mobsim
	Mobpackageno     sql.NullString  `json:"mobpackageno"`     // mobpackageno
	Mobstatus        sql.NullString  `json:"mobstatus"`        // mobstatus
	Mobsaleprice     sql.NullFloat64 `json:"mobsaleprice"`     // mobsaleprice
	Moblocation      sql.NullString  `json:"moblocation"`      // moblocation
	Mobreason        sql.NullString  `json:"mobreason"`        // mobreason
	Mobcli           sql.NullString  `json:"mobcli"`           // mobcli
	Mobdateinstock   pq.NullTime     `json:"mobdateinstock"`   // mobdateinstock
	Mobsupplier      sql.NullString  `json:"mobsupplier"`      // mobsupplier
	Mobsparen1       sql.NullFloat64 `json:"mobsparen1"`       // mobsparen1
	Mobdateentered   pq.NullTime     `json:"mobdateentered"`   // mobdateentered
	Mobexorder       sql.NullString  `json:"mobexorder"`       // mobexorder
	Mobexdate        pq.NullTime     `json:"mobexdate"`        // mobexdate
	Mobexitemcode    sql.NullString  `json:"mobexitemcode"`    // mobexitemcode
	Mobexpicked      sql.NullInt64   `json:"mobexpicked"`      // mobexpicked
	Mobequipment     sql.NullString  `json:"mobequipment"`     // mobequipment
	Mobstockstatus   sql.NullString  `json:"mobstockstatus"`   // mobstockstatus
	EquinoxLrn       int64           `json:"equinox_lrn"`      // equinox_lrn
	EquinoxSec       sql.NullInt64   `json:"equinox_sec"`      // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Mobile exists in the database.
func (m *Mobile) Exists() bool {
	return m._exists
}

// Deleted provides information if the Mobile has been deleted from the database.
func (m *Mobile) Deleted() bool {
	return m._deleted
}

// Insert inserts the Mobile to the database.
func (m *Mobile) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if m._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.mobiles (` +
		`mobtype, mobiemi, mobaccountnumber, mobsim, mobpackageno, mobstatus, mobsaleprice, moblocation, mobreason, mobcli, mobdateinstock, mobsupplier, mobsparen1, mobdateentered, mobexorder, mobexdate, mobexitemcode, mobexpicked, mobequipment, mobstockstatus, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, m.Mobtype, m.Mobiemi, m.Mobaccountnumber, m.Mobsim, m.Mobpackageno, m.Mobstatus, m.Mobsaleprice, m.Moblocation, m.Mobreason, m.Mobcli, m.Mobdateinstock, m.Mobsupplier, m.Mobsparen1, m.Mobdateentered, m.Mobexorder, m.Mobexdate, m.Mobexitemcode, m.Mobexpicked, m.Mobequipment, m.Mobstockstatus, m.EquinoxSec)
	err = db.QueryRow(sqlstr, m.Mobtype, m.Mobiemi, m.Mobaccountnumber, m.Mobsim, m.Mobpackageno, m.Mobstatus, m.Mobsaleprice, m.Moblocation, m.Mobreason, m.Mobcli, m.Mobdateinstock, m.Mobsupplier, m.Mobsparen1, m.Mobdateentered, m.Mobexorder, m.Mobexdate, m.Mobexitemcode, m.Mobexpicked, m.Mobequipment, m.Mobstockstatus, m.EquinoxSec).Scan(&m.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	m._exists = true

	return nil
}

// Update updates the Mobile in the database.
func (m *Mobile) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !m._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if m._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.mobiles SET (` +
		`mobtype, mobiemi, mobaccountnumber, mobsim, mobpackageno, mobstatus, mobsaleprice, moblocation, mobreason, mobcli, mobdateinstock, mobsupplier, mobsparen1, mobdateentered, mobexorder, mobexdate, mobexitemcode, mobexpicked, mobequipment, mobstockstatus, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21` +
		`) WHERE equinox_lrn = $22`

	// run query
	XOLog(sqlstr, m.Mobtype, m.Mobiemi, m.Mobaccountnumber, m.Mobsim, m.Mobpackageno, m.Mobstatus, m.Mobsaleprice, m.Moblocation, m.Mobreason, m.Mobcli, m.Mobdateinstock, m.Mobsupplier, m.Mobsparen1, m.Mobdateentered, m.Mobexorder, m.Mobexdate, m.Mobexitemcode, m.Mobexpicked, m.Mobequipment, m.Mobstockstatus, m.EquinoxSec, m.EquinoxLrn)
	_, err = db.Exec(sqlstr, m.Mobtype, m.Mobiemi, m.Mobaccountnumber, m.Mobsim, m.Mobpackageno, m.Mobstatus, m.Mobsaleprice, m.Moblocation, m.Mobreason, m.Mobcli, m.Mobdateinstock, m.Mobsupplier, m.Mobsparen1, m.Mobdateentered, m.Mobexorder, m.Mobexdate, m.Mobexitemcode, m.Mobexpicked, m.Mobequipment, m.Mobstockstatus, m.EquinoxSec, m.EquinoxLrn)
	return err
}

// Save saves the Mobile to the database.
func (m *Mobile) Save(db XODB) error {
	if m.Exists() {
		return m.Update(db)
	}

	return m.Insert(db)
}

// Upsert performs an upsert for Mobile.
//
// NOTE: PostgreSQL 9.5+ only
func (m *Mobile) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if m._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.mobiles (` +
		`mobtype, mobiemi, mobaccountnumber, mobsim, mobpackageno, mobstatus, mobsaleprice, moblocation, mobreason, mobcli, mobdateinstock, mobsupplier, mobsparen1, mobdateentered, mobexorder, mobexdate, mobexitemcode, mobexpicked, mobequipment, mobstockstatus, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`mobtype, mobiemi, mobaccountnumber, mobsim, mobpackageno, mobstatus, mobsaleprice, moblocation, mobreason, mobcli, mobdateinstock, mobsupplier, mobsparen1, mobdateentered, mobexorder, mobexdate, mobexitemcode, mobexpicked, mobequipment, mobstockstatus, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.mobtype, EXCLUDED.mobiemi, EXCLUDED.mobaccountnumber, EXCLUDED.mobsim, EXCLUDED.mobpackageno, EXCLUDED.mobstatus, EXCLUDED.mobsaleprice, EXCLUDED.moblocation, EXCLUDED.mobreason, EXCLUDED.mobcli, EXCLUDED.mobdateinstock, EXCLUDED.mobsupplier, EXCLUDED.mobsparen1, EXCLUDED.mobdateentered, EXCLUDED.mobexorder, EXCLUDED.mobexdate, EXCLUDED.mobexitemcode, EXCLUDED.mobexpicked, EXCLUDED.mobequipment, EXCLUDED.mobstockstatus, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, m.Mobtype, m.Mobiemi, m.Mobaccountnumber, m.Mobsim, m.Mobpackageno, m.Mobstatus, m.Mobsaleprice, m.Moblocation, m.Mobreason, m.Mobcli, m.Mobdateinstock, m.Mobsupplier, m.Mobsparen1, m.Mobdateentered, m.Mobexorder, m.Mobexdate, m.Mobexitemcode, m.Mobexpicked, m.Mobequipment, m.Mobstockstatus, m.EquinoxLrn, m.EquinoxSec)
	_, err = db.Exec(sqlstr, m.Mobtype, m.Mobiemi, m.Mobaccountnumber, m.Mobsim, m.Mobpackageno, m.Mobstatus, m.Mobsaleprice, m.Moblocation, m.Mobreason, m.Mobcli, m.Mobdateinstock, m.Mobsupplier, m.Mobsparen1, m.Mobdateentered, m.Mobexorder, m.Mobexdate, m.Mobexitemcode, m.Mobexpicked, m.Mobequipment, m.Mobstockstatus, m.EquinoxLrn, m.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	m._exists = true

	return nil
}

// Delete deletes the Mobile from the database.
func (m *Mobile) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !m._exists {
		return nil
	}

	// if deleted, bail
	if m._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.mobiles WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, m.EquinoxLrn)
	_, err = db.Exec(sqlstr, m.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	m._deleted = true

	return nil
}

// MobileByEquinoxLrn retrieves a row from 'equinox.mobiles' as a Mobile.
//
// Generated from index 'mobiles_pkey'.
func MobileByEquinoxLrn(db XODB, equinoxLrn int64) (*Mobile, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`mobtype, mobiemi, mobaccountnumber, mobsim, mobpackageno, mobstatus, mobsaleprice, moblocation, mobreason, mobcli, mobdateinstock, mobsupplier, mobsparen1, mobdateentered, mobexorder, mobexdate, mobexitemcode, mobexpicked, mobequipment, mobstockstatus, equinox_lrn, equinox_sec ` +
		`FROM equinox.mobiles ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	m := Mobile{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&m.Mobtype, &m.Mobiemi, &m.Mobaccountnumber, &m.Mobsim, &m.Mobpackageno, &m.Mobstatus, &m.Mobsaleprice, &m.Moblocation, &m.Mobreason, &m.Mobcli, &m.Mobdateinstock, &m.Mobsupplier, &m.Mobsparen1, &m.Mobdateentered, &m.Mobexorder, &m.Mobexdate, &m.Mobexitemcode, &m.Mobexpicked, &m.Mobequipment, &m.Mobstockstatus, &m.EquinoxLrn, &m.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &m, nil
}
