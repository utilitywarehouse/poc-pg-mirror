// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/lib/pq"
)

// Fsecure represents a row from 'equinox.fsecure'.
type Fsecure struct {
	Fskey        sql.NullString  `json:"fskey"`        // fskey
	Fsissuedate  pq.NullTime     `json:"fsissuedate"`  // fsissuedate
	Fslivedate   pq.NullTime     `json:"fslivedate"`   // fslivedate
	Fsbarreddate pq.NullTime     `json:"fsbarreddate"` // fsbarreddate
	Fsenddate    pq.NullTime     `json:"fsenddate"`    // fsenddate
	Fslicences   sql.NullString  `json:"fslicences"`   // fslicences
	Fsclinumber  sql.NullString  `json:"fsclinumber"`  // fsclinumber
	Fsmemo       sql.NullInt64   `json:"fsmemo"`       // fsmemo
	Fssparec1    sql.NullString  `json:"fssparec1"`    // fssparec1
	Fsspared1    pq.NullTime     `json:"fsspared1"`    // fsspared1
	Fssparen1    sql.NullFloat64 `json:"fssparen1"`    // fssparen1
	EquinoxLrn   int64           `json:"equinox_lrn"`  // equinox_lrn
	EquinoxSec   sql.NullInt64   `json:"equinox_sec"`  // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Fsecure exists in the database.
func (f *Fsecure) Exists() bool {
	return f._exists
}

// Deleted provides information if the Fsecure has been deleted from the database.
func (f *Fsecure) Deleted() bool {
	return f._deleted
}

// Insert inserts the Fsecure to the database.
func (f *Fsecure) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if f._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.fsecure (` +
		`fskey, fsissuedate, fslivedate, fsbarreddate, fsenddate, fslicences, fsclinumber, fsmemo, fssparec1, fsspared1, fssparen1, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, f.Fskey, f.Fsissuedate, f.Fslivedate, f.Fsbarreddate, f.Fsenddate, f.Fslicences, f.Fsclinumber, f.Fsmemo, f.Fssparec1, f.Fsspared1, f.Fssparen1, f.EquinoxSec)
	err = db.QueryRow(sqlstr, f.Fskey, f.Fsissuedate, f.Fslivedate, f.Fsbarreddate, f.Fsenddate, f.Fslicences, f.Fsclinumber, f.Fsmemo, f.Fssparec1, f.Fsspared1, f.Fssparen1, f.EquinoxSec).Scan(&f.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	f._exists = true

	return nil
}

// Update updates the Fsecure in the database.
func (f *Fsecure) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !f._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if f._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.fsecure SET (` +
		`fskey, fsissuedate, fslivedate, fsbarreddate, fsenddate, fslicences, fsclinumber, fsmemo, fssparec1, fsspared1, fssparen1, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12` +
		`) WHERE equinox_lrn = $13`

	// run query
	XOLog(sqlstr, f.Fskey, f.Fsissuedate, f.Fslivedate, f.Fsbarreddate, f.Fsenddate, f.Fslicences, f.Fsclinumber, f.Fsmemo, f.Fssparec1, f.Fsspared1, f.Fssparen1, f.EquinoxSec, f.EquinoxLrn)
	_, err = db.Exec(sqlstr, f.Fskey, f.Fsissuedate, f.Fslivedate, f.Fsbarreddate, f.Fsenddate, f.Fslicences, f.Fsclinumber, f.Fsmemo, f.Fssparec1, f.Fsspared1, f.Fssparen1, f.EquinoxSec, f.EquinoxLrn)
	return err
}

// Save saves the Fsecure to the database.
func (f *Fsecure) Save(db XODB) error {
	if f.Exists() {
		return f.Update(db)
	}

	return f.Insert(db)
}

// Upsert performs an upsert for Fsecure.
//
// NOTE: PostgreSQL 9.5+ only
func (f *Fsecure) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if f._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.fsecure (` +
		`fskey, fsissuedate, fslivedate, fsbarreddate, fsenddate, fslicences, fsclinumber, fsmemo, fssparec1, fsspared1, fssparen1, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`fskey, fsissuedate, fslivedate, fsbarreddate, fsenddate, fslicences, fsclinumber, fsmemo, fssparec1, fsspared1, fssparen1, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.fskey, EXCLUDED.fsissuedate, EXCLUDED.fslivedate, EXCLUDED.fsbarreddate, EXCLUDED.fsenddate, EXCLUDED.fslicences, EXCLUDED.fsclinumber, EXCLUDED.fsmemo, EXCLUDED.fssparec1, EXCLUDED.fsspared1, EXCLUDED.fssparen1, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, f.Fskey, f.Fsissuedate, f.Fslivedate, f.Fsbarreddate, f.Fsenddate, f.Fslicences, f.Fsclinumber, f.Fsmemo, f.Fssparec1, f.Fsspared1, f.Fssparen1, f.EquinoxLrn, f.EquinoxSec)
	_, err = db.Exec(sqlstr, f.Fskey, f.Fsissuedate, f.Fslivedate, f.Fsbarreddate, f.Fsenddate, f.Fslicences, f.Fsclinumber, f.Fsmemo, f.Fssparec1, f.Fsspared1, f.Fssparen1, f.EquinoxLrn, f.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	f._exists = true

	return nil
}

// Delete deletes the Fsecure from the database.
func (f *Fsecure) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !f._exists {
		return nil
	}

	// if deleted, bail
	if f._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.fsecure WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, f.EquinoxLrn)
	_, err = db.Exec(sqlstr, f.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	f._deleted = true

	return nil
}

// FsecureByEquinoxLrn retrieves a row from 'equinox.fsecure' as a Fsecure.
//
// Generated from index 'fsecure_pkey'.
func FsecureByEquinoxLrn(db XODB, equinoxLrn int64) (*Fsecure, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`fskey, fsissuedate, fslivedate, fsbarreddate, fsenddate, fslicences, fsclinumber, fsmemo, fssparec1, fsspared1, fssparen1, equinox_lrn, equinox_sec ` +
		`FROM equinox.fsecure ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	f := Fsecure{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&f.Fskey, &f.Fsissuedate, &f.Fslivedate, &f.Fsbarreddate, &f.Fsenddate, &f.Fslicences, &f.Fsclinumber, &f.Fsmemo, &f.Fssparec1, &f.Fsspared1, &f.Fssparen1, &f.EquinoxLrn, &f.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &f, nil
}
