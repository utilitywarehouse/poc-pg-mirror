// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/lib/pq"
)

// Mport represents a row from 'equinox.mport'.
type Mport struct {
	Mptppmipid   sql.NullString `json:"mptppmipid"`   // mptppmipid
	Mptcomments  sql.NullInt64  `json:"mptcomments"`  // mptcomments
	Mptactionreq sql.NullInt64  `json:"mptactionreq"` // mptactionreq
	Mptfirstpay  pq.NullTime    `json:"mptfirstpay"`  // mptfirstpay
	Mptlastpay   pq.NullTime    `json:"mptlastpay"`   // mptlastpay
	Mptresolved  pq.NullTime    `json:"mptresolved"`  // mptresolved
	EquinoxLrn   int64          `json:"equinox_lrn"`  // equinox_lrn
	EquinoxSec   sql.NullInt64  `json:"equinox_sec"`  // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Mport exists in the database.
func (m *Mport) Exists() bool {
	return m._exists
}

// Deleted provides information if the Mport has been deleted from the database.
func (m *Mport) Deleted() bool {
	return m._deleted
}

// Insert inserts the Mport to the database.
func (m *Mport) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if m._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.mport (` +
		`mptppmipid, mptcomments, mptactionreq, mptfirstpay, mptlastpay, mptresolved, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, m.Mptppmipid, m.Mptcomments, m.Mptactionreq, m.Mptfirstpay, m.Mptlastpay, m.Mptresolved, m.EquinoxSec)
	err = db.QueryRow(sqlstr, m.Mptppmipid, m.Mptcomments, m.Mptactionreq, m.Mptfirstpay, m.Mptlastpay, m.Mptresolved, m.EquinoxSec).Scan(&m.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	m._exists = true

	return nil
}

// Update updates the Mport in the database.
func (m *Mport) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !m._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if m._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.mport SET (` +
		`mptppmipid, mptcomments, mptactionreq, mptfirstpay, mptlastpay, mptresolved, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`) WHERE equinox_lrn = $8`

	// run query
	XOLog(sqlstr, m.Mptppmipid, m.Mptcomments, m.Mptactionreq, m.Mptfirstpay, m.Mptlastpay, m.Mptresolved, m.EquinoxSec, m.EquinoxLrn)
	_, err = db.Exec(sqlstr, m.Mptppmipid, m.Mptcomments, m.Mptactionreq, m.Mptfirstpay, m.Mptlastpay, m.Mptresolved, m.EquinoxSec, m.EquinoxLrn)
	return err
}

// Save saves the Mport to the database.
func (m *Mport) Save(db XODB) error {
	if m.Exists() {
		return m.Update(db)
	}

	return m.Insert(db)
}

// Upsert performs an upsert for Mport.
//
// NOTE: PostgreSQL 9.5+ only
func (m *Mport) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if m._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.mport (` +
		`mptppmipid, mptcomments, mptactionreq, mptfirstpay, mptlastpay, mptresolved, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`mptppmipid, mptcomments, mptactionreq, mptfirstpay, mptlastpay, mptresolved, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.mptppmipid, EXCLUDED.mptcomments, EXCLUDED.mptactionreq, EXCLUDED.mptfirstpay, EXCLUDED.mptlastpay, EXCLUDED.mptresolved, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, m.Mptppmipid, m.Mptcomments, m.Mptactionreq, m.Mptfirstpay, m.Mptlastpay, m.Mptresolved, m.EquinoxLrn, m.EquinoxSec)
	_, err = db.Exec(sqlstr, m.Mptppmipid, m.Mptcomments, m.Mptactionreq, m.Mptfirstpay, m.Mptlastpay, m.Mptresolved, m.EquinoxLrn, m.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	m._exists = true

	return nil
}

// Delete deletes the Mport from the database.
func (m *Mport) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !m._exists {
		return nil
	}

	// if deleted, bail
	if m._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.mport WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, m.EquinoxLrn)
	_, err = db.Exec(sqlstr, m.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	m._deleted = true

	return nil
}

// MportByEquinoxLrn retrieves a row from 'equinox.mport' as a Mport.
//
// Generated from index 'mport_pkey'.
func MportByEquinoxLrn(db XODB, equinoxLrn int64) (*Mport, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`mptppmipid, mptcomments, mptactionreq, mptfirstpay, mptlastpay, mptresolved, equinox_lrn, equinox_sec ` +
		`FROM equinox.mport ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	m := Mport{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&m.Mptppmipid, &m.Mptcomments, &m.Mptactionreq, &m.Mptfirstpay, &m.Mptlastpay, &m.Mptresolved, &m.EquinoxLrn, &m.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &m, nil
}
