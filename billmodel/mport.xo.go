// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"

	"github.com/lib/pq"
)

// Mport represents a row from 'equinox.mport'.
type Mport struct {
	Mptppmipid   sql.NullString `json:"mptppmipid"`   // mptppmipid
	Mptcomments  sql.NullInt64  `json:"mptcomments"`  // mptcomments
	Mptactionreq sql.NullInt64  `json:"mptactionreq"` // mptactionreq
	Mptfirstpay  pq.NullTime    `json:"mptfirstpay"`  // mptfirstpay
	Mptlastpay   pq.NullTime    `json:"mptlastpay"`   // mptlastpay
	Mptresolved  pq.NullTime    `json:"mptresolved"`  // mptresolved
	EquinoxLrn   int64          `json:"equinox_lrn"`  // equinox_lrn
	EquinoxSec   sql.NullInt64  `json:"equinox_sec"`  // equinox_sec
}

func AllMport(db XODB, callback func(x Mport) bool) error {

	// sql query
	const sqlstr = `SELECT ` +
		`mptppmipid, mptcomments, mptactionreq, mptfirstpay, mptlastpay, mptresolved, equinox_lrn, equinox_sec ` +
		`FROM equinox.mport `

	q, err := db.Query(sqlstr)

	if err != nil {
		return err
	}
	defer q.Close()

	// load results
	for q.Next() {
		m := Mport{}

		// scan
		err = q.Scan(&m.Mptppmipid, &m.Mptcomments, &m.Mptactionreq, &m.Mptfirstpay, &m.Mptlastpay, &m.Mptresolved, &m.EquinoxLrn, &m.EquinoxSec)
		if err != nil {
			return err
		}
		if !callback(m) {
			return nil
		}
	}

	return nil
}

// MportByEquinoxLrn retrieves a row from 'equinox.mport' as a Mport.
//
// Generated from index 'mport_pkey'.
func MportByEquinoxLrn(db XODB, equinoxLrn int64) (*Mport, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`mptppmipid, mptcomments, mptactionreq, mptfirstpay, mptlastpay, mptresolved, equinox_lrn, equinox_sec ` +
		`FROM equinox.mport ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	m := Mport{}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&m.Mptppmipid, &m.Mptcomments, &m.Mptactionreq, &m.Mptfirstpay, &m.Mptlastpay, &m.Mptresolved, &m.EquinoxLrn, &m.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &m, nil
}
