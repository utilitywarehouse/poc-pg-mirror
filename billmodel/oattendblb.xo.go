// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// OAttendBlb represents a row from 'equinox.o_attend_blb'.
type OAttendBlb struct {
	BlbLrn  int64          `json:"blb_lrn"`  // blb_lrn
	BlbData []byte         `json:"blb_data"` // blb_data
	BlbText sql.NullString `json:"blb_text"` // blb_text

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the OAttendBlb exists in the database.
func (oab *OAttendBlb) Exists() bool {
	return oab._exists
}

// Deleted provides information if the OAttendBlb has been deleted from the database.
func (oab *OAttendBlb) Deleted() bool {
	return oab._deleted
}

// Insert inserts the OAttendBlb to the database.
func (oab *OAttendBlb) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if oab._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.o_attend_blb (` +
		`blb_data, blb_text` +
		`) VALUES (` +
		`$1, $2` +
		`) RETURNING blb_lrn`

	// run query
	XOLog(sqlstr, oab.BlbData, oab.BlbText)
	err = db.QueryRow(sqlstr, oab.BlbData, oab.BlbText).Scan(&oab.BlbLrn)
	if err != nil {
		return err
	}

	// set existence
	oab._exists = true

	return nil
}

// Update updates the OAttendBlb in the database.
func (oab *OAttendBlb) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !oab._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if oab._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.o_attend_blb SET (` +
		`blb_data, blb_text` +
		`) = ( ` +
		`$1, $2` +
		`) WHERE blb_lrn = $3`

	// run query
	XOLog(sqlstr, oab.BlbData, oab.BlbText, oab.BlbLrn)
	_, err = db.Exec(sqlstr, oab.BlbData, oab.BlbText, oab.BlbLrn)
	return err
}

// Save saves the OAttendBlb to the database.
func (oab *OAttendBlb) Save(db XODB) error {
	if oab.Exists() {
		return oab.Update(db)
	}

	return oab.Insert(db)
}

// Upsert performs an upsert for OAttendBlb.
//
// NOTE: PostgreSQL 9.5+ only
func (oab *OAttendBlb) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if oab._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.o_attend_blb (` +
		`blb_lrn, blb_data, blb_text` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) ON CONFLICT (blb_lrn) DO UPDATE SET (` +
		`blb_lrn, blb_data, blb_text` +
		`) = (` +
		`EXCLUDED.blb_lrn, EXCLUDED.blb_data, EXCLUDED.blb_text` +
		`)`

	// run query
	XOLog(sqlstr, oab.BlbLrn, oab.BlbData, oab.BlbText)
	_, err = db.Exec(sqlstr, oab.BlbLrn, oab.BlbData, oab.BlbText)
	if err != nil {
		return err
	}

	// set existence
	oab._exists = true

	return nil
}

// Delete deletes the OAttendBlb from the database.
func (oab *OAttendBlb) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !oab._exists {
		return nil
	}

	// if deleted, bail
	if oab._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.o_attend_blb WHERE blb_lrn = $1`

	// run query
	XOLog(sqlstr, oab.BlbLrn)
	_, err = db.Exec(sqlstr, oab.BlbLrn)
	if err != nil {
		return err
	}

	// set deleted
	oab._deleted = true

	return nil
}

// OAttendBlbByBlbLrn retrieves a row from 'equinox.o_attend_blb' as a OAttendBlb.
//
// Generated from index 'o_attend_blb_pkey'.
func OAttendBlbByBlbLrn(db XODB, blbLrn int64) (*OAttendBlb, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`blb_lrn, blb_data, blb_text ` +
		`FROM equinox.o_attend_blb ` +
		`WHERE blb_lrn = $1`

	// run query
	XOLog(sqlstr, blbLrn)
	oab := OAttendBlb{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, blbLrn).Scan(&oab.BlbLrn, &oab.BlbData, &oab.BlbText)
	if err != nil {
		return nil, err
	}

	return &oab, nil
}
