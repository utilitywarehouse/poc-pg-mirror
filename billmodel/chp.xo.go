// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"

	"github.com/lib/pq"
)

// Chp represents a row from 'equinox.chp'.
type Chp struct {
	Chpid           sql.NullString `json:"chpid"`           // chpid
	Chpcustaccno    sql.NullString `json:"chpcustaccno"`    // chpcustaccno
	Chpispartner    sql.NullInt64  `json:"chpispartner"`    // chpispartner
	Chpstatus       sql.NullInt64  `json:"chpstatus"`       // chpstatus
	Chptype         sql.NullString `json:"chptype"`         // chptype
	Chpdept         sql.NullString `json:"chpdept"`         // chpdept
	Chpdebtsubgrp   sql.NullString `json:"chpdebtsubgrp"`   // chpdebtsubgrp
	Chpisdup        sql.NullInt64  `json:"chpisdup"`        // chpisdup
	Chpservice      sql.NullString `json:"chpservice"`      // chpservice
	Chpsource       sql.NullString `json:"chpsource"`       // chpsource
	Chpexcaseref    sql.NullString `json:"chpexcaseref"`    // chpexcaseref
	Chpemmaid       sql.NullString `json:"chpemmaid"`       // chpemmaid
	Chpcategory     sql.NullString `json:"chpcategory"`     // chpcategory
	Chpowner        sql.NullString `json:"chpowner"`        // chpowner
	Chpcreatedby    sql.NullString `json:"chpcreatedby"`    // chpcreatedby
	Chpopendate     pq.NullTime    `json:"chpopendate"`     // chpopendate
	Chpopentime     pq.NullTime    `json:"chpopentime"`     // chpopentime
	Chpclosedate    pq.NullTime    `json:"chpclosedate"`    // chpclosedate
	Chpclosetime    pq.NullTime    `json:"chpclosetime"`    // chpclosetime
	Chpreopened     sql.NullInt64  `json:"chpreopened"`     // chpreopened
	Chpreopreason   sql.NullString `json:"chpreopreason"`   // chpreopreason
	Chpcontname     sql.NullString `json:"chpcontname"`     // chpcontname
	Chpcontemail    sql.NullString `json:"chpcontemail"`    // chpcontemail
	Chpcontphone    sql.NullString `json:"chpcontphone"`    // chpcontphone
	Chpnotes        sql.NullInt64  `json:"chpnotes"`        // chpnotes
	Chpnxtdayletter pq.NullTime    `json:"chpnxtdayletter"` // chpnxtdayletter
	Chp8weekletter  pq.NullTime    `json:"chp8weekletter"`  // chp8weekletter
	Chpescto        sql.NullString `json:"chpescto"`        // chpescto
	Chpsparec1      sql.NullString `json:"chpsparec1"`      // chpsparec1
	Chpsparec2      sql.NullString `json:"chpsparec2"`      // chpsparec2
	Chpspared1      pq.NullTime    `json:"chpspared1"`      // chpspared1
	Chp4weekletter  pq.NullTime    `json:"chp4weekletter"`  // chp4weekletter
	Chpsparen1      sql.NullInt64  `json:"chpsparen1"`      // chpsparen1
	Chpsparen2      sql.NullInt64  `json:"chpsparen2"`      // chpsparen2
	Chpsparel1      sql.NullInt64  `json:"chpsparel1"`      // chpsparel1
	Chpthirdparty   sql.NullInt64  `json:"chpthirdparty"`   // chpthirdparty
	EquinoxLrn      int64          `json:"equinox_lrn"`     // equinox_lrn
	EquinoxSec      sql.NullInt64  `json:"equinox_sec"`     // equinox_sec
}

func AllChp(db XODB, callback func(x Chp) bool) error {

	// sql query
	const sqlstr = `SELECT ` +
		`chpid, chpcustaccno, chpispartner, chpstatus, chptype, chpdept, chpdebtsubgrp, chpisdup, chpservice, chpsource, chpexcaseref, chpemmaid, chpcategory, chpowner, chpcreatedby, chpopendate, chpopentime, chpclosedate, chpclosetime, chpreopened, chpreopreason, chpcontname, chpcontemail, chpcontphone, chpnotes, chpnxtdayletter, chp8weekletter, chpescto, chpsparec1, chpsparec2, chpspared1, chp4weekletter, chpsparen1, chpsparen2, chpsparel1, chpthirdparty, equinox_lrn, equinox_sec ` +
		`FROM equinox.chp `

	q, err := db.Query(sqlstr)

	if err != nil {
		return err
	}
	defer q.Close()

	// load results
	for q.Next() {
		c := Chp{}

		// scan
		err = q.Scan(&c.Chpid, &c.Chpcustaccno, &c.Chpispartner, &c.Chpstatus, &c.Chptype, &c.Chpdept, &c.Chpdebtsubgrp, &c.Chpisdup, &c.Chpservice, &c.Chpsource, &c.Chpexcaseref, &c.Chpemmaid, &c.Chpcategory, &c.Chpowner, &c.Chpcreatedby, &c.Chpopendate, &c.Chpopentime, &c.Chpclosedate, &c.Chpclosetime, &c.Chpreopened, &c.Chpreopreason, &c.Chpcontname, &c.Chpcontemail, &c.Chpcontphone, &c.Chpnotes, &c.Chpnxtdayletter, &c.Chp8weekletter, &c.Chpescto, &c.Chpsparec1, &c.Chpsparec2, &c.Chpspared1, &c.Chp4weekletter, &c.Chpsparen1, &c.Chpsparen2, &c.Chpsparel1, &c.Chpthirdparty, &c.EquinoxLrn, &c.EquinoxSec)
		if err != nil {
			return err
		}
		if !callback(c) {
			return nil
		}
	}

	return nil
}

// ChpByEquinoxLrn retrieves a row from 'equinox.chp' as a Chp.
//
// Generated from index 'chp_pkey'.
func ChpByEquinoxLrn(db XODB, equinoxLrn int64) (*Chp, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`chpid, chpcustaccno, chpispartner, chpstatus, chptype, chpdept, chpdebtsubgrp, chpisdup, chpservice, chpsource, chpexcaseref, chpemmaid, chpcategory, chpowner, chpcreatedby, chpopendate, chpopentime, chpclosedate, chpclosetime, chpreopened, chpreopreason, chpcontname, chpcontemail, chpcontphone, chpnotes, chpnxtdayletter, chp8weekletter, chpescto, chpsparec1, chpsparec2, chpspared1, chp4weekletter, chpsparen1, chpsparen2, chpsparel1, chpthirdparty, equinox_lrn, equinox_sec ` +
		`FROM equinox.chp ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	c := Chp{}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&c.Chpid, &c.Chpcustaccno, &c.Chpispartner, &c.Chpstatus, &c.Chptype, &c.Chpdept, &c.Chpdebtsubgrp, &c.Chpisdup, &c.Chpservice, &c.Chpsource, &c.Chpexcaseref, &c.Chpemmaid, &c.Chpcategory, &c.Chpowner, &c.Chpcreatedby, &c.Chpopendate, &c.Chpopentime, &c.Chpclosedate, &c.Chpclosetime, &c.Chpreopened, &c.Chpreopreason, &c.Chpcontname, &c.Chpcontemail, &c.Chpcontphone, &c.Chpnotes, &c.Chpnxtdayletter, &c.Chp8weekletter, &c.Chpescto, &c.Chpsparec1, &c.Chpsparec2, &c.Chpspared1, &c.Chp4weekletter, &c.Chpsparen1, &c.Chpsparen2, &c.Chpsparel1, &c.Chpthirdparty, &c.EquinoxLrn, &c.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &c, nil
}
