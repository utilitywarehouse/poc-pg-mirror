// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// Reasnbad represents a row from 'equinox.reasnbad'.
type Reasnbad struct {
	Reaid         sql.NullInt64  `json:"reaid"`         // reaid
	Readescrip    sql.NullString `json:"readescrip"`    // readescrip
	Reareportname sql.NullString `json:"reareportname"` // reareportname
	EquinoxLrn    int64          `json:"equinox_lrn"`   // equinox_lrn
	EquinoxSec    sql.NullInt64  `json:"equinox_sec"`   // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Reasnbad exists in the database.
func (r *Reasnbad) Exists() bool {
	return r._exists
}

// Deleted provides information if the Reasnbad has been deleted from the database.
func (r *Reasnbad) Deleted() bool {
	return r._deleted
}

// Insert inserts the Reasnbad to the database.
func (r *Reasnbad) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if r._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.reasnbad (` +
		`reaid, readescrip, reareportname, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, r.Reaid, r.Readescrip, r.Reareportname, r.EquinoxSec)
	err = db.QueryRow(sqlstr, r.Reaid, r.Readescrip, r.Reareportname, r.EquinoxSec).Scan(&r.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	r._exists = true

	return nil
}

// Update updates the Reasnbad in the database.
func (r *Reasnbad) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !r._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if r._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.reasnbad SET (` +
		`reaid, readescrip, reareportname, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4` +
		`) WHERE equinox_lrn = $5`

	// run query
	XOLog(sqlstr, r.Reaid, r.Readescrip, r.Reareportname, r.EquinoxSec, r.EquinoxLrn)
	_, err = db.Exec(sqlstr, r.Reaid, r.Readescrip, r.Reareportname, r.EquinoxSec, r.EquinoxLrn)
	return err
}

// Save saves the Reasnbad to the database.
func (r *Reasnbad) Save(db XODB) error {
	if r.Exists() {
		return r.Update(db)
	}

	return r.Insert(db)
}

// Upsert performs an upsert for Reasnbad.
//
// NOTE: PostgreSQL 9.5+ only
func (r *Reasnbad) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if r._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.reasnbad (` +
		`reaid, readescrip, reareportname, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`reaid, readescrip, reareportname, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.reaid, EXCLUDED.readescrip, EXCLUDED.reareportname, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, r.Reaid, r.Readescrip, r.Reareportname, r.EquinoxLrn, r.EquinoxSec)
	_, err = db.Exec(sqlstr, r.Reaid, r.Readescrip, r.Reareportname, r.EquinoxLrn, r.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	r._exists = true

	return nil
}

// Delete deletes the Reasnbad from the database.
func (r *Reasnbad) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !r._exists {
		return nil
	}

	// if deleted, bail
	if r._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.reasnbad WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, r.EquinoxLrn)
	_, err = db.Exec(sqlstr, r.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	r._deleted = true

	return nil
}

// ReasnbadByEquinoxLrn retrieves a row from 'equinox.reasnbad' as a Reasnbad.
//
// Generated from index 'reasnbad_pkey'.
func ReasnbadByEquinoxLrn(db XODB, equinoxLrn int64) (*Reasnbad, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`reaid, readescrip, reareportname, equinox_lrn, equinox_sec ` +
		`FROM equinox.reasnbad ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	r := Reasnbad{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&r.Reaid, &r.Readescrip, &r.Reareportname, &r.EquinoxLrn, &r.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &r, nil
}
