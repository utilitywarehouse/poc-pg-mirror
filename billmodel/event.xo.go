// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/lib/pq"
)

// Event represents a row from 'equinox.events'.
type Event struct {
	Eventid      sql.NullInt64  `json:"eventid"`      // eventid
	Evname       sql.NullString `json:"evname"`       // evname
	Evfrequency  sql.NullString `json:"evfrequency"`  // evfrequency
	Evstart      pq.NullTime    `json:"evstart"`      // evstart
	Evend        pq.NullTime    `json:"evend"`        // evend
	Evtimeofday  pq.NullTime    `json:"evtimeofday"`  // evtimeofday
	Evdayofweek  sql.NullString `json:"evdayofweek"`  // evdayofweek
	Evdayofmonth sql.NullInt64  `json:"evdayofmonth"` // evdayofmonth
	EquinoxLrn   int64          `json:"equinox_lrn"`  // equinox_lrn
	EquinoxSec   sql.NullInt64  `json:"equinox_sec"`  // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Event exists in the database.
func (e *Event) Exists() bool {
	return e._exists
}

// Deleted provides information if the Event has been deleted from the database.
func (e *Event) Deleted() bool {
	return e._deleted
}

// Insert inserts the Event to the database.
func (e *Event) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if e._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.events (` +
		`eventid, evname, evfrequency, evstart, evend, evtimeofday, evdayofweek, evdayofmonth, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, e.Eventid, e.Evname, e.Evfrequency, e.Evstart, e.Evend, e.Evtimeofday, e.Evdayofweek, e.Evdayofmonth, e.EquinoxSec)
	err = db.QueryRow(sqlstr, e.Eventid, e.Evname, e.Evfrequency, e.Evstart, e.Evend, e.Evtimeofday, e.Evdayofweek, e.Evdayofmonth, e.EquinoxSec).Scan(&e.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	e._exists = true

	return nil
}

// Update updates the Event in the database.
func (e *Event) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !e._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if e._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.events SET (` +
		`eventid, evname, evfrequency, evstart, evend, evtimeofday, evdayofweek, evdayofmonth, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9` +
		`) WHERE equinox_lrn = $10`

	// run query
	XOLog(sqlstr, e.Eventid, e.Evname, e.Evfrequency, e.Evstart, e.Evend, e.Evtimeofday, e.Evdayofweek, e.Evdayofmonth, e.EquinoxSec, e.EquinoxLrn)
	_, err = db.Exec(sqlstr, e.Eventid, e.Evname, e.Evfrequency, e.Evstart, e.Evend, e.Evtimeofday, e.Evdayofweek, e.Evdayofmonth, e.EquinoxSec, e.EquinoxLrn)
	return err
}

// Save saves the Event to the database.
func (e *Event) Save(db XODB) error {
	if e.Exists() {
		return e.Update(db)
	}

	return e.Insert(db)
}

// Upsert performs an upsert for Event.
//
// NOTE: PostgreSQL 9.5+ only
func (e *Event) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if e._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.events (` +
		`eventid, evname, evfrequency, evstart, evend, evtimeofday, evdayofweek, evdayofmonth, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`eventid, evname, evfrequency, evstart, evend, evtimeofday, evdayofweek, evdayofmonth, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.eventid, EXCLUDED.evname, EXCLUDED.evfrequency, EXCLUDED.evstart, EXCLUDED.evend, EXCLUDED.evtimeofday, EXCLUDED.evdayofweek, EXCLUDED.evdayofmonth, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, e.Eventid, e.Evname, e.Evfrequency, e.Evstart, e.Evend, e.Evtimeofday, e.Evdayofweek, e.Evdayofmonth, e.EquinoxLrn, e.EquinoxSec)
	_, err = db.Exec(sqlstr, e.Eventid, e.Evname, e.Evfrequency, e.Evstart, e.Evend, e.Evtimeofday, e.Evdayofweek, e.Evdayofmonth, e.EquinoxLrn, e.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	e._exists = true

	return nil
}

// Delete deletes the Event from the database.
func (e *Event) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !e._exists {
		return nil
	}

	// if deleted, bail
	if e._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.events WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, e.EquinoxLrn)
	_, err = db.Exec(sqlstr, e.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	e._deleted = true

	return nil
}

// EventByEquinoxLrn retrieves a row from 'equinox.events' as a Event.
//
// Generated from index 'events_pkey'.
func EventByEquinoxLrn(db XODB, equinoxLrn int64) (*Event, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`eventid, evname, evfrequency, evstart, evend, evtimeofday, evdayofweek, evdayofmonth, equinox_lrn, equinox_sec ` +
		`FROM equinox.events ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	e := Event{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&e.Eventid, &e.Evname, &e.Evfrequency, &e.Evstart, &e.Evend, &e.Evtimeofday, &e.Evdayofweek, &e.Evdayofmonth, &e.EquinoxLrn, &e.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &e, nil
}
