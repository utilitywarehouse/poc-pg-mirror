// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// Fincnfig represents a row from 'equinox.fincnfig'.
type Fincnfig struct {
	Fnccref          sql.NullString `json:"fnccref"`          // fnccref
	Fncccommentcode  sql.NullString `json:"fncccommentcode"`  // fncccommentcode
	Fnccpaymenttype  sql.NullString `json:"fnccpaymenttype"`  // fnccpaymenttype
	Fnccpaymenttitle sql.NullString `json:"fnccpaymenttitle"` // fnccpaymenttitle
	Fnccbatchcode    sql.NullString `json:"fnccbatchcode"`    // fnccbatchcode
	Fnccadjustment   sql.NullString `json:"fnccadjustment"`   // fnccadjustment
	Fncccompymnttype sql.NullString `json:"fncccompymnttype"` // fncccompymnttype
	Fnccdescription  sql.NullString `json:"fnccdescription"`  // fnccdescription
	Fnccsuspend      sql.NullInt64  `json:"fnccsuspend"`      // fnccsuspend
	Fncccomadj       sql.NullString `json:"fncccomadj"`       // fncccomadj
	Fncccomamount    sql.NullString `json:"fncccomamount"`    // fncccomamount
	Fnccpending      sql.NullString `json:"fnccpending"`      // fnccpending
	Fnccdisplaysign  sql.NullString `json:"fnccdisplaysign"`  // fnccdisplaysign
	EquinoxLrn       int64          `json:"equinox_lrn"`      // equinox_lrn
	EquinoxSec       sql.NullInt64  `json:"equinox_sec"`      // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Fincnfig exists in the database.
func (f *Fincnfig) Exists() bool {
	return f._exists
}

// Deleted provides information if the Fincnfig has been deleted from the database.
func (f *Fincnfig) Deleted() bool {
	return f._deleted
}

// Insert inserts the Fincnfig to the database.
func (f *Fincnfig) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if f._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.fincnfig (` +
		`fnccref, fncccommentcode, fnccpaymenttype, fnccpaymenttitle, fnccbatchcode, fnccadjustment, fncccompymnttype, fnccdescription, fnccsuspend, fncccomadj, fncccomamount, fnccpending, fnccdisplaysign, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, f.Fnccref, f.Fncccommentcode, f.Fnccpaymenttype, f.Fnccpaymenttitle, f.Fnccbatchcode, f.Fnccadjustment, f.Fncccompymnttype, f.Fnccdescription, f.Fnccsuspend, f.Fncccomadj, f.Fncccomamount, f.Fnccpending, f.Fnccdisplaysign, f.EquinoxSec)
	err = db.QueryRow(sqlstr, f.Fnccref, f.Fncccommentcode, f.Fnccpaymenttype, f.Fnccpaymenttitle, f.Fnccbatchcode, f.Fnccadjustment, f.Fncccompymnttype, f.Fnccdescription, f.Fnccsuspend, f.Fncccomadj, f.Fncccomamount, f.Fnccpending, f.Fnccdisplaysign, f.EquinoxSec).Scan(&f.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	f._exists = true

	return nil
}

// Update updates the Fincnfig in the database.
func (f *Fincnfig) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !f._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if f._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.fincnfig SET (` +
		`fnccref, fncccommentcode, fnccpaymenttype, fnccpaymenttitle, fnccbatchcode, fnccadjustment, fncccompymnttype, fnccdescription, fnccsuspend, fncccomadj, fncccomamount, fnccpending, fnccdisplaysign, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14` +
		`) WHERE equinox_lrn = $15`

	// run query
	XOLog(sqlstr, f.Fnccref, f.Fncccommentcode, f.Fnccpaymenttype, f.Fnccpaymenttitle, f.Fnccbatchcode, f.Fnccadjustment, f.Fncccompymnttype, f.Fnccdescription, f.Fnccsuspend, f.Fncccomadj, f.Fncccomamount, f.Fnccpending, f.Fnccdisplaysign, f.EquinoxSec, f.EquinoxLrn)
	_, err = db.Exec(sqlstr, f.Fnccref, f.Fncccommentcode, f.Fnccpaymenttype, f.Fnccpaymenttitle, f.Fnccbatchcode, f.Fnccadjustment, f.Fncccompymnttype, f.Fnccdescription, f.Fnccsuspend, f.Fncccomadj, f.Fncccomamount, f.Fnccpending, f.Fnccdisplaysign, f.EquinoxSec, f.EquinoxLrn)
	return err
}

// Save saves the Fincnfig to the database.
func (f *Fincnfig) Save(db XODB) error {
	if f.Exists() {
		return f.Update(db)
	}

	return f.Insert(db)
}

// Upsert performs an upsert for Fincnfig.
//
// NOTE: PostgreSQL 9.5+ only
func (f *Fincnfig) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if f._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.fincnfig (` +
		`fnccref, fncccommentcode, fnccpaymenttype, fnccpaymenttitle, fnccbatchcode, fnccadjustment, fncccompymnttype, fnccdescription, fnccsuspend, fncccomadj, fncccomamount, fnccpending, fnccdisplaysign, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`fnccref, fncccommentcode, fnccpaymenttype, fnccpaymenttitle, fnccbatchcode, fnccadjustment, fncccompymnttype, fnccdescription, fnccsuspend, fncccomadj, fncccomamount, fnccpending, fnccdisplaysign, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.fnccref, EXCLUDED.fncccommentcode, EXCLUDED.fnccpaymenttype, EXCLUDED.fnccpaymenttitle, EXCLUDED.fnccbatchcode, EXCLUDED.fnccadjustment, EXCLUDED.fncccompymnttype, EXCLUDED.fnccdescription, EXCLUDED.fnccsuspend, EXCLUDED.fncccomadj, EXCLUDED.fncccomamount, EXCLUDED.fnccpending, EXCLUDED.fnccdisplaysign, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, f.Fnccref, f.Fncccommentcode, f.Fnccpaymenttype, f.Fnccpaymenttitle, f.Fnccbatchcode, f.Fnccadjustment, f.Fncccompymnttype, f.Fnccdescription, f.Fnccsuspend, f.Fncccomadj, f.Fncccomamount, f.Fnccpending, f.Fnccdisplaysign, f.EquinoxLrn, f.EquinoxSec)
	_, err = db.Exec(sqlstr, f.Fnccref, f.Fncccommentcode, f.Fnccpaymenttype, f.Fnccpaymenttitle, f.Fnccbatchcode, f.Fnccadjustment, f.Fncccompymnttype, f.Fnccdescription, f.Fnccsuspend, f.Fncccomadj, f.Fncccomamount, f.Fnccpending, f.Fnccdisplaysign, f.EquinoxLrn, f.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	f._exists = true

	return nil
}

// Delete deletes the Fincnfig from the database.
func (f *Fincnfig) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !f._exists {
		return nil
	}

	// if deleted, bail
	if f._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.fincnfig WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, f.EquinoxLrn)
	_, err = db.Exec(sqlstr, f.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	f._deleted = true

	return nil
}

// FincnfigByEquinoxLrn retrieves a row from 'equinox.fincnfig' as a Fincnfig.
//
// Generated from index 'fincnfig_pkey'.
func FincnfigByEquinoxLrn(db XODB, equinoxLrn int64) (*Fincnfig, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`fnccref, fncccommentcode, fnccpaymenttype, fnccpaymenttitle, fnccbatchcode, fnccadjustment, fncccompymnttype, fnccdescription, fnccsuspend, fncccomadj, fncccomamount, fnccpending, fnccdisplaysign, equinox_lrn, equinox_sec ` +
		`FROM equinox.fincnfig ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	f := Fincnfig{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&f.Fnccref, &f.Fncccommentcode, &f.Fnccpaymenttype, &f.Fnccpaymenttitle, &f.Fnccbatchcode, &f.Fnccadjustment, &f.Fncccompymnttype, &f.Fnccdescription, &f.Fnccsuspend, &f.Fncccomadj, &f.Fncccomamount, &f.Fnccpending, &f.Fnccdisplaysign, &f.EquinoxLrn, &f.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &f, nil
}
