// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"

	"github.com/lib/pq"
)

// Gmorhist represents a row from 'equinox.gmorhist'.
type Gmorhist struct {
	Gmohdate   pq.NullTime    `json:"gmohdate"`    // gmohdate
	Gmohdtime  pq.NullTime    `json:"gmohdtime"`   // gmohdtime
	Gmohaction sql.NullString `json:"gmohaction"`  // gmohaction
	Gmohnotes  sql.NullInt64  `json:"gmohnotes"`   // gmohnotes
	EquinoxPrn sql.NullInt64  `json:"equinox_prn"` // equinox_prn
	EquinoxLrn int64          `json:"equinox_lrn"` // equinox_lrn
	EquinoxSec sql.NullInt64  `json:"equinox_sec"` // equinox_sec
}

func AllGmorhist(db XODB, callback func(x Gmorhist) bool) error {

	// sql query
	const sqlstr = `SELECT ` +
		`gmohdate, gmohdtime, gmohaction, gmohnotes, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.gmorhist `

	q, err := db.Query(sqlstr)

	if err != nil {
		return err
	}
	defer q.Close()

	// load results
	for q.Next() {
		g := Gmorhist{}

		// scan
		err = q.Scan(&g.Gmohdate, &g.Gmohdtime, &g.Gmohaction, &g.Gmohnotes, &g.EquinoxPrn, &g.EquinoxLrn, &g.EquinoxSec)
		if err != nil {
			return err
		}
		if !callback(g) {
			return nil
		}
	}

	return nil
}

// GmorhistByEquinoxLrn retrieves a row from 'equinox.gmorhist' as a Gmorhist.
//
// Generated from index 'gmorhist_pkey'.
func GmorhistByEquinoxLrn(db XODB, equinoxLrn int64) (*Gmorhist, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`gmohdate, gmohdtime, gmohaction, gmohnotes, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.gmorhist ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	g := Gmorhist{}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&g.Gmohdate, &g.Gmohdtime, &g.Gmohaction, &g.Gmohnotes, &g.EquinoxPrn, &g.EquinoxLrn, &g.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &g, nil
}
