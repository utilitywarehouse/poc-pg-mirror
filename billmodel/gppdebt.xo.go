// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/lib/pq"
)

// Gppdebt represents a row from 'equinox.gppdebt'.
type Gppdebt struct {
	Gppddebt         sql.NullFloat64 `json:"gppddebt"`         // gppddebt
	Gppdweeklymax    sql.NullFloat64 `json:"gppdweeklymax"`    // gppdweeklymax
	Gppdweeklymin    sql.NullFloat64 `json:"gppdweeklymin"`    // gppdweeklymin
	Gppdpercent      sql.NullInt64   `json:"gppdpercent"`      // gppdpercent
	Gppdnongasdebt   sql.NullFloat64 `json:"gppdnongasdebt"`   // gppdnongasdebt
	Gppddate         pq.NullTime     `json:"gppddate"`         // gppddate
	Gppdemergcredlim sql.NullInt64   `json:"gppdemergcredlim"` // gppdemergcredlim
	Gppdemergcreddeb sql.NullFloat64 `json:"gppdemergcreddeb"` // gppdemergcreddeb
	Gppdlog1         sql.NullFloat64 `json:"gppdlog1"`         // gppdlog1
	Gppdlog2         sql.NullFloat64 `json:"gppdlog2"`         // gppdlog2
	Gppdlog3         sql.NullFloat64 `json:"gppdlog3"`         // gppdlog3
	Gppdlog4         sql.NullFloat64 `json:"gppdlog4"`         // gppdlog4
	Gppdmsnmatch     sql.NullInt64   `json:"gppdmsnmatch"`     // gppdmsnmatch
	EquinoxPrn       sql.NullInt64   `json:"equinox_prn"`      // equinox_prn
	EquinoxLrn       int64           `json:"equinox_lrn"`      // equinox_lrn
	EquinoxSec       sql.NullInt64   `json:"equinox_sec"`      // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Gppdebt exists in the database.
func (g *Gppdebt) Exists() bool {
	return g._exists
}

// Deleted provides information if the Gppdebt has been deleted from the database.
func (g *Gppdebt) Deleted() bool {
	return g._deleted
}

// Insert inserts the Gppdebt to the database.
func (g *Gppdebt) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if g._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.gppdebt (` +
		`gppddebt, gppdweeklymax, gppdweeklymin, gppdpercent, gppdnongasdebt, gppddate, gppdemergcredlim, gppdemergcreddeb, gppdlog1, gppdlog2, gppdlog3, gppdlog4, gppdmsnmatch, equinox_prn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, g.Gppddebt, g.Gppdweeklymax, g.Gppdweeklymin, g.Gppdpercent, g.Gppdnongasdebt, g.Gppddate, g.Gppdemergcredlim, g.Gppdemergcreddeb, g.Gppdlog1, g.Gppdlog2, g.Gppdlog3, g.Gppdlog4, g.Gppdmsnmatch, g.EquinoxPrn, g.EquinoxSec)
	err = db.QueryRow(sqlstr, g.Gppddebt, g.Gppdweeklymax, g.Gppdweeklymin, g.Gppdpercent, g.Gppdnongasdebt, g.Gppddate, g.Gppdemergcredlim, g.Gppdemergcreddeb, g.Gppdlog1, g.Gppdlog2, g.Gppdlog3, g.Gppdlog4, g.Gppdmsnmatch, g.EquinoxPrn, g.EquinoxSec).Scan(&g.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	g._exists = true

	return nil
}

// Update updates the Gppdebt in the database.
func (g *Gppdebt) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !g._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if g._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.gppdebt SET (` +
		`gppddebt, gppdweeklymax, gppdweeklymin, gppdpercent, gppdnongasdebt, gppddate, gppdemergcredlim, gppdemergcreddeb, gppdlog1, gppdlog2, gppdlog3, gppdlog4, gppdmsnmatch, equinox_prn, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15` +
		`) WHERE equinox_lrn = $16`

	// run query
	XOLog(sqlstr, g.Gppddebt, g.Gppdweeklymax, g.Gppdweeklymin, g.Gppdpercent, g.Gppdnongasdebt, g.Gppddate, g.Gppdemergcredlim, g.Gppdemergcreddeb, g.Gppdlog1, g.Gppdlog2, g.Gppdlog3, g.Gppdlog4, g.Gppdmsnmatch, g.EquinoxPrn, g.EquinoxSec, g.EquinoxLrn)
	_, err = db.Exec(sqlstr, g.Gppddebt, g.Gppdweeklymax, g.Gppdweeklymin, g.Gppdpercent, g.Gppdnongasdebt, g.Gppddate, g.Gppdemergcredlim, g.Gppdemergcreddeb, g.Gppdlog1, g.Gppdlog2, g.Gppdlog3, g.Gppdlog4, g.Gppdmsnmatch, g.EquinoxPrn, g.EquinoxSec, g.EquinoxLrn)
	return err
}

// Save saves the Gppdebt to the database.
func (g *Gppdebt) Save(db XODB) error {
	if g.Exists() {
		return g.Update(db)
	}

	return g.Insert(db)
}

// Upsert performs an upsert for Gppdebt.
//
// NOTE: PostgreSQL 9.5+ only
func (g *Gppdebt) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if g._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.gppdebt (` +
		`gppddebt, gppdweeklymax, gppdweeklymin, gppdpercent, gppdnongasdebt, gppddate, gppdemergcredlim, gppdemergcreddeb, gppdlog1, gppdlog2, gppdlog3, gppdlog4, gppdmsnmatch, equinox_prn, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`gppddebt, gppdweeklymax, gppdweeklymin, gppdpercent, gppdnongasdebt, gppddate, gppdemergcredlim, gppdemergcreddeb, gppdlog1, gppdlog2, gppdlog3, gppdlog4, gppdmsnmatch, equinox_prn, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.gppddebt, EXCLUDED.gppdweeklymax, EXCLUDED.gppdweeklymin, EXCLUDED.gppdpercent, EXCLUDED.gppdnongasdebt, EXCLUDED.gppddate, EXCLUDED.gppdemergcredlim, EXCLUDED.gppdemergcreddeb, EXCLUDED.gppdlog1, EXCLUDED.gppdlog2, EXCLUDED.gppdlog3, EXCLUDED.gppdlog4, EXCLUDED.gppdmsnmatch, EXCLUDED.equinox_prn, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, g.Gppddebt, g.Gppdweeklymax, g.Gppdweeklymin, g.Gppdpercent, g.Gppdnongasdebt, g.Gppddate, g.Gppdemergcredlim, g.Gppdemergcreddeb, g.Gppdlog1, g.Gppdlog2, g.Gppdlog3, g.Gppdlog4, g.Gppdmsnmatch, g.EquinoxPrn, g.EquinoxLrn, g.EquinoxSec)
	_, err = db.Exec(sqlstr, g.Gppddebt, g.Gppdweeklymax, g.Gppdweeklymin, g.Gppdpercent, g.Gppdnongasdebt, g.Gppddate, g.Gppdemergcredlim, g.Gppdemergcreddeb, g.Gppdlog1, g.Gppdlog2, g.Gppdlog3, g.Gppdlog4, g.Gppdmsnmatch, g.EquinoxPrn, g.EquinoxLrn, g.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	g._exists = true

	return nil
}

// Delete deletes the Gppdebt from the database.
func (g *Gppdebt) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !g._exists {
		return nil
	}

	// if deleted, bail
	if g._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.gppdebt WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, g.EquinoxLrn)
	_, err = db.Exec(sqlstr, g.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	g._deleted = true

	return nil
}

// GppdebtByEquinoxLrn retrieves a row from 'equinox.gppdebt' as a Gppdebt.
//
// Generated from index 'gppdebt_pkey'.
func GppdebtByEquinoxLrn(db XODB, equinoxLrn int64) (*Gppdebt, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`gppddebt, gppdweeklymax, gppdweeklymin, gppdpercent, gppdnongasdebt, gppddate, gppdemergcredlim, gppdemergcreddeb, gppdlog1, gppdlog2, gppdlog3, gppdlog4, gppdmsnmatch, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.gppdebt ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	g := Gppdebt{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&g.Gppddebt, &g.Gppdweeklymax, &g.Gppdweeklymin, &g.Gppdpercent, &g.Gppdnongasdebt, &g.Gppddate, &g.Gppdemergcredlim, &g.Gppdemergcreddeb, &g.Gppdlog1, &g.Gppdlog2, &g.Gppdlog3, &g.Gppdlog4, &g.Gppdmsnmatch, &g.EquinoxPrn, &g.EquinoxLrn, &g.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &g, nil
}
