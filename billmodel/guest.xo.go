// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// Guest represents a row from 'equinox.guest'.
type Guest struct {
	GuestExpID   sql.NullString `json:"guest_exp_id"`  // guest_exp_id
	GuestName    sql.NullString `json:"guest_name"`    // guest_name
	GuestRegd    sql.NullInt64  `json:"guest_regd"`    // guest_regd
	GuestMemo    sql.NullInt64  `json:"guest_memo"`    // guest_memo
	GuestExecid  sql.NullString `json:"guest_execid"`  // guest_execid
	GuestGroup   sql.NullString `json:"guest_group"`   // guest_group
	GuestSeminar sql.NullString `json:"guest_seminar"` // guest_seminar
	EquinoxPrn   sql.NullInt64  `json:"equinox_prn"`   // equinox_prn
	EquinoxLrn   int64          `json:"equinox_lrn"`   // equinox_lrn
	EquinoxSec   sql.NullInt64  `json:"equinox_sec"`   // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Guest exists in the database.
func (g *Guest) Exists() bool {
	return g._exists
}

// Deleted provides information if the Guest has been deleted from the database.
func (g *Guest) Deleted() bool {
	return g._deleted
}

// Insert inserts the Guest to the database.
func (g *Guest) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if g._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.guest (` +
		`guest_exp_id, guest_name, guest_regd, guest_memo, guest_execid, guest_group, guest_seminar, equinox_prn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, g.GuestExpID, g.GuestName, g.GuestRegd, g.GuestMemo, g.GuestExecid, g.GuestGroup, g.GuestSeminar, g.EquinoxPrn, g.EquinoxSec)
	err = db.QueryRow(sqlstr, g.GuestExpID, g.GuestName, g.GuestRegd, g.GuestMemo, g.GuestExecid, g.GuestGroup, g.GuestSeminar, g.EquinoxPrn, g.EquinoxSec).Scan(&g.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	g._exists = true

	return nil
}

// Update updates the Guest in the database.
func (g *Guest) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !g._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if g._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.guest SET (` +
		`guest_exp_id, guest_name, guest_regd, guest_memo, guest_execid, guest_group, guest_seminar, equinox_prn, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9` +
		`) WHERE equinox_lrn = $10`

	// run query
	XOLog(sqlstr, g.GuestExpID, g.GuestName, g.GuestRegd, g.GuestMemo, g.GuestExecid, g.GuestGroup, g.GuestSeminar, g.EquinoxPrn, g.EquinoxSec, g.EquinoxLrn)
	_, err = db.Exec(sqlstr, g.GuestExpID, g.GuestName, g.GuestRegd, g.GuestMemo, g.GuestExecid, g.GuestGroup, g.GuestSeminar, g.EquinoxPrn, g.EquinoxSec, g.EquinoxLrn)
	return err
}

// Save saves the Guest to the database.
func (g *Guest) Save(db XODB) error {
	if g.Exists() {
		return g.Update(db)
	}

	return g.Insert(db)
}

// Upsert performs an upsert for Guest.
//
// NOTE: PostgreSQL 9.5+ only
func (g *Guest) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if g._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.guest (` +
		`guest_exp_id, guest_name, guest_regd, guest_memo, guest_execid, guest_group, guest_seminar, equinox_prn, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`guest_exp_id, guest_name, guest_regd, guest_memo, guest_execid, guest_group, guest_seminar, equinox_prn, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.guest_exp_id, EXCLUDED.guest_name, EXCLUDED.guest_regd, EXCLUDED.guest_memo, EXCLUDED.guest_execid, EXCLUDED.guest_group, EXCLUDED.guest_seminar, EXCLUDED.equinox_prn, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, g.GuestExpID, g.GuestName, g.GuestRegd, g.GuestMemo, g.GuestExecid, g.GuestGroup, g.GuestSeminar, g.EquinoxPrn, g.EquinoxLrn, g.EquinoxSec)
	_, err = db.Exec(sqlstr, g.GuestExpID, g.GuestName, g.GuestRegd, g.GuestMemo, g.GuestExecid, g.GuestGroup, g.GuestSeminar, g.EquinoxPrn, g.EquinoxLrn, g.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	g._exists = true

	return nil
}

// Delete deletes the Guest from the database.
func (g *Guest) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !g._exists {
		return nil
	}

	// if deleted, bail
	if g._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.guest WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, g.EquinoxLrn)
	_, err = db.Exec(sqlstr, g.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	g._deleted = true

	return nil
}

// GuestByEquinoxLrn retrieves a row from 'equinox.guest' as a Guest.
//
// Generated from index 'guest_pkey'.
func GuestByEquinoxLrn(db XODB, equinoxLrn int64) (*Guest, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`guest_exp_id, guest_name, guest_regd, guest_memo, guest_execid, guest_group, guest_seminar, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.guest ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	g := Guest{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&g.GuestExpID, &g.GuestName, &g.GuestRegd, &g.GuestMemo, &g.GuestExecid, &g.GuestGroup, &g.GuestSeminar, &g.EquinoxPrn, &g.EquinoxLrn, &g.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &g, nil
}
