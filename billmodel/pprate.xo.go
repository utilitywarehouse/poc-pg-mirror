// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"

	"github.com/lib/pq"
)

// Pprate represents a row from 'equinox.pprates'.
type Pprate struct {
	Pprregion        sql.NullString  `json:"pprregion"`        // pprregion
	Pprmeter         sql.NullString  `json:"pprmeter"`         // pprmeter
	Pprvalidfrom     pq.NullTime     `json:"pprvalidfrom"`     // pprvalidfrom
	Pprvalidto       pq.NullTime     `json:"pprvalidto"`       // pprvalidto
	Pprstandingcharg sql.NullFloat64 `json:"pprstandingcharg"` // pprstandingcharg
	Pprppkwh1        sql.NullFloat64 `json:"pprppkwh1"`        // pprppkwh1
	Pprppkwh2        sql.NullFloat64 `json:"pprppkwh2"`        // pprppkwh2
	EquinoxLrn       int64           `json:"equinox_lrn"`      // equinox_lrn
	EquinoxSec       sql.NullInt64   `json:"equinox_sec"`      // equinox_sec
}

// PprateByEquinoxLrn retrieves a row from 'equinox.pprates' as a Pprate.
//
// Generated from index 'pprates_pkey'.
func PprateByEquinoxLrn(db XODB, equinoxLrn int64) (*Pprate, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`pprregion, pprmeter, pprvalidfrom, pprvalidto, pprstandingcharg, pprppkwh1, pprppkwh2, equinox_lrn, equinox_sec ` +
		`FROM equinox.pprates ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	p := Pprate{}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&p.Pprregion, &p.Pprmeter, &p.Pprvalidfrom, &p.Pprvalidto, &p.Pprstandingcharg, &p.Pprppkwh1, &p.Pprppkwh2, &p.EquinoxLrn, &p.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &p, nil
}
