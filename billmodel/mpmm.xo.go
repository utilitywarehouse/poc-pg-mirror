// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/lib/pq"
)

// Mpmm represents a row from 'equinox.mpmm'.
type Mpmm struct {
	Mpmmpancore  sql.NullString `json:"mpmmpancore"`  // mpmmpancore
	Mpmmeterid   sql.NullString `json:"mpmmeterid"`   // mpmmeterid
	Mpmpaydate   pq.NullTime    `json:"mpmpaydate"`   // mpmpaydate
	Mpmecoes1    sql.NullString `json:"mpmecoes1"`    // mpmecoes1
	Mpmecoes2    sql.NullString `json:"mpmecoes2"`    // mpmecoes2
	Mpmecoes3    sql.NullString `json:"mpmecoes3"`    // mpmecoes3
	Mpmactionreq sql.NullInt64  `json:"mpmactionreq"` // mpmactionreq
	Mpmresolved  pq.NullTime    `json:"mpmresolved"`  // mpmresolved
	Mpmfilename  sql.NullString `json:"mpmfilename"`  // mpmfilename
	EquinoxPrn   sql.NullInt64  `json:"equinox_prn"`  // equinox_prn
	EquinoxLrn   int64          `json:"equinox_lrn"`  // equinox_lrn
	EquinoxSec   sql.NullInt64  `json:"equinox_sec"`  // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Mpmm exists in the database.
func (m *Mpmm) Exists() bool {
	return m._exists
}

// Deleted provides information if the Mpmm has been deleted from the database.
func (m *Mpmm) Deleted() bool {
	return m._deleted
}

// Insert inserts the Mpmm to the database.
func (m *Mpmm) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if m._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.mpmm (` +
		`mpmmpancore, mpmmeterid, mpmpaydate, mpmecoes1, mpmecoes2, mpmecoes3, mpmactionreq, mpmresolved, mpmfilename, equinox_prn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, m.Mpmmpancore, m.Mpmmeterid, m.Mpmpaydate, m.Mpmecoes1, m.Mpmecoes2, m.Mpmecoes3, m.Mpmactionreq, m.Mpmresolved, m.Mpmfilename, m.EquinoxPrn, m.EquinoxSec)
	err = db.QueryRow(sqlstr, m.Mpmmpancore, m.Mpmmeterid, m.Mpmpaydate, m.Mpmecoes1, m.Mpmecoes2, m.Mpmecoes3, m.Mpmactionreq, m.Mpmresolved, m.Mpmfilename, m.EquinoxPrn, m.EquinoxSec).Scan(&m.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	m._exists = true

	return nil
}

// Update updates the Mpmm in the database.
func (m *Mpmm) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !m._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if m._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.mpmm SET (` +
		`mpmmpancore, mpmmeterid, mpmpaydate, mpmecoes1, mpmecoes2, mpmecoes3, mpmactionreq, mpmresolved, mpmfilename, equinox_prn, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11` +
		`) WHERE equinox_lrn = $12`

	// run query
	XOLog(sqlstr, m.Mpmmpancore, m.Mpmmeterid, m.Mpmpaydate, m.Mpmecoes1, m.Mpmecoes2, m.Mpmecoes3, m.Mpmactionreq, m.Mpmresolved, m.Mpmfilename, m.EquinoxPrn, m.EquinoxSec, m.EquinoxLrn)
	_, err = db.Exec(sqlstr, m.Mpmmpancore, m.Mpmmeterid, m.Mpmpaydate, m.Mpmecoes1, m.Mpmecoes2, m.Mpmecoes3, m.Mpmactionreq, m.Mpmresolved, m.Mpmfilename, m.EquinoxPrn, m.EquinoxSec, m.EquinoxLrn)
	return err
}

// Save saves the Mpmm to the database.
func (m *Mpmm) Save(db XODB) error {
	if m.Exists() {
		return m.Update(db)
	}

	return m.Insert(db)
}

// Upsert performs an upsert for Mpmm.
//
// NOTE: PostgreSQL 9.5+ only
func (m *Mpmm) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if m._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.mpmm (` +
		`mpmmpancore, mpmmeterid, mpmpaydate, mpmecoes1, mpmecoes2, mpmecoes3, mpmactionreq, mpmresolved, mpmfilename, equinox_prn, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`mpmmpancore, mpmmeterid, mpmpaydate, mpmecoes1, mpmecoes2, mpmecoes3, mpmactionreq, mpmresolved, mpmfilename, equinox_prn, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.mpmmpancore, EXCLUDED.mpmmeterid, EXCLUDED.mpmpaydate, EXCLUDED.mpmecoes1, EXCLUDED.mpmecoes2, EXCLUDED.mpmecoes3, EXCLUDED.mpmactionreq, EXCLUDED.mpmresolved, EXCLUDED.mpmfilename, EXCLUDED.equinox_prn, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, m.Mpmmpancore, m.Mpmmeterid, m.Mpmpaydate, m.Mpmecoes1, m.Mpmecoes2, m.Mpmecoes3, m.Mpmactionreq, m.Mpmresolved, m.Mpmfilename, m.EquinoxPrn, m.EquinoxLrn, m.EquinoxSec)
	_, err = db.Exec(sqlstr, m.Mpmmpancore, m.Mpmmeterid, m.Mpmpaydate, m.Mpmecoes1, m.Mpmecoes2, m.Mpmecoes3, m.Mpmactionreq, m.Mpmresolved, m.Mpmfilename, m.EquinoxPrn, m.EquinoxLrn, m.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	m._exists = true

	return nil
}

// Delete deletes the Mpmm from the database.
func (m *Mpmm) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !m._exists {
		return nil
	}

	// if deleted, bail
	if m._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.mpmm WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, m.EquinoxLrn)
	_, err = db.Exec(sqlstr, m.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	m._deleted = true

	return nil
}

// MpmmByEquinoxLrn retrieves a row from 'equinox.mpmm' as a Mpmm.
//
// Generated from index 'mpmm_pkey'.
func MpmmByEquinoxLrn(db XODB, equinoxLrn int64) (*Mpmm, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`mpmmpancore, mpmmeterid, mpmpaydate, mpmecoes1, mpmecoes2, mpmecoes3, mpmactionreq, mpmresolved, mpmfilename, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.mpmm ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	m := Mpmm{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&m.Mpmmpancore, &m.Mpmmeterid, &m.Mpmpaydate, &m.Mpmecoes1, &m.Mpmecoes2, &m.Mpmecoes3, &m.Mpmactionreq, &m.Mpmresolved, &m.Mpmfilename, &m.EquinoxPrn, &m.EquinoxLrn, &m.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &m, nil
}
