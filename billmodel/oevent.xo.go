// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/lib/pq"
)

// OEvent represents a row from 'equinox.o_events'.
type OEvent struct {
	OeEventID      sql.NullString `json:"oe_event_id"`      // oe_event_id
	OeVenueID      sql.NullString `json:"oe_venue_id"`      // oe_venue_id
	OeTrainerID    sql.NullString `json:"oe_trainer_id"`    // oe_trainer_id
	OeTrainer2ID   sql.NullString `json:"oe_trainer2_id"`   // oe_trainer2_id
	OeEventDate    pq.NullTime    `json:"oe_event_date"`    // oe_event_date
	OeStartTime    pq.NullTime    `json:"oe_start_time"`    // oe_start_time
	OeRegTime      pq.NullTime    `json:"oe_reg_time"`      // oe_reg_time
	OeCapacity     sql.NullInt64  `json:"oe_capacity"`      // oe_capacity
	OeBooked       sql.NullInt64  `json:"oe_booked"`        // oe_booked
	OeEventLevel   sql.NullString `json:"oe_event_level"`   // oe_event_level
	OeEventStatus  sql.NullString `json:"oe_event_status"`  // oe_event_status
	OeTabletsReq   sql.NullInt64  `json:"oe_tablets_req"`   // oe_tablets_req
	OeTabsToreturn sql.NullInt64  `json:"oe_tabs_toreturn"` // oe_tabs_toreturn
	OeTabsReturned sql.NullInt64  `json:"oe_tabs_returned"` // oe_tabs_returned
	OeTabsAccntfor sql.NullInt64  `json:"oe_tabs_accntfor"` // oe_tabs_accntfor
	OeStartpksReq  sql.NullInt64  `json:"oe_startpks_req"`  // oe_startpks_req
	OeStartpksDisp sql.NullInt64  `json:"oe_startpks_disp"` // oe_startpks_disp
	OeDuration     sql.NullInt64  `json:"oe_duration"`      // oe_duration
	EquinoxLrn     int64          `json:"equinox_lrn"`      // equinox_lrn
	EquinoxSec     sql.NullInt64  `json:"equinox_sec"`      // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the OEvent exists in the database.
func (oe *OEvent) Exists() bool {
	return oe._exists
}

// Deleted provides information if the OEvent has been deleted from the database.
func (oe *OEvent) Deleted() bool {
	return oe._deleted
}

// Insert inserts the OEvent to the database.
func (oe *OEvent) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if oe._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.o_events (` +
		`oe_event_id, oe_venue_id, oe_trainer_id, oe_trainer2_id, oe_event_date, oe_start_time, oe_reg_time, oe_capacity, oe_booked, oe_event_level, oe_event_status, oe_tablets_req, oe_tabs_toreturn, oe_tabs_returned, oe_tabs_accntfor, oe_startpks_req, oe_startpks_disp, oe_duration, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, oe.OeEventID, oe.OeVenueID, oe.OeTrainerID, oe.OeTrainer2ID, oe.OeEventDate, oe.OeStartTime, oe.OeRegTime, oe.OeCapacity, oe.OeBooked, oe.OeEventLevel, oe.OeEventStatus, oe.OeTabletsReq, oe.OeTabsToreturn, oe.OeTabsReturned, oe.OeTabsAccntfor, oe.OeStartpksReq, oe.OeStartpksDisp, oe.OeDuration, oe.EquinoxSec)
	err = db.QueryRow(sqlstr, oe.OeEventID, oe.OeVenueID, oe.OeTrainerID, oe.OeTrainer2ID, oe.OeEventDate, oe.OeStartTime, oe.OeRegTime, oe.OeCapacity, oe.OeBooked, oe.OeEventLevel, oe.OeEventStatus, oe.OeTabletsReq, oe.OeTabsToreturn, oe.OeTabsReturned, oe.OeTabsAccntfor, oe.OeStartpksReq, oe.OeStartpksDisp, oe.OeDuration, oe.EquinoxSec).Scan(&oe.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	oe._exists = true

	return nil
}

// Update updates the OEvent in the database.
func (oe *OEvent) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !oe._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if oe._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.o_events SET (` +
		`oe_event_id, oe_venue_id, oe_trainer_id, oe_trainer2_id, oe_event_date, oe_start_time, oe_reg_time, oe_capacity, oe_booked, oe_event_level, oe_event_status, oe_tablets_req, oe_tabs_toreturn, oe_tabs_returned, oe_tabs_accntfor, oe_startpks_req, oe_startpks_disp, oe_duration, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19` +
		`) WHERE equinox_lrn = $20`

	// run query
	XOLog(sqlstr, oe.OeEventID, oe.OeVenueID, oe.OeTrainerID, oe.OeTrainer2ID, oe.OeEventDate, oe.OeStartTime, oe.OeRegTime, oe.OeCapacity, oe.OeBooked, oe.OeEventLevel, oe.OeEventStatus, oe.OeTabletsReq, oe.OeTabsToreturn, oe.OeTabsReturned, oe.OeTabsAccntfor, oe.OeStartpksReq, oe.OeStartpksDisp, oe.OeDuration, oe.EquinoxSec, oe.EquinoxLrn)
	_, err = db.Exec(sqlstr, oe.OeEventID, oe.OeVenueID, oe.OeTrainerID, oe.OeTrainer2ID, oe.OeEventDate, oe.OeStartTime, oe.OeRegTime, oe.OeCapacity, oe.OeBooked, oe.OeEventLevel, oe.OeEventStatus, oe.OeTabletsReq, oe.OeTabsToreturn, oe.OeTabsReturned, oe.OeTabsAccntfor, oe.OeStartpksReq, oe.OeStartpksDisp, oe.OeDuration, oe.EquinoxSec, oe.EquinoxLrn)
	return err
}

// Save saves the OEvent to the database.
func (oe *OEvent) Save(db XODB) error {
	if oe.Exists() {
		return oe.Update(db)
	}

	return oe.Insert(db)
}

// Upsert performs an upsert for OEvent.
//
// NOTE: PostgreSQL 9.5+ only
func (oe *OEvent) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if oe._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.o_events (` +
		`oe_event_id, oe_venue_id, oe_trainer_id, oe_trainer2_id, oe_event_date, oe_start_time, oe_reg_time, oe_capacity, oe_booked, oe_event_level, oe_event_status, oe_tablets_req, oe_tabs_toreturn, oe_tabs_returned, oe_tabs_accntfor, oe_startpks_req, oe_startpks_disp, oe_duration, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`oe_event_id, oe_venue_id, oe_trainer_id, oe_trainer2_id, oe_event_date, oe_start_time, oe_reg_time, oe_capacity, oe_booked, oe_event_level, oe_event_status, oe_tablets_req, oe_tabs_toreturn, oe_tabs_returned, oe_tabs_accntfor, oe_startpks_req, oe_startpks_disp, oe_duration, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.oe_event_id, EXCLUDED.oe_venue_id, EXCLUDED.oe_trainer_id, EXCLUDED.oe_trainer2_id, EXCLUDED.oe_event_date, EXCLUDED.oe_start_time, EXCLUDED.oe_reg_time, EXCLUDED.oe_capacity, EXCLUDED.oe_booked, EXCLUDED.oe_event_level, EXCLUDED.oe_event_status, EXCLUDED.oe_tablets_req, EXCLUDED.oe_tabs_toreturn, EXCLUDED.oe_tabs_returned, EXCLUDED.oe_tabs_accntfor, EXCLUDED.oe_startpks_req, EXCLUDED.oe_startpks_disp, EXCLUDED.oe_duration, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, oe.OeEventID, oe.OeVenueID, oe.OeTrainerID, oe.OeTrainer2ID, oe.OeEventDate, oe.OeStartTime, oe.OeRegTime, oe.OeCapacity, oe.OeBooked, oe.OeEventLevel, oe.OeEventStatus, oe.OeTabletsReq, oe.OeTabsToreturn, oe.OeTabsReturned, oe.OeTabsAccntfor, oe.OeStartpksReq, oe.OeStartpksDisp, oe.OeDuration, oe.EquinoxLrn, oe.EquinoxSec)
	_, err = db.Exec(sqlstr, oe.OeEventID, oe.OeVenueID, oe.OeTrainerID, oe.OeTrainer2ID, oe.OeEventDate, oe.OeStartTime, oe.OeRegTime, oe.OeCapacity, oe.OeBooked, oe.OeEventLevel, oe.OeEventStatus, oe.OeTabletsReq, oe.OeTabsToreturn, oe.OeTabsReturned, oe.OeTabsAccntfor, oe.OeStartpksReq, oe.OeStartpksDisp, oe.OeDuration, oe.EquinoxLrn, oe.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	oe._exists = true

	return nil
}

// Delete deletes the OEvent from the database.
func (oe *OEvent) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !oe._exists {
		return nil
	}

	// if deleted, bail
	if oe._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.o_events WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, oe.EquinoxLrn)
	_, err = db.Exec(sqlstr, oe.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	oe._deleted = true

	return nil
}

// OEventByEquinoxLrn retrieves a row from 'equinox.o_events' as a OEvent.
//
// Generated from index 'o_events_pkey'.
func OEventByEquinoxLrn(db XODB, equinoxLrn int64) (*OEvent, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`oe_event_id, oe_venue_id, oe_trainer_id, oe_trainer2_id, oe_event_date, oe_start_time, oe_reg_time, oe_capacity, oe_booked, oe_event_level, oe_event_status, oe_tablets_req, oe_tabs_toreturn, oe_tabs_returned, oe_tabs_accntfor, oe_startpks_req, oe_startpks_disp, oe_duration, equinox_lrn, equinox_sec ` +
		`FROM equinox.o_events ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	oe := OEvent{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&oe.OeEventID, &oe.OeVenueID, &oe.OeTrainerID, &oe.OeTrainer2ID, &oe.OeEventDate, &oe.OeStartTime, &oe.OeRegTime, &oe.OeCapacity, &oe.OeBooked, &oe.OeEventLevel, &oe.OeEventStatus, &oe.OeTabletsReq, &oe.OeTabsToreturn, &oe.OeTabsReturned, &oe.OeTabsAccntfor, &oe.OeStartpksReq, &oe.OeStartpksDisp, &oe.OeDuration, &oe.EquinoxLrn, &oe.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &oe, nil
}
