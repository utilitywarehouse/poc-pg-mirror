// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// Stock represents a row from 'equinox.stock'.
type Stock struct {
	Stockcode        sql.NullString  `json:"stockcode"`        // stockcode
	Stockdesc        sql.NullString  `json:"stockdesc"`        // stockdesc
	Stocklevel       sql.NullInt64   `json:"stocklevel"`       // stocklevel
	Stockunitprice   sql.NullFloat64 `json:"stockunitprice"`   // stockunitprice
	Stockvatrate     sql.NullFloat64 `json:"stockvatrate"`     // stockvatrate
	Stockuplinecomm  sql.NullFloat64 `json:"stockuplinecomm"`  // stockuplinecomm
	Stockamount      sql.NullFloat64 `json:"stockamount"`      // stockamount
	Stockvatrate2    sql.NullFloat64 `json:"stockvatrate2"`    // stockvatrate2
	Stockamount2     sql.NullFloat64 `json:"stockamount2"`     // stockamount2
	Stockcriticallev sql.NullInt64   `json:"stockcriticallev"` // stockcriticallev
	EquinoxLrn       int64           `json:"equinox_lrn"`      // equinox_lrn
	EquinoxSec       sql.NullInt64   `json:"equinox_sec"`      // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Stock exists in the database.
func (s *Stock) Exists() bool {
	return s._exists
}

// Deleted provides information if the Stock has been deleted from the database.
func (s *Stock) Deleted() bool {
	return s._deleted
}

// Insert inserts the Stock to the database.
func (s *Stock) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if s._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.stock (` +
		`stockcode, stockdesc, stocklevel, stockunitprice, stockvatrate, stockuplinecomm, stockamount, stockvatrate2, stockamount2, stockcriticallev, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, s.Stockcode, s.Stockdesc, s.Stocklevel, s.Stockunitprice, s.Stockvatrate, s.Stockuplinecomm, s.Stockamount, s.Stockvatrate2, s.Stockamount2, s.Stockcriticallev, s.EquinoxSec)
	err = db.QueryRow(sqlstr, s.Stockcode, s.Stockdesc, s.Stocklevel, s.Stockunitprice, s.Stockvatrate, s.Stockuplinecomm, s.Stockamount, s.Stockvatrate2, s.Stockamount2, s.Stockcriticallev, s.EquinoxSec).Scan(&s.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	s._exists = true

	return nil
}

// Update updates the Stock in the database.
func (s *Stock) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !s._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if s._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.stock SET (` +
		`stockcode, stockdesc, stocklevel, stockunitprice, stockvatrate, stockuplinecomm, stockamount, stockvatrate2, stockamount2, stockcriticallev, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11` +
		`) WHERE equinox_lrn = $12`

	// run query
	XOLog(sqlstr, s.Stockcode, s.Stockdesc, s.Stocklevel, s.Stockunitprice, s.Stockvatrate, s.Stockuplinecomm, s.Stockamount, s.Stockvatrate2, s.Stockamount2, s.Stockcriticallev, s.EquinoxSec, s.EquinoxLrn)
	_, err = db.Exec(sqlstr, s.Stockcode, s.Stockdesc, s.Stocklevel, s.Stockunitprice, s.Stockvatrate, s.Stockuplinecomm, s.Stockamount, s.Stockvatrate2, s.Stockamount2, s.Stockcriticallev, s.EquinoxSec, s.EquinoxLrn)
	return err
}

// Save saves the Stock to the database.
func (s *Stock) Save(db XODB) error {
	if s.Exists() {
		return s.Update(db)
	}

	return s.Insert(db)
}

// Upsert performs an upsert for Stock.
//
// NOTE: PostgreSQL 9.5+ only
func (s *Stock) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if s._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.stock (` +
		`stockcode, stockdesc, stocklevel, stockunitprice, stockvatrate, stockuplinecomm, stockamount, stockvatrate2, stockamount2, stockcriticallev, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`stockcode, stockdesc, stocklevel, stockunitprice, stockvatrate, stockuplinecomm, stockamount, stockvatrate2, stockamount2, stockcriticallev, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.stockcode, EXCLUDED.stockdesc, EXCLUDED.stocklevel, EXCLUDED.stockunitprice, EXCLUDED.stockvatrate, EXCLUDED.stockuplinecomm, EXCLUDED.stockamount, EXCLUDED.stockvatrate2, EXCLUDED.stockamount2, EXCLUDED.stockcriticallev, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, s.Stockcode, s.Stockdesc, s.Stocklevel, s.Stockunitprice, s.Stockvatrate, s.Stockuplinecomm, s.Stockamount, s.Stockvatrate2, s.Stockamount2, s.Stockcriticallev, s.EquinoxLrn, s.EquinoxSec)
	_, err = db.Exec(sqlstr, s.Stockcode, s.Stockdesc, s.Stocklevel, s.Stockunitprice, s.Stockvatrate, s.Stockuplinecomm, s.Stockamount, s.Stockvatrate2, s.Stockamount2, s.Stockcriticallev, s.EquinoxLrn, s.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	s._exists = true

	return nil
}

// Delete deletes the Stock from the database.
func (s *Stock) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !s._exists {
		return nil
	}

	// if deleted, bail
	if s._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.stock WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, s.EquinoxLrn)
	_, err = db.Exec(sqlstr, s.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	s._deleted = true

	return nil
}

// StockByEquinoxLrn retrieves a row from 'equinox.stock' as a Stock.
//
// Generated from index 'stock_pkey'.
func StockByEquinoxLrn(db XODB, equinoxLrn int64) (*Stock, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`stockcode, stockdesc, stocklevel, stockunitprice, stockvatrate, stockuplinecomm, stockamount, stockvatrate2, stockamount2, stockcriticallev, equinox_lrn, equinox_sec ` +
		`FROM equinox.stock ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	s := Stock{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&s.Stockcode, &s.Stockdesc, &s.Stocklevel, &s.Stockunitprice, &s.Stockvatrate, &s.Stockuplinecomm, &s.Stockamount, &s.Stockvatrate2, &s.Stockamount2, &s.Stockcriticallev, &s.EquinoxLrn, &s.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &s, nil
}
