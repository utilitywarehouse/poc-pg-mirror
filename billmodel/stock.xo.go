// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import "database/sql"

// Stock represents a row from 'equinox.stock'.
type Stock struct {
	Stockcode        sql.NullString  `json:"stockcode"`        // stockcode
	Stockdesc        sql.NullString  `json:"stockdesc"`        // stockdesc
	Stocklevel       sql.NullInt64   `json:"stocklevel"`       // stocklevel
	Stockunitprice   sql.NullFloat64 `json:"stockunitprice"`   // stockunitprice
	Stockvatrate     sql.NullFloat64 `json:"stockvatrate"`     // stockvatrate
	Stockuplinecomm  sql.NullFloat64 `json:"stockuplinecomm"`  // stockuplinecomm
	Stockamount      sql.NullFloat64 `json:"stockamount"`      // stockamount
	Stockvatrate2    sql.NullFloat64 `json:"stockvatrate2"`    // stockvatrate2
	Stockamount2     sql.NullFloat64 `json:"stockamount2"`     // stockamount2
	Stockcriticallev sql.NullInt64   `json:"stockcriticallev"` // stockcriticallev
	EquinoxLrn       int64           `json:"equinox_lrn"`      // equinox_lrn
	EquinoxSec       sql.NullInt64   `json:"equinox_sec"`      // equinox_sec
}

func AllStock(db XODB, callback func(x Stock) bool) error {

	// sql query
	const sqlstr = `SELECT ` +
		`stockcode, stockdesc, stocklevel, stockunitprice, stockvatrate, stockuplinecomm, stockamount, stockvatrate2, stockamount2, stockcriticallev, equinox_lrn, equinox_sec ` +
		`FROM equinox.stock `

	q, err := db.Query(sqlstr)

	if err != nil {
		return err
	}
	defer q.Close()

	// load results
	for q.Next() {
		s := Stock{}

		// scan
		err = q.Scan(&s.Stockcode, &s.Stockdesc, &s.Stocklevel, &s.Stockunitprice, &s.Stockvatrate, &s.Stockuplinecomm, &s.Stockamount, &s.Stockvatrate2, &s.Stockamount2, &s.Stockcriticallev, &s.EquinoxLrn, &s.EquinoxSec)
		if err != nil {
			return err
		}
		if !callback(s) {
			return nil
		}
	}

	return nil
}

// StockByEquinoxLrn retrieves a row from 'equinox.stock' as a Stock.
//
// Generated from index 'stock_pkey'.
func StockByEquinoxLrn(db XODB, equinoxLrn int64) (*Stock, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`stockcode, stockdesc, stocklevel, stockunitprice, stockvatrate, stockuplinecomm, stockamount, stockvatrate2, stockamount2, stockcriticallev, equinox_lrn, equinox_sec ` +
		`FROM equinox.stock ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	s := Stock{}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&s.Stockcode, &s.Stockdesc, &s.Stocklevel, &s.Stockunitprice, &s.Stockvatrate, &s.Stockuplinecomm, &s.Stockamount, &s.Stockvatrate2, &s.Stockamount2, &s.Stockcriticallev, &s.EquinoxLrn, &s.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &s, nil
}
