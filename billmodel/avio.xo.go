// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// Avio represents a row from 'equinox.avios'.
type Avio struct {
	Avcustaccountno sql.NullString `json:"avcustaccountno"` // avcustaccountno
	Avaviosnumber   sql.NullString `json:"avaviosnumber"`   // avaviosnumber
	Avsurname       sql.NullString `json:"avsurname"`       // avsurname
	Avmtd           sql.NullInt64  `json:"avmtd"`           // avmtd
	Avytd           sql.NullInt64  `json:"avytd"`           // avytd
	Avservicelvl    sql.NullString `json:"avservicelvl"`    // avservicelvl
	Avsuspend       sql.NullInt64  `json:"avsuspend"`       // avsuspend
	Avsuspreason    sql.NullString `json:"avsuspreason"`    // avsuspreason
	EquinoxLrn      int64          `json:"equinox_lrn"`     // equinox_lrn
	EquinoxSec      sql.NullInt64  `json:"equinox_sec"`     // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Avio exists in the database.
func (a *Avio) Exists() bool {
	return a._exists
}

// Deleted provides information if the Avio has been deleted from the database.
func (a *Avio) Deleted() bool {
	return a._deleted
}

// Insert inserts the Avio to the database.
func (a *Avio) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if a._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.avios (` +
		`avcustaccountno, avaviosnumber, avsurname, avmtd, avytd, avservicelvl, avsuspend, avsuspreason, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, a.Avcustaccountno, a.Avaviosnumber, a.Avsurname, a.Avmtd, a.Avytd, a.Avservicelvl, a.Avsuspend, a.Avsuspreason, a.EquinoxSec)
	err = db.QueryRow(sqlstr, a.Avcustaccountno, a.Avaviosnumber, a.Avsurname, a.Avmtd, a.Avytd, a.Avservicelvl, a.Avsuspend, a.Avsuspreason, a.EquinoxSec).Scan(&a.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	a._exists = true

	return nil
}

// Update updates the Avio in the database.
func (a *Avio) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !a._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if a._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.avios SET (` +
		`avcustaccountno, avaviosnumber, avsurname, avmtd, avytd, avservicelvl, avsuspend, avsuspreason, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9` +
		`) WHERE equinox_lrn = $10`

	// run query
	XOLog(sqlstr, a.Avcustaccountno, a.Avaviosnumber, a.Avsurname, a.Avmtd, a.Avytd, a.Avservicelvl, a.Avsuspend, a.Avsuspreason, a.EquinoxSec, a.EquinoxLrn)
	_, err = db.Exec(sqlstr, a.Avcustaccountno, a.Avaviosnumber, a.Avsurname, a.Avmtd, a.Avytd, a.Avservicelvl, a.Avsuspend, a.Avsuspreason, a.EquinoxSec, a.EquinoxLrn)
	return err
}

// Save saves the Avio to the database.
func (a *Avio) Save(db XODB) error {
	if a.Exists() {
		return a.Update(db)
	}

	return a.Insert(db)
}

// Upsert performs an upsert for Avio.
//
// NOTE: PostgreSQL 9.5+ only
func (a *Avio) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if a._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.avios (` +
		`avcustaccountno, avaviosnumber, avsurname, avmtd, avytd, avservicelvl, avsuspend, avsuspreason, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`avcustaccountno, avaviosnumber, avsurname, avmtd, avytd, avservicelvl, avsuspend, avsuspreason, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.avcustaccountno, EXCLUDED.avaviosnumber, EXCLUDED.avsurname, EXCLUDED.avmtd, EXCLUDED.avytd, EXCLUDED.avservicelvl, EXCLUDED.avsuspend, EXCLUDED.avsuspreason, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, a.Avcustaccountno, a.Avaviosnumber, a.Avsurname, a.Avmtd, a.Avytd, a.Avservicelvl, a.Avsuspend, a.Avsuspreason, a.EquinoxLrn, a.EquinoxSec)
	_, err = db.Exec(sqlstr, a.Avcustaccountno, a.Avaviosnumber, a.Avsurname, a.Avmtd, a.Avytd, a.Avservicelvl, a.Avsuspend, a.Avsuspreason, a.EquinoxLrn, a.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	a._exists = true

	return nil
}

// Delete deletes the Avio from the database.
func (a *Avio) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !a._exists {
		return nil
	}

	// if deleted, bail
	if a._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.avios WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, a.EquinoxLrn)
	_, err = db.Exec(sqlstr, a.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	a._deleted = true

	return nil
}

// AvioByEquinoxLrn retrieves a row from 'equinox.avios' as a Avio.
//
// Generated from index 'avios_pkey'.
func AvioByEquinoxLrn(db XODB, equinoxLrn int64) (*Avio, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`avcustaccountno, avaviosnumber, avsurname, avmtd, avytd, avservicelvl, avsuspend, avsuspreason, equinox_lrn, equinox_sec ` +
		`FROM equinox.avios ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	a := Avio{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&a.Avcustaccountno, &a.Avaviosnumber, &a.Avsurname, &a.Avmtd, &a.Avytd, &a.Avservicelvl, &a.Avsuspend, &a.Avsuspreason, &a.EquinoxLrn, &a.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &a, nil
}
