// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/lib/pq"
)

// Gppread represents a row from 'equinox.gppreads'.
type Gppread struct {
	Gpprreading    sql.NullInt64  `json:"gpprreading"`    // gpprreading
	Gpprdate       pq.NullTime    `json:"gpprdate"`       // gpprdate
	Gpprtariff     sql.NullInt64  `json:"gpprtariff"`     // gpprtariff
	Gpprtariffdate pq.NullTime    `json:"gpprtariffdate"` // gpprtariffdate
	Gpprmsnmatch   sql.NullInt64  `json:"gpprmsnmatch"`   // gpprmsnmatch
	Gpprreg        sql.NullString `json:"gpprreg"`        // gpprreg
	EquinoxPrn     sql.NullInt64  `json:"equinox_prn"`    // equinox_prn
	EquinoxLrn     int64          `json:"equinox_lrn"`    // equinox_lrn
	EquinoxSec     sql.NullInt64  `json:"equinox_sec"`    // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Gppread exists in the database.
func (g *Gppread) Exists() bool {
	return g._exists
}

// Deleted provides information if the Gppread has been deleted from the database.
func (g *Gppread) Deleted() bool {
	return g._deleted
}

// Insert inserts the Gppread to the database.
func (g *Gppread) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if g._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.gppreads (` +
		`gpprreading, gpprdate, gpprtariff, gpprtariffdate, gpprmsnmatch, gpprreg, equinox_prn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, g.Gpprreading, g.Gpprdate, g.Gpprtariff, g.Gpprtariffdate, g.Gpprmsnmatch, g.Gpprreg, g.EquinoxPrn, g.EquinoxSec)
	err = db.QueryRow(sqlstr, g.Gpprreading, g.Gpprdate, g.Gpprtariff, g.Gpprtariffdate, g.Gpprmsnmatch, g.Gpprreg, g.EquinoxPrn, g.EquinoxSec).Scan(&g.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	g._exists = true

	return nil
}

// Update updates the Gppread in the database.
func (g *Gppread) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !g._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if g._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.gppreads SET (` +
		`gpprreading, gpprdate, gpprtariff, gpprtariffdate, gpprmsnmatch, gpprreg, equinox_prn, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`) WHERE equinox_lrn = $9`

	// run query
	XOLog(sqlstr, g.Gpprreading, g.Gpprdate, g.Gpprtariff, g.Gpprtariffdate, g.Gpprmsnmatch, g.Gpprreg, g.EquinoxPrn, g.EquinoxSec, g.EquinoxLrn)
	_, err = db.Exec(sqlstr, g.Gpprreading, g.Gpprdate, g.Gpprtariff, g.Gpprtariffdate, g.Gpprmsnmatch, g.Gpprreg, g.EquinoxPrn, g.EquinoxSec, g.EquinoxLrn)
	return err
}

// Save saves the Gppread to the database.
func (g *Gppread) Save(db XODB) error {
	if g.Exists() {
		return g.Update(db)
	}

	return g.Insert(db)
}

// Upsert performs an upsert for Gppread.
//
// NOTE: PostgreSQL 9.5+ only
func (g *Gppread) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if g._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.gppreads (` +
		`gpprreading, gpprdate, gpprtariff, gpprtariffdate, gpprmsnmatch, gpprreg, equinox_prn, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`gpprreading, gpprdate, gpprtariff, gpprtariffdate, gpprmsnmatch, gpprreg, equinox_prn, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.gpprreading, EXCLUDED.gpprdate, EXCLUDED.gpprtariff, EXCLUDED.gpprtariffdate, EXCLUDED.gpprmsnmatch, EXCLUDED.gpprreg, EXCLUDED.equinox_prn, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, g.Gpprreading, g.Gpprdate, g.Gpprtariff, g.Gpprtariffdate, g.Gpprmsnmatch, g.Gpprreg, g.EquinoxPrn, g.EquinoxLrn, g.EquinoxSec)
	_, err = db.Exec(sqlstr, g.Gpprreading, g.Gpprdate, g.Gpprtariff, g.Gpprtariffdate, g.Gpprmsnmatch, g.Gpprreg, g.EquinoxPrn, g.EquinoxLrn, g.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	g._exists = true

	return nil
}

// Delete deletes the Gppread from the database.
func (g *Gppread) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !g._exists {
		return nil
	}

	// if deleted, bail
	if g._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.gppreads WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, g.EquinoxLrn)
	_, err = db.Exec(sqlstr, g.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	g._deleted = true

	return nil
}

// GppreadByEquinoxLrn retrieves a row from 'equinox.gppreads' as a Gppread.
//
// Generated from index 'gppreads_pkey'.
func GppreadByEquinoxLrn(db XODB, equinoxLrn int64) (*Gppread, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`gpprreading, gpprdate, gpprtariff, gpprtariffdate, gpprmsnmatch, gpprreg, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.gppreads ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	g := Gppread{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&g.Gpprreading, &g.Gpprdate, &g.Gpprtariff, &g.Gpprtariffdate, &g.Gpprmsnmatch, &g.Gpprreg, &g.EquinoxPrn, &g.EquinoxLrn, &g.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &g, nil
}
