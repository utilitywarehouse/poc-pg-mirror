// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"

	"github.com/lib/pq"
)

// Gppread represents a row from 'equinox.gppreads'.
type Gppread struct {
	Gpprreading    sql.NullInt64  `json:"gpprreading"`    // gpprreading
	Gpprdate       pq.NullTime    `json:"gpprdate"`       // gpprdate
	Gpprtariff     sql.NullInt64  `json:"gpprtariff"`     // gpprtariff
	Gpprtariffdate pq.NullTime    `json:"gpprtariffdate"` // gpprtariffdate
	Gpprmsnmatch   sql.NullInt64  `json:"gpprmsnmatch"`   // gpprmsnmatch
	Gpprreg        sql.NullString `json:"gpprreg"`        // gpprreg
	EquinoxPrn     sql.NullInt64  `json:"equinox_prn"`    // equinox_prn
	EquinoxLrn     int64          `json:"equinox_lrn"`    // equinox_lrn
	EquinoxSec     sql.NullInt64  `json:"equinox_sec"`    // equinox_sec
}

// GppreadByEquinoxLrn retrieves a row from 'equinox.gppreads' as a Gppread.
//
// Generated from index 'gppreads_pkey'.
func GppreadByEquinoxLrn(db XODB, equinoxLrn int64) (*Gppread, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`gpprreading, gpprdate, gpprtariff, gpprtariffdate, gpprmsnmatch, gpprreg, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.gppreads ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	g := Gppread{}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&g.Gpprreading, &g.Gpprdate, &g.Gpprtariff, &g.Gpprtariffdate, &g.Gpprmsnmatch, &g.Gpprreg, &g.EquinoxPrn, &g.EquinoxLrn, &g.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &g, nil
}
