// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// Aclperm represents a row from 'equinox.aclperms'.
type Aclperm struct {
	Aclpuserid  sql.NullString  `json:"aclpuserid"`  // aclpuserid
	Acloptions  sql.NullString  `json:"acloptions"`  // acloptions
	Aclpsparec1 sql.NullString  `json:"aclpsparec1"` // aclpsparec1
	Aclpsparec2 sql.NullString  `json:"aclpsparec2"` // aclpsparec2
	Aclpsparen1 sql.NullFloat64 `json:"aclpsparen1"` // aclpsparen1
	Aclpsparen2 sql.NullInt64   `json:"aclpsparen2"` // aclpsparen2
	EquinoxPrn  sql.NullInt64   `json:"equinox_prn"` // equinox_prn
	EquinoxLrn  int64           `json:"equinox_lrn"` // equinox_lrn
	EquinoxSec  sql.NullInt64   `json:"equinox_sec"` // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Aclperm exists in the database.
func (a *Aclperm) Exists() bool {
	return a._exists
}

// Deleted provides information if the Aclperm has been deleted from the database.
func (a *Aclperm) Deleted() bool {
	return a._deleted
}

// Insert inserts the Aclperm to the database.
func (a *Aclperm) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if a._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.aclperms (` +
		`aclpuserid, acloptions, aclpsparec1, aclpsparec2, aclpsparen1, aclpsparen2, equinox_prn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, a.Aclpuserid, a.Acloptions, a.Aclpsparec1, a.Aclpsparec2, a.Aclpsparen1, a.Aclpsparen2, a.EquinoxPrn, a.EquinoxSec)
	err = db.QueryRow(sqlstr, a.Aclpuserid, a.Acloptions, a.Aclpsparec1, a.Aclpsparec2, a.Aclpsparen1, a.Aclpsparen2, a.EquinoxPrn, a.EquinoxSec).Scan(&a.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	a._exists = true

	return nil
}

// Update updates the Aclperm in the database.
func (a *Aclperm) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !a._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if a._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.aclperms SET (` +
		`aclpuserid, acloptions, aclpsparec1, aclpsparec2, aclpsparen1, aclpsparen2, equinox_prn, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`) WHERE equinox_lrn = $9`

	// run query
	XOLog(sqlstr, a.Aclpuserid, a.Acloptions, a.Aclpsparec1, a.Aclpsparec2, a.Aclpsparen1, a.Aclpsparen2, a.EquinoxPrn, a.EquinoxSec, a.EquinoxLrn)
	_, err = db.Exec(sqlstr, a.Aclpuserid, a.Acloptions, a.Aclpsparec1, a.Aclpsparec2, a.Aclpsparen1, a.Aclpsparen2, a.EquinoxPrn, a.EquinoxSec, a.EquinoxLrn)
	return err
}

// Save saves the Aclperm to the database.
func (a *Aclperm) Save(db XODB) error {
	if a.Exists() {
		return a.Update(db)
	}

	return a.Insert(db)
}

// Upsert performs an upsert for Aclperm.
//
// NOTE: PostgreSQL 9.5+ only
func (a *Aclperm) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if a._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.aclperms (` +
		`aclpuserid, acloptions, aclpsparec1, aclpsparec2, aclpsparen1, aclpsparen2, equinox_prn, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`aclpuserid, acloptions, aclpsparec1, aclpsparec2, aclpsparen1, aclpsparen2, equinox_prn, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.aclpuserid, EXCLUDED.acloptions, EXCLUDED.aclpsparec1, EXCLUDED.aclpsparec2, EXCLUDED.aclpsparen1, EXCLUDED.aclpsparen2, EXCLUDED.equinox_prn, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, a.Aclpuserid, a.Acloptions, a.Aclpsparec1, a.Aclpsparec2, a.Aclpsparen1, a.Aclpsparen2, a.EquinoxPrn, a.EquinoxLrn, a.EquinoxSec)
	_, err = db.Exec(sqlstr, a.Aclpuserid, a.Acloptions, a.Aclpsparec1, a.Aclpsparec2, a.Aclpsparen1, a.Aclpsparen2, a.EquinoxPrn, a.EquinoxLrn, a.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	a._exists = true

	return nil
}

// Delete deletes the Aclperm from the database.
func (a *Aclperm) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !a._exists {
		return nil
	}

	// if deleted, bail
	if a._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.aclperms WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, a.EquinoxLrn)
	_, err = db.Exec(sqlstr, a.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	a._deleted = true

	return nil
}

// AclpermByEquinoxLrn retrieves a row from 'equinox.aclperms' as a Aclperm.
//
// Generated from index 'aclperms_pkey'.
func AclpermByEquinoxLrn(db XODB, equinoxLrn int64) (*Aclperm, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`aclpuserid, acloptions, aclpsparec1, aclpsparec2, aclpsparen1, aclpsparen2, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.aclperms ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	a := Aclperm{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&a.Aclpuserid, &a.Acloptions, &a.Aclpsparec1, &a.Aclpsparec2, &a.Aclpsparen1, &a.Aclpsparen2, &a.EquinoxPrn, &a.EquinoxLrn, &a.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &a, nil
}
