// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/lib/pq"
)

// Gason represents a row from 'equinox.gason'.
type Gason struct {
	Gonmpr         sql.NullString `json:"gonmpr"`         // gonmpr
	Gonmprlocc     sql.NullString `json:"gonmprlocc"`     // gonmprlocc
	Gonmprlocw     sql.NullString `json:"gonmprlocw"`     // gonmprlocw
	Gonmprlocnotes sql.NullInt64  `json:"gonmprlocnotes"` // gonmprlocnotes
	Gonmpraccess   sql.NullInt64  `json:"gonmpraccess"`   // gonmpraccess
	Gonc1          sql.NullString `json:"gonc1"`          // gonc1
	Gonc2          sql.NullString `json:"gonc2"`          // gonc2
	Gonc3          sql.NullString `json:"gonc3"`          // gonc3
	Gonn1          sql.NullInt64  `json:"gonn1"`          // gonn1
	Gonn2          sql.NullInt64  `json:"gonn2"`          // gonn2
	Gonn3          sql.NullInt64  `json:"gonn3"`          // gonn3
	Gond1          pq.NullTime    `json:"gond1"`          // gond1
	Gond2          pq.NullTime    `json:"gond2"`          // gond2
	Gond3          pq.NullTime    `json:"gond3"`          // gond3
	EquinoxLrn     int64          `json:"equinox_lrn"`    // equinox_lrn
	EquinoxSec     sql.NullInt64  `json:"equinox_sec"`    // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Gason exists in the database.
func (g *Gason) Exists() bool {
	return g._exists
}

// Deleted provides information if the Gason has been deleted from the database.
func (g *Gason) Deleted() bool {
	return g._deleted
}

// Insert inserts the Gason to the database.
func (g *Gason) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if g._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.gason (` +
		`gonmpr, gonmprlocc, gonmprlocw, gonmprlocnotes, gonmpraccess, gonc1, gonc2, gonc3, gonn1, gonn2, gonn3, gond1, gond2, gond3, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, g.Gonmpr, g.Gonmprlocc, g.Gonmprlocw, g.Gonmprlocnotes, g.Gonmpraccess, g.Gonc1, g.Gonc2, g.Gonc3, g.Gonn1, g.Gonn2, g.Gonn3, g.Gond1, g.Gond2, g.Gond3, g.EquinoxSec)
	err = db.QueryRow(sqlstr, g.Gonmpr, g.Gonmprlocc, g.Gonmprlocw, g.Gonmprlocnotes, g.Gonmpraccess, g.Gonc1, g.Gonc2, g.Gonc3, g.Gonn1, g.Gonn2, g.Gonn3, g.Gond1, g.Gond2, g.Gond3, g.EquinoxSec).Scan(&g.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	g._exists = true

	return nil
}

// Update updates the Gason in the database.
func (g *Gason) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !g._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if g._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.gason SET (` +
		`gonmpr, gonmprlocc, gonmprlocw, gonmprlocnotes, gonmpraccess, gonc1, gonc2, gonc3, gonn1, gonn2, gonn3, gond1, gond2, gond3, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15` +
		`) WHERE equinox_lrn = $16`

	// run query
	XOLog(sqlstr, g.Gonmpr, g.Gonmprlocc, g.Gonmprlocw, g.Gonmprlocnotes, g.Gonmpraccess, g.Gonc1, g.Gonc2, g.Gonc3, g.Gonn1, g.Gonn2, g.Gonn3, g.Gond1, g.Gond2, g.Gond3, g.EquinoxSec, g.EquinoxLrn)
	_, err = db.Exec(sqlstr, g.Gonmpr, g.Gonmprlocc, g.Gonmprlocw, g.Gonmprlocnotes, g.Gonmpraccess, g.Gonc1, g.Gonc2, g.Gonc3, g.Gonn1, g.Gonn2, g.Gonn3, g.Gond1, g.Gond2, g.Gond3, g.EquinoxSec, g.EquinoxLrn)
	return err
}

// Save saves the Gason to the database.
func (g *Gason) Save(db XODB) error {
	if g.Exists() {
		return g.Update(db)
	}

	return g.Insert(db)
}

// Upsert performs an upsert for Gason.
//
// NOTE: PostgreSQL 9.5+ only
func (g *Gason) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if g._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.gason (` +
		`gonmpr, gonmprlocc, gonmprlocw, gonmprlocnotes, gonmpraccess, gonc1, gonc2, gonc3, gonn1, gonn2, gonn3, gond1, gond2, gond3, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`gonmpr, gonmprlocc, gonmprlocw, gonmprlocnotes, gonmpraccess, gonc1, gonc2, gonc3, gonn1, gonn2, gonn3, gond1, gond2, gond3, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.gonmpr, EXCLUDED.gonmprlocc, EXCLUDED.gonmprlocw, EXCLUDED.gonmprlocnotes, EXCLUDED.gonmpraccess, EXCLUDED.gonc1, EXCLUDED.gonc2, EXCLUDED.gonc3, EXCLUDED.gonn1, EXCLUDED.gonn2, EXCLUDED.gonn3, EXCLUDED.gond1, EXCLUDED.gond2, EXCLUDED.gond3, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, g.Gonmpr, g.Gonmprlocc, g.Gonmprlocw, g.Gonmprlocnotes, g.Gonmpraccess, g.Gonc1, g.Gonc2, g.Gonc3, g.Gonn1, g.Gonn2, g.Gonn3, g.Gond1, g.Gond2, g.Gond3, g.EquinoxLrn, g.EquinoxSec)
	_, err = db.Exec(sqlstr, g.Gonmpr, g.Gonmprlocc, g.Gonmprlocw, g.Gonmprlocnotes, g.Gonmpraccess, g.Gonc1, g.Gonc2, g.Gonc3, g.Gonn1, g.Gonn2, g.Gonn3, g.Gond1, g.Gond2, g.Gond3, g.EquinoxLrn, g.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	g._exists = true

	return nil
}

// Delete deletes the Gason from the database.
func (g *Gason) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !g._exists {
		return nil
	}

	// if deleted, bail
	if g._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.gason WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, g.EquinoxLrn)
	_, err = db.Exec(sqlstr, g.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	g._deleted = true

	return nil
}

// GasonByEquinoxLrn retrieves a row from 'equinox.gason' as a Gason.
//
// Generated from index 'gason_pkey'.
func GasonByEquinoxLrn(db XODB, equinoxLrn int64) (*Gason, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`gonmpr, gonmprlocc, gonmprlocw, gonmprlocnotes, gonmpraccess, gonc1, gonc2, gonc3, gonn1, gonn2, gonn3, gond1, gond2, gond3, equinox_lrn, equinox_sec ` +
		`FROM equinox.gason ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	g := Gason{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&g.Gonmpr, &g.Gonmprlocc, &g.Gonmprlocw, &g.Gonmprlocnotes, &g.Gonmpraccess, &g.Gonc1, &g.Gonc2, &g.Gonc3, &g.Gonn1, &g.Gonn2, &g.Gonn3, &g.Gond1, &g.Gond2, &g.Gond3, &g.EquinoxLrn, &g.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &g, nil
}
