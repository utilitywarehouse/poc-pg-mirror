// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"

	"github.com/lib/pq"
)

// Campaign represents a row from 'equinox.campaign'.
type Campaign struct {
	CampCode        sql.NullString `json:"camp_code"`        // camp_code
	CampDescription sql.NullString `json:"camp_description"` // camp_description
	CampStart       pq.NullTime    `json:"camp_start"`       // camp_start
	CampClose       pq.NullTime    `json:"camp_close"`       // camp_close
	CampVolumeSent  sql.NullInt64  `json:"camp_volume_sent"` // camp_volume_sent
	CampResponses   sql.NullInt64  `json:"camp_responses"`   // camp_responses
	CampOrders      sql.NullInt64  `json:"camp_orders"`      // camp_orders
	CampNotes       sql.NullInt64  `json:"camp_notes"`       // camp_notes
	CampRmoption    sql.NullString `json:"camp_rmoption"`    // camp_rmoption
	CampRmduration  sql.NullInt64  `json:"camp_rmduration"`  // camp_rmduration
	CampType        sql.NullInt64  `json:"camp_type"`        // camp_type
	CampCliservlvl  sql.NullString `json:"camp_cliservlvl"`  // camp_cliservlvl
	CampSpareC2     sql.NullString `json:"camp_spare_c2"`    // camp_spare_c2
	CampSpareN1     sql.NullInt64  `json:"camp_spare_n1"`    // camp_spare_n1
	CampSpareN2     sql.NullInt64  `json:"camp_spare_n2"`    // camp_spare_n2
	CampSpareD1     pq.NullTime    `json:"camp_spare_d1"`    // camp_spare_d1
	CampSpareD2     pq.NullTime    `json:"camp_spare_d2"`    // camp_spare_d2
	EquinoxLrn      int64          `json:"equinox_lrn"`      // equinox_lrn
	EquinoxSec      sql.NullInt64  `json:"equinox_sec"`      // equinox_sec
}

func AllCampaign(db XODB, callback func(x Campaign) bool) error {

	// sql query
	const sqlstr = `SELECT ` +
		`camp_code, camp_description, camp_start, camp_close, camp_volume_sent, camp_responses, camp_orders, camp_notes, camp_rmoption, camp_rmduration, camp_type, camp_cliservlvl, camp_spare_c2, camp_spare_n1, camp_spare_n2, camp_spare_d1, camp_spare_d2, equinox_lrn, equinox_sec ` +
		`FROM equinox.campaign `

	q, err := db.Query(sqlstr)

	if err != nil {
		return err
	}
	defer q.Close()

	// load results
	for q.Next() {
		c := Campaign{}

		// scan
		err = q.Scan(&c.CampCode, &c.CampDescription, &c.CampStart, &c.CampClose, &c.CampVolumeSent, &c.CampResponses, &c.CampOrders, &c.CampNotes, &c.CampRmoption, &c.CampRmduration, &c.CampType, &c.CampCliservlvl, &c.CampSpareC2, &c.CampSpareN1, &c.CampSpareN2, &c.CampSpareD1, &c.CampSpareD2, &c.EquinoxLrn, &c.EquinoxSec)
		if err != nil {
			return err
		}
		if !callback(c) {
			return nil
		}
	}

	return nil
}

// CampaignByEquinoxLrn retrieves a row from 'equinox.campaign' as a Campaign.
//
// Generated from index 'campaign_pkey'.
func CampaignByEquinoxLrn(db XODB, equinoxLrn int64) (*Campaign, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`camp_code, camp_description, camp_start, camp_close, camp_volume_sent, camp_responses, camp_orders, camp_notes, camp_rmoption, camp_rmduration, camp_type, camp_cliservlvl, camp_spare_c2, camp_spare_n1, camp_spare_n2, camp_spare_d1, camp_spare_d2, equinox_lrn, equinox_sec ` +
		`FROM equinox.campaign ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	c := Campaign{}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&c.CampCode, &c.CampDescription, &c.CampStart, &c.CampClose, &c.CampVolumeSent, &c.CampResponses, &c.CampOrders, &c.CampNotes, &c.CampRmoption, &c.CampRmduration, &c.CampType, &c.CampCliservlvl, &c.CampSpareC2, &c.CampSpareN1, &c.CampSpareN2, &c.CampSpareD1, &c.CampSpareD2, &c.EquinoxLrn, &c.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &c, nil
}
