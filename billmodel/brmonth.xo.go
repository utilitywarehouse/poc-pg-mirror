// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/lib/pq"
)

// Brmonth represents a row from 'equinox.brmonth'.
type Brmonth struct {
	Brmcode      sql.NullString  `json:"brmcode"`      // brmcode
	Brmmonth     sql.NullString  `json:"brmmonth"`     // brmmonth
	Brmdate      pq.NullTime     `json:"brmdate"`      // brmdate
	Brmmonthlyid sql.NullString  `json:"brmmonthlyid"` // brmmonthlyid
	Brmqty       sql.NullFloat64 `json:"brmqty"`       // brmqty
	Brmamount    sql.NullFloat64 `json:"brmamount"`    // brmamount
	Brmvat       sql.NullFloat64 `json:"brmvat"`       // brmvat
	Brmvat2      sql.NullFloat64 `json:"brmvat2"`      // brmvat2
	Brmnet       sql.NullFloat64 `json:"brmnet"`       // brmnet
	Brmcredit    sql.NullFloat64 `json:"brmcredit"`    // brmcredit
	Brmcreditvat sql.NullFloat64 `json:"brmcreditvat"` // brmcreditvat
	Brmcreditnet sql.NullFloat64 `json:"brmcreditnet"` // brmcreditnet
	EquinoxPrn   sql.NullInt64   `json:"equinox_prn"`  // equinox_prn
	EquinoxLrn   int64           `json:"equinox_lrn"`  // equinox_lrn
	EquinoxSec   sql.NullInt64   `json:"equinox_sec"`  // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Brmonth exists in the database.
func (b *Brmonth) Exists() bool {
	return b._exists
}

// Deleted provides information if the Brmonth has been deleted from the database.
func (b *Brmonth) Deleted() bool {
	return b._deleted
}

// Insert inserts the Brmonth to the database.
func (b *Brmonth) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if b._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.brmonth (` +
		`brmcode, brmmonth, brmdate, brmmonthlyid, brmqty, brmamount, brmvat, brmvat2, brmnet, brmcredit, brmcreditvat, brmcreditnet, equinox_prn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, b.Brmcode, b.Brmmonth, b.Brmdate, b.Brmmonthlyid, b.Brmqty, b.Brmamount, b.Brmvat, b.Brmvat2, b.Brmnet, b.Brmcredit, b.Brmcreditvat, b.Brmcreditnet, b.EquinoxPrn, b.EquinoxSec)
	err = db.QueryRow(sqlstr, b.Brmcode, b.Brmmonth, b.Brmdate, b.Brmmonthlyid, b.Brmqty, b.Brmamount, b.Brmvat, b.Brmvat2, b.Brmnet, b.Brmcredit, b.Brmcreditvat, b.Brmcreditnet, b.EquinoxPrn, b.EquinoxSec).Scan(&b.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	b._exists = true

	return nil
}

// Update updates the Brmonth in the database.
func (b *Brmonth) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !b._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if b._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.brmonth SET (` +
		`brmcode, brmmonth, brmdate, brmmonthlyid, brmqty, brmamount, brmvat, brmvat2, brmnet, brmcredit, brmcreditvat, brmcreditnet, equinox_prn, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14` +
		`) WHERE equinox_lrn = $15`

	// run query
	XOLog(sqlstr, b.Brmcode, b.Brmmonth, b.Brmdate, b.Brmmonthlyid, b.Brmqty, b.Brmamount, b.Brmvat, b.Brmvat2, b.Brmnet, b.Brmcredit, b.Brmcreditvat, b.Brmcreditnet, b.EquinoxPrn, b.EquinoxSec, b.EquinoxLrn)
	_, err = db.Exec(sqlstr, b.Brmcode, b.Brmmonth, b.Brmdate, b.Brmmonthlyid, b.Brmqty, b.Brmamount, b.Brmvat, b.Brmvat2, b.Brmnet, b.Brmcredit, b.Brmcreditvat, b.Brmcreditnet, b.EquinoxPrn, b.EquinoxSec, b.EquinoxLrn)
	return err
}

// Save saves the Brmonth to the database.
func (b *Brmonth) Save(db XODB) error {
	if b.Exists() {
		return b.Update(db)
	}

	return b.Insert(db)
}

// Upsert performs an upsert for Brmonth.
//
// NOTE: PostgreSQL 9.5+ only
func (b *Brmonth) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if b._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.brmonth (` +
		`brmcode, brmmonth, brmdate, brmmonthlyid, brmqty, brmamount, brmvat, brmvat2, brmnet, brmcredit, brmcreditvat, brmcreditnet, equinox_prn, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`brmcode, brmmonth, brmdate, brmmonthlyid, brmqty, brmamount, brmvat, brmvat2, brmnet, brmcredit, brmcreditvat, brmcreditnet, equinox_prn, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.brmcode, EXCLUDED.brmmonth, EXCLUDED.brmdate, EXCLUDED.brmmonthlyid, EXCLUDED.brmqty, EXCLUDED.brmamount, EXCLUDED.brmvat, EXCLUDED.brmvat2, EXCLUDED.brmnet, EXCLUDED.brmcredit, EXCLUDED.brmcreditvat, EXCLUDED.brmcreditnet, EXCLUDED.equinox_prn, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, b.Brmcode, b.Brmmonth, b.Brmdate, b.Brmmonthlyid, b.Brmqty, b.Brmamount, b.Brmvat, b.Brmvat2, b.Brmnet, b.Brmcredit, b.Brmcreditvat, b.Brmcreditnet, b.EquinoxPrn, b.EquinoxLrn, b.EquinoxSec)
	_, err = db.Exec(sqlstr, b.Brmcode, b.Brmmonth, b.Brmdate, b.Brmmonthlyid, b.Brmqty, b.Brmamount, b.Brmvat, b.Brmvat2, b.Brmnet, b.Brmcredit, b.Brmcreditvat, b.Brmcreditnet, b.EquinoxPrn, b.EquinoxLrn, b.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	b._exists = true

	return nil
}

// Delete deletes the Brmonth from the database.
func (b *Brmonth) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !b._exists {
		return nil
	}

	// if deleted, bail
	if b._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.brmonth WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, b.EquinoxLrn)
	_, err = db.Exec(sqlstr, b.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	b._deleted = true

	return nil
}

// BrmonthByEquinoxLrn retrieves a row from 'equinox.brmonth' as a Brmonth.
//
// Generated from index 'brmonth_pkey'.
func BrmonthByEquinoxLrn(db XODB, equinoxLrn int64) (*Brmonth, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`brmcode, brmmonth, brmdate, brmmonthlyid, brmqty, brmamount, brmvat, brmvat2, brmnet, brmcredit, brmcreditvat, brmcreditnet, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.brmonth ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	b := Brmonth{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&b.Brmcode, &b.Brmmonth, &b.Brmdate, &b.Brmmonthlyid, &b.Brmqty, &b.Brmamount, &b.Brmvat, &b.Brmvat2, &b.Brmnet, &b.Brmcredit, &b.Brmcreditvat, &b.Brmcreditnet, &b.EquinoxPrn, &b.EquinoxLrn, &b.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &b, nil
}
