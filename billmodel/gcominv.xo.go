// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/lib/pq"
)

// Gcominv represents a row from 'equinox.gcominv'.
type Gcominv struct {
	Gcominvid     sql.NullFloat64 `json:"gcominvid"`     // gcominvid
	Gcominvdate   pq.NullTime     `json:"gcominvdate"`   // gcominvdate
	Gcominvtotal  sql.NullFloat64 `json:"gcominvtotal"`  // gcominvtotal
	Gcominvnet    sql.NullFloat64 `json:"gcominvnet"`    // gcominvnet
	Gcominvvat    sql.NullFloat64 `json:"gcominvvat"`    // gcominvvat
	Gcominvbilled sql.NullInt64   `json:"gcominvbilled"` // gcominvbilled
	EquinoxPrn    sql.NullInt64   `json:"equinox_prn"`   // equinox_prn
	EquinoxLrn    int64           `json:"equinox_lrn"`   // equinox_lrn
	EquinoxSec    sql.NullInt64   `json:"equinox_sec"`   // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Gcominv exists in the database.
func (g *Gcominv) Exists() bool {
	return g._exists
}

// Deleted provides information if the Gcominv has been deleted from the database.
func (g *Gcominv) Deleted() bool {
	return g._deleted
}

// Insert inserts the Gcominv to the database.
func (g *Gcominv) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if g._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.gcominv (` +
		`gcominvid, gcominvdate, gcominvtotal, gcominvnet, gcominvvat, gcominvbilled, equinox_prn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, g.Gcominvid, g.Gcominvdate, g.Gcominvtotal, g.Gcominvnet, g.Gcominvvat, g.Gcominvbilled, g.EquinoxPrn, g.EquinoxSec)
	err = db.QueryRow(sqlstr, g.Gcominvid, g.Gcominvdate, g.Gcominvtotal, g.Gcominvnet, g.Gcominvvat, g.Gcominvbilled, g.EquinoxPrn, g.EquinoxSec).Scan(&g.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	g._exists = true

	return nil
}

// Update updates the Gcominv in the database.
func (g *Gcominv) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !g._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if g._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.gcominv SET (` +
		`gcominvid, gcominvdate, gcominvtotal, gcominvnet, gcominvvat, gcominvbilled, equinox_prn, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`) WHERE equinox_lrn = $9`

	// run query
	XOLog(sqlstr, g.Gcominvid, g.Gcominvdate, g.Gcominvtotal, g.Gcominvnet, g.Gcominvvat, g.Gcominvbilled, g.EquinoxPrn, g.EquinoxSec, g.EquinoxLrn)
	_, err = db.Exec(sqlstr, g.Gcominvid, g.Gcominvdate, g.Gcominvtotal, g.Gcominvnet, g.Gcominvvat, g.Gcominvbilled, g.EquinoxPrn, g.EquinoxSec, g.EquinoxLrn)
	return err
}

// Save saves the Gcominv to the database.
func (g *Gcominv) Save(db XODB) error {
	if g.Exists() {
		return g.Update(db)
	}

	return g.Insert(db)
}

// Upsert performs an upsert for Gcominv.
//
// NOTE: PostgreSQL 9.5+ only
func (g *Gcominv) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if g._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.gcominv (` +
		`gcominvid, gcominvdate, gcominvtotal, gcominvnet, gcominvvat, gcominvbilled, equinox_prn, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`gcominvid, gcominvdate, gcominvtotal, gcominvnet, gcominvvat, gcominvbilled, equinox_prn, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.gcominvid, EXCLUDED.gcominvdate, EXCLUDED.gcominvtotal, EXCLUDED.gcominvnet, EXCLUDED.gcominvvat, EXCLUDED.gcominvbilled, EXCLUDED.equinox_prn, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, g.Gcominvid, g.Gcominvdate, g.Gcominvtotal, g.Gcominvnet, g.Gcominvvat, g.Gcominvbilled, g.EquinoxPrn, g.EquinoxLrn, g.EquinoxSec)
	_, err = db.Exec(sqlstr, g.Gcominvid, g.Gcominvdate, g.Gcominvtotal, g.Gcominvnet, g.Gcominvvat, g.Gcominvbilled, g.EquinoxPrn, g.EquinoxLrn, g.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	g._exists = true

	return nil
}

// Delete deletes the Gcominv from the database.
func (g *Gcominv) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !g._exists {
		return nil
	}

	// if deleted, bail
	if g._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.gcominv WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, g.EquinoxLrn)
	_, err = db.Exec(sqlstr, g.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	g._deleted = true

	return nil
}

// GcominvByEquinoxLrn retrieves a row from 'equinox.gcominv' as a Gcominv.
//
// Generated from index 'gcominv_pkey'.
func GcominvByEquinoxLrn(db XODB, equinoxLrn int64) (*Gcominv, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`gcominvid, gcominvdate, gcominvtotal, gcominvnet, gcominvvat, gcominvbilled, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.gcominv ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	g := Gcominv{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&g.Gcominvid, &g.Gcominvdate, &g.Gcominvtotal, &g.Gcominvnet, &g.Gcominvvat, &g.Gcominvbilled, &g.EquinoxPrn, &g.EquinoxLrn, &g.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &g, nil
}
