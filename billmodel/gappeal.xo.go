// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/lib/pq"
)

// Gappeal represents a row from 'equinox.gappeals'.
type Gappeal struct {
	Gappconfirmation sql.NullString  `json:"gappconfirmation"` // gappconfirmation
	Gappmpr          sql.NullString  `json:"gappmpr"`          // gappmpr
	Gappmprdate      sql.NullString  `json:"gappmprdate"`      // gappmprdate
	Gappoutcode      sql.NullString  `json:"gappoutcode"`      // gappoutcode
	Gappincode       sql.NullString  `json:"gappincode"`       // gappincode
	Gapprequestaq    sql.NullInt64   `json:"gapprequestaq"`    // gapprequestaq
	Gappmsn          sql.NullString  `json:"gappmsn"`          // gappmsn
	Gappcf           sql.NullFloat64 `json:"gappcf"`           // gappcf
	Gappimporm       sql.NullString  `json:"gappimporm"`       // gappimporm
	Gappreadingf     sql.NullFloat64 `json:"gappreadingf"`     // gappreadingf
	Gappreadingunits sql.NullInt64   `json:"gappreadingunits"` // gappreadingunits
	Gappdials        sql.NullInt64   `json:"gappdials"`        // gappdials
	Gappstartdate    pq.NullTime     `json:"gappstartdate"`    // gappstartdate
	Gappstartreading sql.NullInt64   `json:"gappstartreading"` // gappstartreading
	Gappenddate      pq.NullTime     `json:"gappenddate"`      // gappenddate
	Gappendreading   sql.NullInt64   `json:"gappendreading"`   // gappendreading
	Gappttzcount     sql.NullInt64   `json:"gappttzcount"`     // gappttzcount
	Gappemsn         sql.NullString  `json:"gappemsn"`         // gappemsn
	Gappecf          sql.NullFloat64 `json:"gappecf"`          // gappecf
	Gappeimp         sql.NullString  `json:"gappeimp"`         // gappeimp
	Gapperf          sql.NullFloat64 `json:"gapperf"`          // gapperf
	Gapperu          sql.NullInt64   `json:"gapperu"`          // gapperu
	Gappedials       sql.NullInt64   `json:"gappedials"`       // gappedials
	Gappestartdate   pq.NullTime     `json:"gappestartdate"`   // gappestartdate
	Gappestartreadin sql.NullInt64   `json:"gappestartreadin"` // gappestartreadin
	Gappeenddate     pq.NullTime     `json:"gappeenddate"`     // gappeenddate
	Gappeeendreading sql.NullInt64   `json:"gappeeendreading"` // gappeeendreading
	Gappettzcount    sql.NullInt64   `json:"gappettzcount"`    // gappettzcount
	Gappmanualcheck  sql.NullString  `json:"gappmanualcheck"`  // gappmanualcheck
	Gappsupp         sql.NullInt64   `json:"gappsupp"`         // gappsupp
	Gappappealref    sql.NullString  `json:"gappappealref"`    // gappappealref
	Gappourref       sql.NullString  `json:"gappourref"`       // gappourref
	Gapptourref      sql.NullString  `json:"gapptourref"`      // gapptourref
	Gapptcurrentaq   sql.NullInt64   `json:"gapptcurrentaq"`   // gapptcurrentaq
	Gapptheiraq      sql.NullInt64   `json:"gapptheiraq"`      // gapptheiraq
	Gappstatus       sql.NullString  `json:"gappstatus"`       // gappstatus
	Gappc1           sql.NullString  `json:"gappc1"`           // gappc1
	Gappc2           sql.NullString  `json:"gappc2"`           // gappc2
	Gappn1           sql.NullInt64   `json:"gappn1"`           // gappn1
	Gappn2           sql.NullInt64   `json:"gappn2"`           // gappn2
	Gappn3           sql.NullInt64   `json:"gappn3"`           // gappn3
	Gapptheirsread   sql.NullInt64   `json:"gapptheirsread"`   // gapptheirsread
	Gapptheirsdate   pq.NullTime     `json:"gapptheirsdate"`   // gapptheirsdate
	Gapptheireread   sql.NullInt64   `json:"gapptheireread"`   // gapptheireread
	Gapptheiredate   pq.NullTime     `json:"gapptheiredate"`   // gapptheiredate
	Gapptheirttz     sql.NullInt64   `json:"gapptheirttz"`     // gapptheirttz
	Gappstatusn      sql.NullInt64   `json:"gappstatusn"`      // gappstatusn
	Gapptranscoser   sql.NullString  `json:"gapptranscoser"`   // gapptranscoser
	Gappcurrentcalaq sql.NullInt64   `json:"gappcurrentcalaq"` // gappcurrentcalaq
	Gappnextaction   pq.NullTime     `json:"gappnextaction"`   // gappnextaction
	Gappasorej       sql.NullString  `json:"gappasorej"`       // gappasorej
	Gappaaorej       sql.NullString  `json:"gappaaorej"`       // gappaaorej
	Gappaporaaperiod sql.NullString  `json:"gappaporaaperiod"` // gappaporaaperiod
	Gappasisent      pq.NullTime     `json:"gappasisent"`      // gappasisent
	Gappasoresp      pq.NullTime     `json:"gappasoresp"`      // gappasoresp
	Gappaaisent      pq.NullTime     `json:"gappaaisent"`      // gappaaisent
	Gappaaoresp      pq.NullTime     `json:"gappaaoresp"`      // gappaaoresp
	Gappapisent      pq.NullTime     `json:"gappapisent"`      // gappapisent
	Gappaporesp      pq.NullTime     `json:"gappaporesp"`      // gappaporesp
	Gappaporej       sql.NullString  `json:"gappaporej"`       // gappaporej
	Gappnomination   pq.NullTime     `json:"gappnomination"`   // gappnomination
	Gapprecon        pq.NullTime     `json:"gapprecon"`        // gapprecon
	Gappreconstart   pq.NullTime     `json:"gappreconstart"`   // gappreconstart
	Gapps91aq        sql.NullInt64   `json:"gapps91aq"`        // gapps91aq
	Gapps91msn       sql.NullString  `json:"gapps91msn"`       // gapps91msn
	Gappourmsn       sql.NullString  `json:"gappourmsn"`       // gappourmsn
	Gappsubbuilding  sql.NullString  `json:"gappsubbuilding"`  // gappsubbuilding
	Gappbuilding     sql.NullString  `json:"gappbuilding"`     // gappbuilding
	Gappthroughfare  sql.NullString  `json:"gappthroughfare"`  // gappthroughfare
	Gappdependlocal  sql.NullString  `json:"gappdependlocal"`  // gappdependlocal
	Gappposttown     sql.NullString  `json:"gappposttown"`     // gappposttown
	Gapppostcode     sql.NullString  `json:"gapppostcode"`     // gapppostcode
	Gappmamtransref  sql.NullString  `json:"gappmamtransref"`  // gappmamtransref
	Gappmamdtransref sql.NullString  `json:"gappmamdtransref"` // gappmamdtransref
	Gappnrqdate      pq.NullTime     `json:"gappnrqdate"`      // gappnrqdate
	Gapplastread     pq.NullTime     `json:"gapplastread"`     // gapplastread
	Gappreadaqcalc   pq.NullTime     `json:"gappreadaqcalc"`   // gappreadaqcalc
	Gappaqcalc       sql.NullInt64   `json:"gappaqcalc"`       // gappaqcalc
	Gappaqcalcsdate  pq.NullTime     `json:"gappaqcalcsdate"`  // gappaqcalcsdate
	Gappaqcalcedate  pq.NullTime     `json:"gappaqcalcedate"`  // gappaqcalcedate
	Gappaqcalc1      sql.NullInt64   `json:"gappaqcalc1"`      // gappaqcalc1
	Gappaqcalc1sdate pq.NullTime     `json:"gappaqcalc1sdate"` // gappaqcalc1sdate
	Gappaqcalc2      sql.NullInt64   `json:"gappaqcalc2"`      // gappaqcalc2
	Gappaqcalc2sdate pq.NullTime     `json:"gappaqcalc2sdate"` // gappaqcalc2sdate
	Gappaqcalc6      sql.NullInt64   `json:"gappaqcalc6"`      // gappaqcalc6
	Gappaqcalc6date  pq.NullTime     `json:"gappaqcalc6date"`  // gappaqcalc6date
	Gapp4aqcalcdate  pq.NullTime     `json:"gapp4aqcalcdate"`  // gapp4aqcalcdate
	Gappaqcalc24     sql.NullInt64   `json:"gappaqcalc24"`     // gappaqcalc24
	Gappaqcalc24date pq.NullTime     `json:"gappaqcalc24date"` // gappaqcalc24date
	Gappasifile      sql.NullString  `json:"gappasifile"`      // gappasifile
	Gappaaifile      sql.NullString  `json:"gappaaifile"`      // gappaaifile
	Gappaqupdate     pq.NullTime     `json:"gappaqupdate"`     // gappaqupdate
	Gappconnection   pq.NullTime     `json:"gappconnection"`   // gappconnection
	Gappaqerror      sql.NullInt64   `json:"gappaqerror"`      // gappaqerror
	Gappedit         sql.NullString  `json:"gappedit"`         // gappedit
	Gappconfirmstart pq.NullTime     `json:"gappconfirmstart"` // gappconfirmstart
	Gappconfirmdead  pq.NullTime     `json:"gappconfirmdead"`  // gappconfirmdead
	Gapplastact      pq.NullTime     `json:"gapplastact"`      // gapplastact
	Gappeditdate     pq.NullTime     `json:"gappeditdate"`     // gappeditdate
	Gasichecked      sql.NullInt64   `json:"gasichecked"`      // gasichecked
	Gappnrlrec       pq.NullTime     `json:"gappnrlrec"`       // gappnrlrec
	Gappnrorec       pq.NullTime     `json:"gappnrorec"`       // gappnrorec
	EquinoxLrn       int64           `json:"equinox_lrn"`      // equinox_lrn
	EquinoxSec       sql.NullInt64   `json:"equinox_sec"`      // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Gappeal exists in the database.
func (g *Gappeal) Exists() bool {
	return g._exists
}

// Deleted provides information if the Gappeal has been deleted from the database.
func (g *Gappeal) Deleted() bool {
	return g._deleted
}

// Insert inserts the Gappeal to the database.
func (g *Gappeal) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if g._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.gappeals (` +
		`gappconfirmation, gappmpr, gappmprdate, gappoutcode, gappincode, gapprequestaq, gappmsn, gappcf, gappimporm, gappreadingf, gappreadingunits, gappdials, gappstartdate, gappstartreading, gappenddate, gappendreading, gappttzcount, gappemsn, gappecf, gappeimp, gapperf, gapperu, gappedials, gappestartdate, gappestartreadin, gappeenddate, gappeeendreading, gappettzcount, gappmanualcheck, gappsupp, gappappealref, gappourref, gapptourref, gapptcurrentaq, gapptheiraq, gappstatus, gappc1, gappc2, gappn1, gappn2, gappn3, gapptheirsread, gapptheirsdate, gapptheireread, gapptheiredate, gapptheirttz, gappstatusn, gapptranscoser, gappcurrentcalaq, gappnextaction, gappasorej, gappaaorej, gappaporaaperiod, gappasisent, gappasoresp, gappaaisent, gappaaoresp, gappapisent, gappaporesp, gappaporej, gappnomination, gapprecon, gappreconstart, gapps91aq, gapps91msn, gappourmsn, gappsubbuilding, gappbuilding, gappthroughfare, gappdependlocal, gappposttown, gapppostcode, gappmamtransref, gappmamdtransref, gappnrqdate, gapplastread, gappreadaqcalc, gappaqcalc, gappaqcalcsdate, gappaqcalcedate, gappaqcalc1, gappaqcalc1sdate, gappaqcalc2, gappaqcalc2sdate, gappaqcalc6, gappaqcalc6date, gapp4aqcalcdate, gappaqcalc24, gappaqcalc24date, gappasifile, gappaaifile, gappaqupdate, gappconnection, gappaqerror, gappedit, gappconfirmstart, gappconfirmdead, gapplastact, gappeditdate, gasichecked, gappnrlrec, gappnrorec, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46, $47, $48, $49, $50, $51, $52, $53, $54, $55, $56, $57, $58, $59, $60, $61, $62, $63, $64, $65, $66, $67, $68, $69, $70, $71, $72, $73, $74, $75, $76, $77, $78, $79, $80, $81, $82, $83, $84, $85, $86, $87, $88, $89, $90, $91, $92, $93, $94, $95, $96, $97, $98, $99, $100, $101, $102, $103` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, g.Gappconfirmation, g.Gappmpr, g.Gappmprdate, g.Gappoutcode, g.Gappincode, g.Gapprequestaq, g.Gappmsn, g.Gappcf, g.Gappimporm, g.Gappreadingf, g.Gappreadingunits, g.Gappdials, g.Gappstartdate, g.Gappstartreading, g.Gappenddate, g.Gappendreading, g.Gappttzcount, g.Gappemsn, g.Gappecf, g.Gappeimp, g.Gapperf, g.Gapperu, g.Gappedials, g.Gappestartdate, g.Gappestartreadin, g.Gappeenddate, g.Gappeeendreading, g.Gappettzcount, g.Gappmanualcheck, g.Gappsupp, g.Gappappealref, g.Gappourref, g.Gapptourref, g.Gapptcurrentaq, g.Gapptheiraq, g.Gappstatus, g.Gappc1, g.Gappc2, g.Gappn1, g.Gappn2, g.Gappn3, g.Gapptheirsread, g.Gapptheirsdate, g.Gapptheireread, g.Gapptheiredate, g.Gapptheirttz, g.Gappstatusn, g.Gapptranscoser, g.Gappcurrentcalaq, g.Gappnextaction, g.Gappasorej, g.Gappaaorej, g.Gappaporaaperiod, g.Gappasisent, g.Gappasoresp, g.Gappaaisent, g.Gappaaoresp, g.Gappapisent, g.Gappaporesp, g.Gappaporej, g.Gappnomination, g.Gapprecon, g.Gappreconstart, g.Gapps91aq, g.Gapps91msn, g.Gappourmsn, g.Gappsubbuilding, g.Gappbuilding, g.Gappthroughfare, g.Gappdependlocal, g.Gappposttown, g.Gapppostcode, g.Gappmamtransref, g.Gappmamdtransref, g.Gappnrqdate, g.Gapplastread, g.Gappreadaqcalc, g.Gappaqcalc, g.Gappaqcalcsdate, g.Gappaqcalcedate, g.Gappaqcalc1, g.Gappaqcalc1sdate, g.Gappaqcalc2, g.Gappaqcalc2sdate, g.Gappaqcalc6, g.Gappaqcalc6date, g.Gapp4aqcalcdate, g.Gappaqcalc24, g.Gappaqcalc24date, g.Gappasifile, g.Gappaaifile, g.Gappaqupdate, g.Gappconnection, g.Gappaqerror, g.Gappedit, g.Gappconfirmstart, g.Gappconfirmdead, g.Gapplastact, g.Gappeditdate, g.Gasichecked, g.Gappnrlrec, g.Gappnrorec, g.EquinoxSec)
	err = db.QueryRow(sqlstr, g.Gappconfirmation, g.Gappmpr, g.Gappmprdate, g.Gappoutcode, g.Gappincode, g.Gapprequestaq, g.Gappmsn, g.Gappcf, g.Gappimporm, g.Gappreadingf, g.Gappreadingunits, g.Gappdials, g.Gappstartdate, g.Gappstartreading, g.Gappenddate, g.Gappendreading, g.Gappttzcount, g.Gappemsn, g.Gappecf, g.Gappeimp, g.Gapperf, g.Gapperu, g.Gappedials, g.Gappestartdate, g.Gappestartreadin, g.Gappeenddate, g.Gappeeendreading, g.Gappettzcount, g.Gappmanualcheck, g.Gappsupp, g.Gappappealref, g.Gappourref, g.Gapptourref, g.Gapptcurrentaq, g.Gapptheiraq, g.Gappstatus, g.Gappc1, g.Gappc2, g.Gappn1, g.Gappn2, g.Gappn3, g.Gapptheirsread, g.Gapptheirsdate, g.Gapptheireread, g.Gapptheiredate, g.Gapptheirttz, g.Gappstatusn, g.Gapptranscoser, g.Gappcurrentcalaq, g.Gappnextaction, g.Gappasorej, g.Gappaaorej, g.Gappaporaaperiod, g.Gappasisent, g.Gappasoresp, g.Gappaaisent, g.Gappaaoresp, g.Gappapisent, g.Gappaporesp, g.Gappaporej, g.Gappnomination, g.Gapprecon, g.Gappreconstart, g.Gapps91aq, g.Gapps91msn, g.Gappourmsn, g.Gappsubbuilding, g.Gappbuilding, g.Gappthroughfare, g.Gappdependlocal, g.Gappposttown, g.Gapppostcode, g.Gappmamtransref, g.Gappmamdtransref, g.Gappnrqdate, g.Gapplastread, g.Gappreadaqcalc, g.Gappaqcalc, g.Gappaqcalcsdate, g.Gappaqcalcedate, g.Gappaqcalc1, g.Gappaqcalc1sdate, g.Gappaqcalc2, g.Gappaqcalc2sdate, g.Gappaqcalc6, g.Gappaqcalc6date, g.Gapp4aqcalcdate, g.Gappaqcalc24, g.Gappaqcalc24date, g.Gappasifile, g.Gappaaifile, g.Gappaqupdate, g.Gappconnection, g.Gappaqerror, g.Gappedit, g.Gappconfirmstart, g.Gappconfirmdead, g.Gapplastact, g.Gappeditdate, g.Gasichecked, g.Gappnrlrec, g.Gappnrorec, g.EquinoxSec).Scan(&g.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	g._exists = true

	return nil
}

// Update updates the Gappeal in the database.
func (g *Gappeal) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !g._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if g._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.gappeals SET (` +
		`gappconfirmation, gappmpr, gappmprdate, gappoutcode, gappincode, gapprequestaq, gappmsn, gappcf, gappimporm, gappreadingf, gappreadingunits, gappdials, gappstartdate, gappstartreading, gappenddate, gappendreading, gappttzcount, gappemsn, gappecf, gappeimp, gapperf, gapperu, gappedials, gappestartdate, gappestartreadin, gappeenddate, gappeeendreading, gappettzcount, gappmanualcheck, gappsupp, gappappealref, gappourref, gapptourref, gapptcurrentaq, gapptheiraq, gappstatus, gappc1, gappc2, gappn1, gappn2, gappn3, gapptheirsread, gapptheirsdate, gapptheireread, gapptheiredate, gapptheirttz, gappstatusn, gapptranscoser, gappcurrentcalaq, gappnextaction, gappasorej, gappaaorej, gappaporaaperiod, gappasisent, gappasoresp, gappaaisent, gappaaoresp, gappapisent, gappaporesp, gappaporej, gappnomination, gapprecon, gappreconstart, gapps91aq, gapps91msn, gappourmsn, gappsubbuilding, gappbuilding, gappthroughfare, gappdependlocal, gappposttown, gapppostcode, gappmamtransref, gappmamdtransref, gappnrqdate, gapplastread, gappreadaqcalc, gappaqcalc, gappaqcalcsdate, gappaqcalcedate, gappaqcalc1, gappaqcalc1sdate, gappaqcalc2, gappaqcalc2sdate, gappaqcalc6, gappaqcalc6date, gapp4aqcalcdate, gappaqcalc24, gappaqcalc24date, gappasifile, gappaaifile, gappaqupdate, gappconnection, gappaqerror, gappedit, gappconfirmstart, gappconfirmdead, gapplastact, gappeditdate, gasichecked, gappnrlrec, gappnrorec, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46, $47, $48, $49, $50, $51, $52, $53, $54, $55, $56, $57, $58, $59, $60, $61, $62, $63, $64, $65, $66, $67, $68, $69, $70, $71, $72, $73, $74, $75, $76, $77, $78, $79, $80, $81, $82, $83, $84, $85, $86, $87, $88, $89, $90, $91, $92, $93, $94, $95, $96, $97, $98, $99, $100, $101, $102, $103` +
		`) WHERE equinox_lrn = $104`

	// run query
	XOLog(sqlstr, g.Gappconfirmation, g.Gappmpr, g.Gappmprdate, g.Gappoutcode, g.Gappincode, g.Gapprequestaq, g.Gappmsn, g.Gappcf, g.Gappimporm, g.Gappreadingf, g.Gappreadingunits, g.Gappdials, g.Gappstartdate, g.Gappstartreading, g.Gappenddate, g.Gappendreading, g.Gappttzcount, g.Gappemsn, g.Gappecf, g.Gappeimp, g.Gapperf, g.Gapperu, g.Gappedials, g.Gappestartdate, g.Gappestartreadin, g.Gappeenddate, g.Gappeeendreading, g.Gappettzcount, g.Gappmanualcheck, g.Gappsupp, g.Gappappealref, g.Gappourref, g.Gapptourref, g.Gapptcurrentaq, g.Gapptheiraq, g.Gappstatus, g.Gappc1, g.Gappc2, g.Gappn1, g.Gappn2, g.Gappn3, g.Gapptheirsread, g.Gapptheirsdate, g.Gapptheireread, g.Gapptheiredate, g.Gapptheirttz, g.Gappstatusn, g.Gapptranscoser, g.Gappcurrentcalaq, g.Gappnextaction, g.Gappasorej, g.Gappaaorej, g.Gappaporaaperiod, g.Gappasisent, g.Gappasoresp, g.Gappaaisent, g.Gappaaoresp, g.Gappapisent, g.Gappaporesp, g.Gappaporej, g.Gappnomination, g.Gapprecon, g.Gappreconstart, g.Gapps91aq, g.Gapps91msn, g.Gappourmsn, g.Gappsubbuilding, g.Gappbuilding, g.Gappthroughfare, g.Gappdependlocal, g.Gappposttown, g.Gapppostcode, g.Gappmamtransref, g.Gappmamdtransref, g.Gappnrqdate, g.Gapplastread, g.Gappreadaqcalc, g.Gappaqcalc, g.Gappaqcalcsdate, g.Gappaqcalcedate, g.Gappaqcalc1, g.Gappaqcalc1sdate, g.Gappaqcalc2, g.Gappaqcalc2sdate, g.Gappaqcalc6, g.Gappaqcalc6date, g.Gapp4aqcalcdate, g.Gappaqcalc24, g.Gappaqcalc24date, g.Gappasifile, g.Gappaaifile, g.Gappaqupdate, g.Gappconnection, g.Gappaqerror, g.Gappedit, g.Gappconfirmstart, g.Gappconfirmdead, g.Gapplastact, g.Gappeditdate, g.Gasichecked, g.Gappnrlrec, g.Gappnrorec, g.EquinoxSec, g.EquinoxLrn)
	_, err = db.Exec(sqlstr, g.Gappconfirmation, g.Gappmpr, g.Gappmprdate, g.Gappoutcode, g.Gappincode, g.Gapprequestaq, g.Gappmsn, g.Gappcf, g.Gappimporm, g.Gappreadingf, g.Gappreadingunits, g.Gappdials, g.Gappstartdate, g.Gappstartreading, g.Gappenddate, g.Gappendreading, g.Gappttzcount, g.Gappemsn, g.Gappecf, g.Gappeimp, g.Gapperf, g.Gapperu, g.Gappedials, g.Gappestartdate, g.Gappestartreadin, g.Gappeenddate, g.Gappeeendreading, g.Gappettzcount, g.Gappmanualcheck, g.Gappsupp, g.Gappappealref, g.Gappourref, g.Gapptourref, g.Gapptcurrentaq, g.Gapptheiraq, g.Gappstatus, g.Gappc1, g.Gappc2, g.Gappn1, g.Gappn2, g.Gappn3, g.Gapptheirsread, g.Gapptheirsdate, g.Gapptheireread, g.Gapptheiredate, g.Gapptheirttz, g.Gappstatusn, g.Gapptranscoser, g.Gappcurrentcalaq, g.Gappnextaction, g.Gappasorej, g.Gappaaorej, g.Gappaporaaperiod, g.Gappasisent, g.Gappasoresp, g.Gappaaisent, g.Gappaaoresp, g.Gappapisent, g.Gappaporesp, g.Gappaporej, g.Gappnomination, g.Gapprecon, g.Gappreconstart, g.Gapps91aq, g.Gapps91msn, g.Gappourmsn, g.Gappsubbuilding, g.Gappbuilding, g.Gappthroughfare, g.Gappdependlocal, g.Gappposttown, g.Gapppostcode, g.Gappmamtransref, g.Gappmamdtransref, g.Gappnrqdate, g.Gapplastread, g.Gappreadaqcalc, g.Gappaqcalc, g.Gappaqcalcsdate, g.Gappaqcalcedate, g.Gappaqcalc1, g.Gappaqcalc1sdate, g.Gappaqcalc2, g.Gappaqcalc2sdate, g.Gappaqcalc6, g.Gappaqcalc6date, g.Gapp4aqcalcdate, g.Gappaqcalc24, g.Gappaqcalc24date, g.Gappasifile, g.Gappaaifile, g.Gappaqupdate, g.Gappconnection, g.Gappaqerror, g.Gappedit, g.Gappconfirmstart, g.Gappconfirmdead, g.Gapplastact, g.Gappeditdate, g.Gasichecked, g.Gappnrlrec, g.Gappnrorec, g.EquinoxSec, g.EquinoxLrn)
	return err
}

// Save saves the Gappeal to the database.
func (g *Gappeal) Save(db XODB) error {
	if g.Exists() {
		return g.Update(db)
	}

	return g.Insert(db)
}

// Upsert performs an upsert for Gappeal.
//
// NOTE: PostgreSQL 9.5+ only
func (g *Gappeal) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if g._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.gappeals (` +
		`gappconfirmation, gappmpr, gappmprdate, gappoutcode, gappincode, gapprequestaq, gappmsn, gappcf, gappimporm, gappreadingf, gappreadingunits, gappdials, gappstartdate, gappstartreading, gappenddate, gappendreading, gappttzcount, gappemsn, gappecf, gappeimp, gapperf, gapperu, gappedials, gappestartdate, gappestartreadin, gappeenddate, gappeeendreading, gappettzcount, gappmanualcheck, gappsupp, gappappealref, gappourref, gapptourref, gapptcurrentaq, gapptheiraq, gappstatus, gappc1, gappc2, gappn1, gappn2, gappn3, gapptheirsread, gapptheirsdate, gapptheireread, gapptheiredate, gapptheirttz, gappstatusn, gapptranscoser, gappcurrentcalaq, gappnextaction, gappasorej, gappaaorej, gappaporaaperiod, gappasisent, gappasoresp, gappaaisent, gappaaoresp, gappapisent, gappaporesp, gappaporej, gappnomination, gapprecon, gappreconstart, gapps91aq, gapps91msn, gappourmsn, gappsubbuilding, gappbuilding, gappthroughfare, gappdependlocal, gappposttown, gapppostcode, gappmamtransref, gappmamdtransref, gappnrqdate, gapplastread, gappreadaqcalc, gappaqcalc, gappaqcalcsdate, gappaqcalcedate, gappaqcalc1, gappaqcalc1sdate, gappaqcalc2, gappaqcalc2sdate, gappaqcalc6, gappaqcalc6date, gapp4aqcalcdate, gappaqcalc24, gappaqcalc24date, gappasifile, gappaaifile, gappaqupdate, gappconnection, gappaqerror, gappedit, gappconfirmstart, gappconfirmdead, gapplastact, gappeditdate, gasichecked, gappnrlrec, gappnrorec, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46, $47, $48, $49, $50, $51, $52, $53, $54, $55, $56, $57, $58, $59, $60, $61, $62, $63, $64, $65, $66, $67, $68, $69, $70, $71, $72, $73, $74, $75, $76, $77, $78, $79, $80, $81, $82, $83, $84, $85, $86, $87, $88, $89, $90, $91, $92, $93, $94, $95, $96, $97, $98, $99, $100, $101, $102, $103, $104` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`gappconfirmation, gappmpr, gappmprdate, gappoutcode, gappincode, gapprequestaq, gappmsn, gappcf, gappimporm, gappreadingf, gappreadingunits, gappdials, gappstartdate, gappstartreading, gappenddate, gappendreading, gappttzcount, gappemsn, gappecf, gappeimp, gapperf, gapperu, gappedials, gappestartdate, gappestartreadin, gappeenddate, gappeeendreading, gappettzcount, gappmanualcheck, gappsupp, gappappealref, gappourref, gapptourref, gapptcurrentaq, gapptheiraq, gappstatus, gappc1, gappc2, gappn1, gappn2, gappn3, gapptheirsread, gapptheirsdate, gapptheireread, gapptheiredate, gapptheirttz, gappstatusn, gapptranscoser, gappcurrentcalaq, gappnextaction, gappasorej, gappaaorej, gappaporaaperiod, gappasisent, gappasoresp, gappaaisent, gappaaoresp, gappapisent, gappaporesp, gappaporej, gappnomination, gapprecon, gappreconstart, gapps91aq, gapps91msn, gappourmsn, gappsubbuilding, gappbuilding, gappthroughfare, gappdependlocal, gappposttown, gapppostcode, gappmamtransref, gappmamdtransref, gappnrqdate, gapplastread, gappreadaqcalc, gappaqcalc, gappaqcalcsdate, gappaqcalcedate, gappaqcalc1, gappaqcalc1sdate, gappaqcalc2, gappaqcalc2sdate, gappaqcalc6, gappaqcalc6date, gapp4aqcalcdate, gappaqcalc24, gappaqcalc24date, gappasifile, gappaaifile, gappaqupdate, gappconnection, gappaqerror, gappedit, gappconfirmstart, gappconfirmdead, gapplastact, gappeditdate, gasichecked, gappnrlrec, gappnrorec, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.gappconfirmation, EXCLUDED.gappmpr, EXCLUDED.gappmprdate, EXCLUDED.gappoutcode, EXCLUDED.gappincode, EXCLUDED.gapprequestaq, EXCLUDED.gappmsn, EXCLUDED.gappcf, EXCLUDED.gappimporm, EXCLUDED.gappreadingf, EXCLUDED.gappreadingunits, EXCLUDED.gappdials, EXCLUDED.gappstartdate, EXCLUDED.gappstartreading, EXCLUDED.gappenddate, EXCLUDED.gappendreading, EXCLUDED.gappttzcount, EXCLUDED.gappemsn, EXCLUDED.gappecf, EXCLUDED.gappeimp, EXCLUDED.gapperf, EXCLUDED.gapperu, EXCLUDED.gappedials, EXCLUDED.gappestartdate, EXCLUDED.gappestartreadin, EXCLUDED.gappeenddate, EXCLUDED.gappeeendreading, EXCLUDED.gappettzcount, EXCLUDED.gappmanualcheck, EXCLUDED.gappsupp, EXCLUDED.gappappealref, EXCLUDED.gappourref, EXCLUDED.gapptourref, EXCLUDED.gapptcurrentaq, EXCLUDED.gapptheiraq, EXCLUDED.gappstatus, EXCLUDED.gappc1, EXCLUDED.gappc2, EXCLUDED.gappn1, EXCLUDED.gappn2, EXCLUDED.gappn3, EXCLUDED.gapptheirsread, EXCLUDED.gapptheirsdate, EXCLUDED.gapptheireread, EXCLUDED.gapptheiredate, EXCLUDED.gapptheirttz, EXCLUDED.gappstatusn, EXCLUDED.gapptranscoser, EXCLUDED.gappcurrentcalaq, EXCLUDED.gappnextaction, EXCLUDED.gappasorej, EXCLUDED.gappaaorej, EXCLUDED.gappaporaaperiod, EXCLUDED.gappasisent, EXCLUDED.gappasoresp, EXCLUDED.gappaaisent, EXCLUDED.gappaaoresp, EXCLUDED.gappapisent, EXCLUDED.gappaporesp, EXCLUDED.gappaporej, EXCLUDED.gappnomination, EXCLUDED.gapprecon, EXCLUDED.gappreconstart, EXCLUDED.gapps91aq, EXCLUDED.gapps91msn, EXCLUDED.gappourmsn, EXCLUDED.gappsubbuilding, EXCLUDED.gappbuilding, EXCLUDED.gappthroughfare, EXCLUDED.gappdependlocal, EXCLUDED.gappposttown, EXCLUDED.gapppostcode, EXCLUDED.gappmamtransref, EXCLUDED.gappmamdtransref, EXCLUDED.gappnrqdate, EXCLUDED.gapplastread, EXCLUDED.gappreadaqcalc, EXCLUDED.gappaqcalc, EXCLUDED.gappaqcalcsdate, EXCLUDED.gappaqcalcedate, EXCLUDED.gappaqcalc1, EXCLUDED.gappaqcalc1sdate, EXCLUDED.gappaqcalc2, EXCLUDED.gappaqcalc2sdate, EXCLUDED.gappaqcalc6, EXCLUDED.gappaqcalc6date, EXCLUDED.gapp4aqcalcdate, EXCLUDED.gappaqcalc24, EXCLUDED.gappaqcalc24date, EXCLUDED.gappasifile, EXCLUDED.gappaaifile, EXCLUDED.gappaqupdate, EXCLUDED.gappconnection, EXCLUDED.gappaqerror, EXCLUDED.gappedit, EXCLUDED.gappconfirmstart, EXCLUDED.gappconfirmdead, EXCLUDED.gapplastact, EXCLUDED.gappeditdate, EXCLUDED.gasichecked, EXCLUDED.gappnrlrec, EXCLUDED.gappnrorec, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, g.Gappconfirmation, g.Gappmpr, g.Gappmprdate, g.Gappoutcode, g.Gappincode, g.Gapprequestaq, g.Gappmsn, g.Gappcf, g.Gappimporm, g.Gappreadingf, g.Gappreadingunits, g.Gappdials, g.Gappstartdate, g.Gappstartreading, g.Gappenddate, g.Gappendreading, g.Gappttzcount, g.Gappemsn, g.Gappecf, g.Gappeimp, g.Gapperf, g.Gapperu, g.Gappedials, g.Gappestartdate, g.Gappestartreadin, g.Gappeenddate, g.Gappeeendreading, g.Gappettzcount, g.Gappmanualcheck, g.Gappsupp, g.Gappappealref, g.Gappourref, g.Gapptourref, g.Gapptcurrentaq, g.Gapptheiraq, g.Gappstatus, g.Gappc1, g.Gappc2, g.Gappn1, g.Gappn2, g.Gappn3, g.Gapptheirsread, g.Gapptheirsdate, g.Gapptheireread, g.Gapptheiredate, g.Gapptheirttz, g.Gappstatusn, g.Gapptranscoser, g.Gappcurrentcalaq, g.Gappnextaction, g.Gappasorej, g.Gappaaorej, g.Gappaporaaperiod, g.Gappasisent, g.Gappasoresp, g.Gappaaisent, g.Gappaaoresp, g.Gappapisent, g.Gappaporesp, g.Gappaporej, g.Gappnomination, g.Gapprecon, g.Gappreconstart, g.Gapps91aq, g.Gapps91msn, g.Gappourmsn, g.Gappsubbuilding, g.Gappbuilding, g.Gappthroughfare, g.Gappdependlocal, g.Gappposttown, g.Gapppostcode, g.Gappmamtransref, g.Gappmamdtransref, g.Gappnrqdate, g.Gapplastread, g.Gappreadaqcalc, g.Gappaqcalc, g.Gappaqcalcsdate, g.Gappaqcalcedate, g.Gappaqcalc1, g.Gappaqcalc1sdate, g.Gappaqcalc2, g.Gappaqcalc2sdate, g.Gappaqcalc6, g.Gappaqcalc6date, g.Gapp4aqcalcdate, g.Gappaqcalc24, g.Gappaqcalc24date, g.Gappasifile, g.Gappaaifile, g.Gappaqupdate, g.Gappconnection, g.Gappaqerror, g.Gappedit, g.Gappconfirmstart, g.Gappconfirmdead, g.Gapplastact, g.Gappeditdate, g.Gasichecked, g.Gappnrlrec, g.Gappnrorec, g.EquinoxLrn, g.EquinoxSec)
	_, err = db.Exec(sqlstr, g.Gappconfirmation, g.Gappmpr, g.Gappmprdate, g.Gappoutcode, g.Gappincode, g.Gapprequestaq, g.Gappmsn, g.Gappcf, g.Gappimporm, g.Gappreadingf, g.Gappreadingunits, g.Gappdials, g.Gappstartdate, g.Gappstartreading, g.Gappenddate, g.Gappendreading, g.Gappttzcount, g.Gappemsn, g.Gappecf, g.Gappeimp, g.Gapperf, g.Gapperu, g.Gappedials, g.Gappestartdate, g.Gappestartreadin, g.Gappeenddate, g.Gappeeendreading, g.Gappettzcount, g.Gappmanualcheck, g.Gappsupp, g.Gappappealref, g.Gappourref, g.Gapptourref, g.Gapptcurrentaq, g.Gapptheiraq, g.Gappstatus, g.Gappc1, g.Gappc2, g.Gappn1, g.Gappn2, g.Gappn3, g.Gapptheirsread, g.Gapptheirsdate, g.Gapptheireread, g.Gapptheiredate, g.Gapptheirttz, g.Gappstatusn, g.Gapptranscoser, g.Gappcurrentcalaq, g.Gappnextaction, g.Gappasorej, g.Gappaaorej, g.Gappaporaaperiod, g.Gappasisent, g.Gappasoresp, g.Gappaaisent, g.Gappaaoresp, g.Gappapisent, g.Gappaporesp, g.Gappaporej, g.Gappnomination, g.Gapprecon, g.Gappreconstart, g.Gapps91aq, g.Gapps91msn, g.Gappourmsn, g.Gappsubbuilding, g.Gappbuilding, g.Gappthroughfare, g.Gappdependlocal, g.Gappposttown, g.Gapppostcode, g.Gappmamtransref, g.Gappmamdtransref, g.Gappnrqdate, g.Gapplastread, g.Gappreadaqcalc, g.Gappaqcalc, g.Gappaqcalcsdate, g.Gappaqcalcedate, g.Gappaqcalc1, g.Gappaqcalc1sdate, g.Gappaqcalc2, g.Gappaqcalc2sdate, g.Gappaqcalc6, g.Gappaqcalc6date, g.Gapp4aqcalcdate, g.Gappaqcalc24, g.Gappaqcalc24date, g.Gappasifile, g.Gappaaifile, g.Gappaqupdate, g.Gappconnection, g.Gappaqerror, g.Gappedit, g.Gappconfirmstart, g.Gappconfirmdead, g.Gapplastact, g.Gappeditdate, g.Gasichecked, g.Gappnrlrec, g.Gappnrorec, g.EquinoxLrn, g.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	g._exists = true

	return nil
}

// Delete deletes the Gappeal from the database.
func (g *Gappeal) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !g._exists {
		return nil
	}

	// if deleted, bail
	if g._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.gappeals WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, g.EquinoxLrn)
	_, err = db.Exec(sqlstr, g.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	g._deleted = true

	return nil
}

// GappealByEquinoxLrn retrieves a row from 'equinox.gappeals' as a Gappeal.
//
// Generated from index 'gappeals_pkey'.
func GappealByEquinoxLrn(db XODB, equinoxLrn int64) (*Gappeal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`gappconfirmation, gappmpr, gappmprdate, gappoutcode, gappincode, gapprequestaq, gappmsn, gappcf, gappimporm, gappreadingf, gappreadingunits, gappdials, gappstartdate, gappstartreading, gappenddate, gappendreading, gappttzcount, gappemsn, gappecf, gappeimp, gapperf, gapperu, gappedials, gappestartdate, gappestartreadin, gappeenddate, gappeeendreading, gappettzcount, gappmanualcheck, gappsupp, gappappealref, gappourref, gapptourref, gapptcurrentaq, gapptheiraq, gappstatus, gappc1, gappc2, gappn1, gappn2, gappn3, gapptheirsread, gapptheirsdate, gapptheireread, gapptheiredate, gapptheirttz, gappstatusn, gapptranscoser, gappcurrentcalaq, gappnextaction, gappasorej, gappaaorej, gappaporaaperiod, gappasisent, gappasoresp, gappaaisent, gappaaoresp, gappapisent, gappaporesp, gappaporej, gappnomination, gapprecon, gappreconstart, gapps91aq, gapps91msn, gappourmsn, gappsubbuilding, gappbuilding, gappthroughfare, gappdependlocal, gappposttown, gapppostcode, gappmamtransref, gappmamdtransref, gappnrqdate, gapplastread, gappreadaqcalc, gappaqcalc, gappaqcalcsdate, gappaqcalcedate, gappaqcalc1, gappaqcalc1sdate, gappaqcalc2, gappaqcalc2sdate, gappaqcalc6, gappaqcalc6date, gapp4aqcalcdate, gappaqcalc24, gappaqcalc24date, gappasifile, gappaaifile, gappaqupdate, gappconnection, gappaqerror, gappedit, gappconfirmstart, gappconfirmdead, gapplastact, gappeditdate, gasichecked, gappnrlrec, gappnrorec, equinox_lrn, equinox_sec ` +
		`FROM equinox.gappeals ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	g := Gappeal{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&g.Gappconfirmation, &g.Gappmpr, &g.Gappmprdate, &g.Gappoutcode, &g.Gappincode, &g.Gapprequestaq, &g.Gappmsn, &g.Gappcf, &g.Gappimporm, &g.Gappreadingf, &g.Gappreadingunits, &g.Gappdials, &g.Gappstartdate, &g.Gappstartreading, &g.Gappenddate, &g.Gappendreading, &g.Gappttzcount, &g.Gappemsn, &g.Gappecf, &g.Gappeimp, &g.Gapperf, &g.Gapperu, &g.Gappedials, &g.Gappestartdate, &g.Gappestartreadin, &g.Gappeenddate, &g.Gappeeendreading, &g.Gappettzcount, &g.Gappmanualcheck, &g.Gappsupp, &g.Gappappealref, &g.Gappourref, &g.Gapptourref, &g.Gapptcurrentaq, &g.Gapptheiraq, &g.Gappstatus, &g.Gappc1, &g.Gappc2, &g.Gappn1, &g.Gappn2, &g.Gappn3, &g.Gapptheirsread, &g.Gapptheirsdate, &g.Gapptheireread, &g.Gapptheiredate, &g.Gapptheirttz, &g.Gappstatusn, &g.Gapptranscoser, &g.Gappcurrentcalaq, &g.Gappnextaction, &g.Gappasorej, &g.Gappaaorej, &g.Gappaporaaperiod, &g.Gappasisent, &g.Gappasoresp, &g.Gappaaisent, &g.Gappaaoresp, &g.Gappapisent, &g.Gappaporesp, &g.Gappaporej, &g.Gappnomination, &g.Gapprecon, &g.Gappreconstart, &g.Gapps91aq, &g.Gapps91msn, &g.Gappourmsn, &g.Gappsubbuilding, &g.Gappbuilding, &g.Gappthroughfare, &g.Gappdependlocal, &g.Gappposttown, &g.Gapppostcode, &g.Gappmamtransref, &g.Gappmamdtransref, &g.Gappnrqdate, &g.Gapplastread, &g.Gappreadaqcalc, &g.Gappaqcalc, &g.Gappaqcalcsdate, &g.Gappaqcalcedate, &g.Gappaqcalc1, &g.Gappaqcalc1sdate, &g.Gappaqcalc2, &g.Gappaqcalc2sdate, &g.Gappaqcalc6, &g.Gappaqcalc6date, &g.Gapp4aqcalcdate, &g.Gappaqcalc24, &g.Gappaqcalc24date, &g.Gappasifile, &g.Gappaaifile, &g.Gappaqupdate, &g.Gappconnection, &g.Gappaqerror, &g.Gappedit, &g.Gappconfirmstart, &g.Gappconfirmdead, &g.Gapplastact, &g.Gappeditdate, &g.Gasichecked, &g.Gappnrlrec, &g.Gappnrorec, &g.EquinoxLrn, &g.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &g, nil
}
