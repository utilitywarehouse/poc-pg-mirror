// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/lib/pq"
)

// TempCnx represents a row from 'equinox.temp_cnx'.
type TempCnx struct {
	TempRefno       sql.NullString `json:"temp_refno"`       // temp_refno
	TempReward      sql.NullString `json:"temp_reward"`      // temp_reward
	TempCustpostcod sql.NullString `json:"temp_custpostcod"` // temp_custpostcod
	TempCustadd1    sql.NullString `json:"temp_custadd1"`    // temp_custadd1
	TempCustadd2    sql.NullString `json:"temp_custadd2"`    // temp_custadd2
	TempCustadd3    sql.NullString `json:"temp_custadd3"`    // temp_custadd3
	TempCustadd4    sql.NullString `json:"temp_custadd4"`    // temp_custadd4
	TempCustadd5    sql.NullString `json:"temp_custadd5"`    // temp_custadd5
	TempCustni      sql.NullInt64  `json:"temp_custni"`      // temp_custni
	TempCustver     sql.NullInt64  `json:"temp_custver"`     // temp_custver
	TempCustinvadd  sql.NullInt64  `json:"temp_custinvadd"`  // temp_custinvadd
	TempTitle       sql.NullString `json:"temp_title"`       // temp_title
	TempSurname     sql.NullString `json:"temp_surname"`     // temp_surname
	TempFirstname   sql.NullString `json:"temp_firstname"`   // temp_firstname
	TempAccname     sql.NullString `json:"temp_accname"`     // temp_accname
	TempOwnertenant sql.NullString `json:"temp_ownertenant"` // temp_ownertenant
	TempTenenddate  pq.NullTime    `json:"temp_tenenddate"`  // temp_tenenddate
	TempTenclubleve sql.NullString `json:"temp_tenclubleve"` // temp_tenclubleve
	TempDob         pq.NullTime    `json:"temp_dob"`         // temp_dob
	TempHomeno      sql.NullString `json:"temp_homeno"`      // temp_homeno
	TempMobile      sql.NullString `json:"temp_mobile"`      // temp_mobile
	TempEmail       sql.NullString `json:"temp_email"`       // temp_email
	TempBankaccname sql.NullString `json:"temp_bankaccname"` // temp_bankaccname
	TempBanksortc   sql.NullString `json:"temp_banksortc"`   // temp_banksortc
	TempBankaccno   sql.NullString `json:"temp_bankaccno"`   // temp_bankaccno
	TempCardtype    sql.NullString `json:"temp_cardtype"`    // temp_cardtype
	TempCardno      sql.NullString `json:"temp_cardno"`      // temp_cardno
	TempStartdate   sql.NullString `json:"temp_startdate"`   // temp_startdate
	TempExpdate     sql.NullString `json:"temp_expdate"`     // temp_expdate
	TempIssue       sql.NullString `json:"temp_issue"`       // temp_issue
	TempEmailbills  sql.NullInt64  `json:"temp_emailbills"`  // temp_emailbills
	TempNomarketing sql.NullInt64  `json:"temp_nomarketing"` // temp_nomarketing
	TempEnteredby   sql.NullString `json:"temp_enteredby"`   // temp_enteredby
	TempEntereddate pq.NullTime    `json:"temp_entereddate"` // temp_entereddate
	TempEnteredtime pq.NullTime    `json:"temp_enteredtime"` // temp_enteredtime
	TempStatus      sql.NullString `json:"temp_status"`      // temp_status
	TempCustaccno   sql.NullString `json:"temp_custaccno"`   // temp_custaccno
	TempSparec2     sql.NullString `json:"temp_sparec2"`     // temp_sparec2
	TempSparec3     sql.NullString `json:"temp_sparec3"`     // temp_sparec3
	TempSpared1     pq.NullTime    `json:"temp_spared1"`     // temp_spared1
	TempSpared2     pq.NullTime    `json:"temp_spared2"`     // temp_spared2
	TempSpared3     pq.NullTime    `json:"temp_spared3"`     // temp_spared3
	TempNli         sql.NullInt64  `json:"temp_nli"`         // temp_nli
	TempCallback    sql.NullInt64  `json:"temp_callback"`    // temp_callback
	TempSparel3     sql.NullInt64  `json:"temp_sparel3"`     // temp_sparel3
	TempSparec1     sql.NullString `json:"temp_sparec1"`     // temp_sparec1
	TempNoofserv    sql.NullInt64  `json:"temp_noofserv"`    // temp_noofserv
	TempBc          sql.NullInt64  `json:"temp_bc"`          // temp_bc
	TempHp          sql.NullInt64  `json:"temp_hp"`          // temp_hp
	TempFp          sql.NullInt64  `json:"temp_fp"`          // temp_fp
	TempMob         sql.NullInt64  `json:"temp_mob"`         // temp_mob
	TempInt         sql.NullInt64  `json:"temp_int"`         // temp_int
	TempGas         sql.NullInt64  `json:"temp_gas"`         // temp_gas
	TempElec        sql.NullInt64  `json:"temp_elec"`        // temp_elec
	TempIP          sql.NullInt64  `json:"temp_ip"`          // temp_ip
	TempReason      sql.NullInt64  `json:"temp_reason"`      // temp_reason
	TempSparel4     sql.NullInt64  `json:"temp_sparel4"`     // temp_sparel4
	TempSparel5     sql.NullInt64  `json:"temp_sparel5"`     // temp_sparel5
	EquinoxLrn      int64          `json:"equinox_lrn"`      // equinox_lrn
	EquinoxSec      sql.NullInt64  `json:"equinox_sec"`      // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the TempCnx exists in the database.
func (tc *TempCnx) Exists() bool {
	return tc._exists
}

// Deleted provides information if the TempCnx has been deleted from the database.
func (tc *TempCnx) Deleted() bool {
	return tc._deleted
}

// Insert inserts the TempCnx to the database.
func (tc *TempCnx) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if tc._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.temp_cnx (` +
		`temp_refno, temp_reward, temp_custpostcod, temp_custadd1, temp_custadd2, temp_custadd3, temp_custadd4, temp_custadd5, temp_custni, temp_custver, temp_custinvadd, temp_title, temp_surname, temp_firstname, temp_accname, temp_ownertenant, temp_tenenddate, temp_tenclubleve, temp_dob, temp_homeno, temp_mobile, temp_email, temp_bankaccname, temp_banksortc, temp_bankaccno, temp_cardtype, temp_cardno, temp_startdate, temp_expdate, temp_issue, temp_emailbills, temp_nomarketing, temp_enteredby, temp_entereddate, temp_enteredtime, temp_status, temp_custaccno, temp_sparec2, temp_sparec3, temp_spared1, temp_spared2, temp_spared3, temp_nli, temp_callback, temp_sparel3, temp_sparec1, temp_noofserv, temp_bc, temp_hp, temp_fp, temp_mob, temp_int, temp_gas, temp_elec, temp_ip, temp_reason, temp_sparel4, temp_sparel5, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46, $47, $48, $49, $50, $51, $52, $53, $54, $55, $56, $57, $58, $59` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, tc.TempRefno, tc.TempReward, tc.TempCustpostcod, tc.TempCustadd1, tc.TempCustadd2, tc.TempCustadd3, tc.TempCustadd4, tc.TempCustadd5, tc.TempCustni, tc.TempCustver, tc.TempCustinvadd, tc.TempTitle, tc.TempSurname, tc.TempFirstname, tc.TempAccname, tc.TempOwnertenant, tc.TempTenenddate, tc.TempTenclubleve, tc.TempDob, tc.TempHomeno, tc.TempMobile, tc.TempEmail, tc.TempBankaccname, tc.TempBanksortc, tc.TempBankaccno, tc.TempCardtype, tc.TempCardno, tc.TempStartdate, tc.TempExpdate, tc.TempIssue, tc.TempEmailbills, tc.TempNomarketing, tc.TempEnteredby, tc.TempEntereddate, tc.TempEnteredtime, tc.TempStatus, tc.TempCustaccno, tc.TempSparec2, tc.TempSparec3, tc.TempSpared1, tc.TempSpared2, tc.TempSpared3, tc.TempNli, tc.TempCallback, tc.TempSparel3, tc.TempSparec1, tc.TempNoofserv, tc.TempBc, tc.TempHp, tc.TempFp, tc.TempMob, tc.TempInt, tc.TempGas, tc.TempElec, tc.TempIP, tc.TempReason, tc.TempSparel4, tc.TempSparel5, tc.EquinoxSec)
	err = db.QueryRow(sqlstr, tc.TempRefno, tc.TempReward, tc.TempCustpostcod, tc.TempCustadd1, tc.TempCustadd2, tc.TempCustadd3, tc.TempCustadd4, tc.TempCustadd5, tc.TempCustni, tc.TempCustver, tc.TempCustinvadd, tc.TempTitle, tc.TempSurname, tc.TempFirstname, tc.TempAccname, tc.TempOwnertenant, tc.TempTenenddate, tc.TempTenclubleve, tc.TempDob, tc.TempHomeno, tc.TempMobile, tc.TempEmail, tc.TempBankaccname, tc.TempBanksortc, tc.TempBankaccno, tc.TempCardtype, tc.TempCardno, tc.TempStartdate, tc.TempExpdate, tc.TempIssue, tc.TempEmailbills, tc.TempNomarketing, tc.TempEnteredby, tc.TempEntereddate, tc.TempEnteredtime, tc.TempStatus, tc.TempCustaccno, tc.TempSparec2, tc.TempSparec3, tc.TempSpared1, tc.TempSpared2, tc.TempSpared3, tc.TempNli, tc.TempCallback, tc.TempSparel3, tc.TempSparec1, tc.TempNoofserv, tc.TempBc, tc.TempHp, tc.TempFp, tc.TempMob, tc.TempInt, tc.TempGas, tc.TempElec, tc.TempIP, tc.TempReason, tc.TempSparel4, tc.TempSparel5, tc.EquinoxSec).Scan(&tc.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	tc._exists = true

	return nil
}

// Update updates the TempCnx in the database.
func (tc *TempCnx) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !tc._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if tc._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.temp_cnx SET (` +
		`temp_refno, temp_reward, temp_custpostcod, temp_custadd1, temp_custadd2, temp_custadd3, temp_custadd4, temp_custadd5, temp_custni, temp_custver, temp_custinvadd, temp_title, temp_surname, temp_firstname, temp_accname, temp_ownertenant, temp_tenenddate, temp_tenclubleve, temp_dob, temp_homeno, temp_mobile, temp_email, temp_bankaccname, temp_banksortc, temp_bankaccno, temp_cardtype, temp_cardno, temp_startdate, temp_expdate, temp_issue, temp_emailbills, temp_nomarketing, temp_enteredby, temp_entereddate, temp_enteredtime, temp_status, temp_custaccno, temp_sparec2, temp_sparec3, temp_spared1, temp_spared2, temp_spared3, temp_nli, temp_callback, temp_sparel3, temp_sparec1, temp_noofserv, temp_bc, temp_hp, temp_fp, temp_mob, temp_int, temp_gas, temp_elec, temp_ip, temp_reason, temp_sparel4, temp_sparel5, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46, $47, $48, $49, $50, $51, $52, $53, $54, $55, $56, $57, $58, $59` +
		`) WHERE equinox_lrn = $60`

	// run query
	XOLog(sqlstr, tc.TempRefno, tc.TempReward, tc.TempCustpostcod, tc.TempCustadd1, tc.TempCustadd2, tc.TempCustadd3, tc.TempCustadd4, tc.TempCustadd5, tc.TempCustni, tc.TempCustver, tc.TempCustinvadd, tc.TempTitle, tc.TempSurname, tc.TempFirstname, tc.TempAccname, tc.TempOwnertenant, tc.TempTenenddate, tc.TempTenclubleve, tc.TempDob, tc.TempHomeno, tc.TempMobile, tc.TempEmail, tc.TempBankaccname, tc.TempBanksortc, tc.TempBankaccno, tc.TempCardtype, tc.TempCardno, tc.TempStartdate, tc.TempExpdate, tc.TempIssue, tc.TempEmailbills, tc.TempNomarketing, tc.TempEnteredby, tc.TempEntereddate, tc.TempEnteredtime, tc.TempStatus, tc.TempCustaccno, tc.TempSparec2, tc.TempSparec3, tc.TempSpared1, tc.TempSpared2, tc.TempSpared3, tc.TempNli, tc.TempCallback, tc.TempSparel3, tc.TempSparec1, tc.TempNoofserv, tc.TempBc, tc.TempHp, tc.TempFp, tc.TempMob, tc.TempInt, tc.TempGas, tc.TempElec, tc.TempIP, tc.TempReason, tc.TempSparel4, tc.TempSparel5, tc.EquinoxSec, tc.EquinoxLrn)
	_, err = db.Exec(sqlstr, tc.TempRefno, tc.TempReward, tc.TempCustpostcod, tc.TempCustadd1, tc.TempCustadd2, tc.TempCustadd3, tc.TempCustadd4, tc.TempCustadd5, tc.TempCustni, tc.TempCustver, tc.TempCustinvadd, tc.TempTitle, tc.TempSurname, tc.TempFirstname, tc.TempAccname, tc.TempOwnertenant, tc.TempTenenddate, tc.TempTenclubleve, tc.TempDob, tc.TempHomeno, tc.TempMobile, tc.TempEmail, tc.TempBankaccname, tc.TempBanksortc, tc.TempBankaccno, tc.TempCardtype, tc.TempCardno, tc.TempStartdate, tc.TempExpdate, tc.TempIssue, tc.TempEmailbills, tc.TempNomarketing, tc.TempEnteredby, tc.TempEntereddate, tc.TempEnteredtime, tc.TempStatus, tc.TempCustaccno, tc.TempSparec2, tc.TempSparec3, tc.TempSpared1, tc.TempSpared2, tc.TempSpared3, tc.TempNli, tc.TempCallback, tc.TempSparel3, tc.TempSparec1, tc.TempNoofserv, tc.TempBc, tc.TempHp, tc.TempFp, tc.TempMob, tc.TempInt, tc.TempGas, tc.TempElec, tc.TempIP, tc.TempReason, tc.TempSparel4, tc.TempSparel5, tc.EquinoxSec, tc.EquinoxLrn)
	return err
}

// Save saves the TempCnx to the database.
func (tc *TempCnx) Save(db XODB) error {
	if tc.Exists() {
		return tc.Update(db)
	}

	return tc.Insert(db)
}

// Upsert performs an upsert for TempCnx.
//
// NOTE: PostgreSQL 9.5+ only
func (tc *TempCnx) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if tc._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.temp_cnx (` +
		`temp_refno, temp_reward, temp_custpostcod, temp_custadd1, temp_custadd2, temp_custadd3, temp_custadd4, temp_custadd5, temp_custni, temp_custver, temp_custinvadd, temp_title, temp_surname, temp_firstname, temp_accname, temp_ownertenant, temp_tenenddate, temp_tenclubleve, temp_dob, temp_homeno, temp_mobile, temp_email, temp_bankaccname, temp_banksortc, temp_bankaccno, temp_cardtype, temp_cardno, temp_startdate, temp_expdate, temp_issue, temp_emailbills, temp_nomarketing, temp_enteredby, temp_entereddate, temp_enteredtime, temp_status, temp_custaccno, temp_sparec2, temp_sparec3, temp_spared1, temp_spared2, temp_spared3, temp_nli, temp_callback, temp_sparel3, temp_sparec1, temp_noofserv, temp_bc, temp_hp, temp_fp, temp_mob, temp_int, temp_gas, temp_elec, temp_ip, temp_reason, temp_sparel4, temp_sparel5, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46, $47, $48, $49, $50, $51, $52, $53, $54, $55, $56, $57, $58, $59, $60` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`temp_refno, temp_reward, temp_custpostcod, temp_custadd1, temp_custadd2, temp_custadd3, temp_custadd4, temp_custadd5, temp_custni, temp_custver, temp_custinvadd, temp_title, temp_surname, temp_firstname, temp_accname, temp_ownertenant, temp_tenenddate, temp_tenclubleve, temp_dob, temp_homeno, temp_mobile, temp_email, temp_bankaccname, temp_banksortc, temp_bankaccno, temp_cardtype, temp_cardno, temp_startdate, temp_expdate, temp_issue, temp_emailbills, temp_nomarketing, temp_enteredby, temp_entereddate, temp_enteredtime, temp_status, temp_custaccno, temp_sparec2, temp_sparec3, temp_spared1, temp_spared2, temp_spared3, temp_nli, temp_callback, temp_sparel3, temp_sparec1, temp_noofserv, temp_bc, temp_hp, temp_fp, temp_mob, temp_int, temp_gas, temp_elec, temp_ip, temp_reason, temp_sparel4, temp_sparel5, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.temp_refno, EXCLUDED.temp_reward, EXCLUDED.temp_custpostcod, EXCLUDED.temp_custadd1, EXCLUDED.temp_custadd2, EXCLUDED.temp_custadd3, EXCLUDED.temp_custadd4, EXCLUDED.temp_custadd5, EXCLUDED.temp_custni, EXCLUDED.temp_custver, EXCLUDED.temp_custinvadd, EXCLUDED.temp_title, EXCLUDED.temp_surname, EXCLUDED.temp_firstname, EXCLUDED.temp_accname, EXCLUDED.temp_ownertenant, EXCLUDED.temp_tenenddate, EXCLUDED.temp_tenclubleve, EXCLUDED.temp_dob, EXCLUDED.temp_homeno, EXCLUDED.temp_mobile, EXCLUDED.temp_email, EXCLUDED.temp_bankaccname, EXCLUDED.temp_banksortc, EXCLUDED.temp_bankaccno, EXCLUDED.temp_cardtype, EXCLUDED.temp_cardno, EXCLUDED.temp_startdate, EXCLUDED.temp_expdate, EXCLUDED.temp_issue, EXCLUDED.temp_emailbills, EXCLUDED.temp_nomarketing, EXCLUDED.temp_enteredby, EXCLUDED.temp_entereddate, EXCLUDED.temp_enteredtime, EXCLUDED.temp_status, EXCLUDED.temp_custaccno, EXCLUDED.temp_sparec2, EXCLUDED.temp_sparec3, EXCLUDED.temp_spared1, EXCLUDED.temp_spared2, EXCLUDED.temp_spared3, EXCLUDED.temp_nli, EXCLUDED.temp_callback, EXCLUDED.temp_sparel3, EXCLUDED.temp_sparec1, EXCLUDED.temp_noofserv, EXCLUDED.temp_bc, EXCLUDED.temp_hp, EXCLUDED.temp_fp, EXCLUDED.temp_mob, EXCLUDED.temp_int, EXCLUDED.temp_gas, EXCLUDED.temp_elec, EXCLUDED.temp_ip, EXCLUDED.temp_reason, EXCLUDED.temp_sparel4, EXCLUDED.temp_sparel5, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, tc.TempRefno, tc.TempReward, tc.TempCustpostcod, tc.TempCustadd1, tc.TempCustadd2, tc.TempCustadd3, tc.TempCustadd4, tc.TempCustadd5, tc.TempCustni, tc.TempCustver, tc.TempCustinvadd, tc.TempTitle, tc.TempSurname, tc.TempFirstname, tc.TempAccname, tc.TempOwnertenant, tc.TempTenenddate, tc.TempTenclubleve, tc.TempDob, tc.TempHomeno, tc.TempMobile, tc.TempEmail, tc.TempBankaccname, tc.TempBanksortc, tc.TempBankaccno, tc.TempCardtype, tc.TempCardno, tc.TempStartdate, tc.TempExpdate, tc.TempIssue, tc.TempEmailbills, tc.TempNomarketing, tc.TempEnteredby, tc.TempEntereddate, tc.TempEnteredtime, tc.TempStatus, tc.TempCustaccno, tc.TempSparec2, tc.TempSparec3, tc.TempSpared1, tc.TempSpared2, tc.TempSpared3, tc.TempNli, tc.TempCallback, tc.TempSparel3, tc.TempSparec1, tc.TempNoofserv, tc.TempBc, tc.TempHp, tc.TempFp, tc.TempMob, tc.TempInt, tc.TempGas, tc.TempElec, tc.TempIP, tc.TempReason, tc.TempSparel4, tc.TempSparel5, tc.EquinoxLrn, tc.EquinoxSec)
	_, err = db.Exec(sqlstr, tc.TempRefno, tc.TempReward, tc.TempCustpostcod, tc.TempCustadd1, tc.TempCustadd2, tc.TempCustadd3, tc.TempCustadd4, tc.TempCustadd5, tc.TempCustni, tc.TempCustver, tc.TempCustinvadd, tc.TempTitle, tc.TempSurname, tc.TempFirstname, tc.TempAccname, tc.TempOwnertenant, tc.TempTenenddate, tc.TempTenclubleve, tc.TempDob, tc.TempHomeno, tc.TempMobile, tc.TempEmail, tc.TempBankaccname, tc.TempBanksortc, tc.TempBankaccno, tc.TempCardtype, tc.TempCardno, tc.TempStartdate, tc.TempExpdate, tc.TempIssue, tc.TempEmailbills, tc.TempNomarketing, tc.TempEnteredby, tc.TempEntereddate, tc.TempEnteredtime, tc.TempStatus, tc.TempCustaccno, tc.TempSparec2, tc.TempSparec3, tc.TempSpared1, tc.TempSpared2, tc.TempSpared3, tc.TempNli, tc.TempCallback, tc.TempSparel3, tc.TempSparec1, tc.TempNoofserv, tc.TempBc, tc.TempHp, tc.TempFp, tc.TempMob, tc.TempInt, tc.TempGas, tc.TempElec, tc.TempIP, tc.TempReason, tc.TempSparel4, tc.TempSparel5, tc.EquinoxLrn, tc.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	tc._exists = true

	return nil
}

// Delete deletes the TempCnx from the database.
func (tc *TempCnx) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !tc._exists {
		return nil
	}

	// if deleted, bail
	if tc._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.temp_cnx WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, tc.EquinoxLrn)
	_, err = db.Exec(sqlstr, tc.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	tc._deleted = true

	return nil
}

// TempCnxByEquinoxLrn retrieves a row from 'equinox.temp_cnx' as a TempCnx.
//
// Generated from index 'temp_cnx_pkey'.
func TempCnxByEquinoxLrn(db XODB, equinoxLrn int64) (*TempCnx, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`temp_refno, temp_reward, temp_custpostcod, temp_custadd1, temp_custadd2, temp_custadd3, temp_custadd4, temp_custadd5, temp_custni, temp_custver, temp_custinvadd, temp_title, temp_surname, temp_firstname, temp_accname, temp_ownertenant, temp_tenenddate, temp_tenclubleve, temp_dob, temp_homeno, temp_mobile, temp_email, temp_bankaccname, temp_banksortc, temp_bankaccno, temp_cardtype, temp_cardno, temp_startdate, temp_expdate, temp_issue, temp_emailbills, temp_nomarketing, temp_enteredby, temp_entereddate, temp_enteredtime, temp_status, temp_custaccno, temp_sparec2, temp_sparec3, temp_spared1, temp_spared2, temp_spared3, temp_nli, temp_callback, temp_sparel3, temp_sparec1, temp_noofserv, temp_bc, temp_hp, temp_fp, temp_mob, temp_int, temp_gas, temp_elec, temp_ip, temp_reason, temp_sparel4, temp_sparel5, equinox_lrn, equinox_sec ` +
		`FROM equinox.temp_cnx ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	tc := TempCnx{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&tc.TempRefno, &tc.TempReward, &tc.TempCustpostcod, &tc.TempCustadd1, &tc.TempCustadd2, &tc.TempCustadd3, &tc.TempCustadd4, &tc.TempCustadd5, &tc.TempCustni, &tc.TempCustver, &tc.TempCustinvadd, &tc.TempTitle, &tc.TempSurname, &tc.TempFirstname, &tc.TempAccname, &tc.TempOwnertenant, &tc.TempTenenddate, &tc.TempTenclubleve, &tc.TempDob, &tc.TempHomeno, &tc.TempMobile, &tc.TempEmail, &tc.TempBankaccname, &tc.TempBanksortc, &tc.TempBankaccno, &tc.TempCardtype, &tc.TempCardno, &tc.TempStartdate, &tc.TempExpdate, &tc.TempIssue, &tc.TempEmailbills, &tc.TempNomarketing, &tc.TempEnteredby, &tc.TempEntereddate, &tc.TempEnteredtime, &tc.TempStatus, &tc.TempCustaccno, &tc.TempSparec2, &tc.TempSparec3, &tc.TempSpared1, &tc.TempSpared2, &tc.TempSpared3, &tc.TempNli, &tc.TempCallback, &tc.TempSparel3, &tc.TempSparec1, &tc.TempNoofserv, &tc.TempBc, &tc.TempHp, &tc.TempFp, &tc.TempMob, &tc.TempInt, &tc.TempGas, &tc.TempElec, &tc.TempIP, &tc.TempReason, &tc.TempSparel4, &tc.TempSparel5, &tc.EquinoxLrn, &tc.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &tc, nil
}
