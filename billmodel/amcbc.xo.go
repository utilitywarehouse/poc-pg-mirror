// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/lib/pq"
)

// Amcbc represents a row from 'equinox.amcbc'.
type Amcbc struct {
	Amcbcdatefrom    pq.NullTime     `json:"amcbcdatefrom"`    // amcbcdatefrom
	Amcbcdateto      pq.NullTime     `json:"amcbcdateto"`      // amcbcdateto
	Amcbcpercent     sql.NullFloat64 `json:"amcbcpercent"`     // amcbcpercent
	Amcbcpercentearn sql.NullFloat64 `json:"amcbcpercentearn"` // amcbcpercentearn
	Amcbcminspend    sql.NullFloat64 `json:"amcbcminspend"`    // amcbcminspend
	Amcbcmaxspend    sql.NullFloat64 `json:"amcbcmaxspend"`    // amcbcmaxspend
	EquinoxPrn       sql.NullInt64   `json:"equinox_prn"`      // equinox_prn
	EquinoxLrn       int64           `json:"equinox_lrn"`      // equinox_lrn
	EquinoxSec       sql.NullInt64   `json:"equinox_sec"`      // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Amcbc exists in the database.
func (a *Amcbc) Exists() bool {
	return a._exists
}

// Deleted provides information if the Amcbc has been deleted from the database.
func (a *Amcbc) Deleted() bool {
	return a._deleted
}

// Insert inserts the Amcbc to the database.
func (a *Amcbc) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if a._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.amcbc (` +
		`amcbcdatefrom, amcbcdateto, amcbcpercent, amcbcpercentearn, amcbcminspend, amcbcmaxspend, equinox_prn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, a.Amcbcdatefrom, a.Amcbcdateto, a.Amcbcpercent, a.Amcbcpercentearn, a.Amcbcminspend, a.Amcbcmaxspend, a.EquinoxPrn, a.EquinoxSec)
	err = db.QueryRow(sqlstr, a.Amcbcdatefrom, a.Amcbcdateto, a.Amcbcpercent, a.Amcbcpercentearn, a.Amcbcminspend, a.Amcbcmaxspend, a.EquinoxPrn, a.EquinoxSec).Scan(&a.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	a._exists = true

	return nil
}

// Update updates the Amcbc in the database.
func (a *Amcbc) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !a._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if a._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.amcbc SET (` +
		`amcbcdatefrom, amcbcdateto, amcbcpercent, amcbcpercentearn, amcbcminspend, amcbcmaxspend, equinox_prn, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`) WHERE equinox_lrn = $9`

	// run query
	XOLog(sqlstr, a.Amcbcdatefrom, a.Amcbcdateto, a.Amcbcpercent, a.Amcbcpercentearn, a.Amcbcminspend, a.Amcbcmaxspend, a.EquinoxPrn, a.EquinoxSec, a.EquinoxLrn)
	_, err = db.Exec(sqlstr, a.Amcbcdatefrom, a.Amcbcdateto, a.Amcbcpercent, a.Amcbcpercentearn, a.Amcbcminspend, a.Amcbcmaxspend, a.EquinoxPrn, a.EquinoxSec, a.EquinoxLrn)
	return err
}

// Save saves the Amcbc to the database.
func (a *Amcbc) Save(db XODB) error {
	if a.Exists() {
		return a.Update(db)
	}

	return a.Insert(db)
}

// Upsert performs an upsert for Amcbc.
//
// NOTE: PostgreSQL 9.5+ only
func (a *Amcbc) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if a._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.amcbc (` +
		`amcbcdatefrom, amcbcdateto, amcbcpercent, amcbcpercentearn, amcbcminspend, amcbcmaxspend, equinox_prn, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`amcbcdatefrom, amcbcdateto, amcbcpercent, amcbcpercentearn, amcbcminspend, amcbcmaxspend, equinox_prn, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.amcbcdatefrom, EXCLUDED.amcbcdateto, EXCLUDED.amcbcpercent, EXCLUDED.amcbcpercentearn, EXCLUDED.amcbcminspend, EXCLUDED.amcbcmaxspend, EXCLUDED.equinox_prn, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, a.Amcbcdatefrom, a.Amcbcdateto, a.Amcbcpercent, a.Amcbcpercentearn, a.Amcbcminspend, a.Amcbcmaxspend, a.EquinoxPrn, a.EquinoxLrn, a.EquinoxSec)
	_, err = db.Exec(sqlstr, a.Amcbcdatefrom, a.Amcbcdateto, a.Amcbcpercent, a.Amcbcpercentearn, a.Amcbcminspend, a.Amcbcmaxspend, a.EquinoxPrn, a.EquinoxLrn, a.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	a._exists = true

	return nil
}

// Delete deletes the Amcbc from the database.
func (a *Amcbc) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !a._exists {
		return nil
	}

	// if deleted, bail
	if a._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.amcbc WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, a.EquinoxLrn)
	_, err = db.Exec(sqlstr, a.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	a._deleted = true

	return nil
}

// AmcbcByEquinoxLrn retrieves a row from 'equinox.amcbc' as a Amcbc.
//
// Generated from index 'amcbc_pkey'.
func AmcbcByEquinoxLrn(db XODB, equinoxLrn int64) (*Amcbc, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`amcbcdatefrom, amcbcdateto, amcbcpercent, amcbcpercentearn, amcbcminspend, amcbcmaxspend, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.amcbc ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	a := Amcbc{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&a.Amcbcdatefrom, &a.Amcbcdateto, &a.Amcbcpercent, &a.Amcbcpercentearn, &a.Amcbcminspend, &a.Amcbcmaxspend, &a.EquinoxPrn, &a.EquinoxLrn, &a.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &a, nil
}
