// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import "database/sql"

// Pbssplit represents a row from 'equinox.pbssplit'.
type Pbssplit struct {
	Pbsinvoiceno    sql.NullFloat64 `json:"pbsinvoiceno"`    // pbsinvoiceno
	Pbsaccountno    sql.NullString  `json:"pbsaccountno"`    // pbsaccountno
	Pbsamount       sql.NullFloat64 `json:"pbsamount"`       // pbsamount
	PbsAuniquesys   sql.NullFloat64 `json:"pbs_auniquesys"`  // pbs_auniquesys
	Pbsstatus       sql.NullString  `json:"pbsstatus"`       // pbsstatus
	Pbscliservice   sql.NullString  `json:"pbscliservice"`   // pbscliservice
	Pbscliuniquesys sql.NullFloat64 `json:"pbscliuniquesys"` // pbscliuniquesys
	EquinoxPrn      sql.NullInt64   `json:"equinox_prn"`     // equinox_prn
	EquinoxLrn      int64           `json:"equinox_lrn"`     // equinox_lrn
	EquinoxSec      sql.NullInt64   `json:"equinox_sec"`     // equinox_sec
}

func AllPbssplit(db XODB, callback func(x Pbssplit) bool) error {

	// sql query
	const sqlstr = `SELECT ` +
		`pbsinvoiceno, pbsaccountno, pbsamount, pbs_auniquesys, pbsstatus, pbscliservice, pbscliuniquesys, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.pbssplit `

	q, err := db.Query(sqlstr)

	if err != nil {
		return err
	}
	defer q.Close()

	// load results
	for q.Next() {
		p := Pbssplit{}

		// scan
		err = q.Scan(&p.Pbsinvoiceno, &p.Pbsaccountno, &p.Pbsamount, &p.PbsAuniquesys, &p.Pbsstatus, &p.Pbscliservice, &p.Pbscliuniquesys, &p.EquinoxPrn, &p.EquinoxLrn, &p.EquinoxSec)
		if err != nil {
			return err
		}
		if !callback(p) {
			return nil
		}
	}

	return nil
}

// PbssplitByEquinoxLrn retrieves a row from 'equinox.pbssplit' as a Pbssplit.
//
// Generated from index 'pbssplit_pkey'.
func PbssplitByEquinoxLrn(db XODB, equinoxLrn int64) (*Pbssplit, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`pbsinvoiceno, pbsaccountno, pbsamount, pbs_auniquesys, pbsstatus, pbscliservice, pbscliuniquesys, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.pbssplit ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	p := Pbssplit{}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&p.Pbsinvoiceno, &p.Pbsaccountno, &p.Pbsamount, &p.PbsAuniquesys, &p.Pbsstatus, &p.Pbscliservice, &p.Pbscliuniquesys, &p.EquinoxPrn, &p.EquinoxLrn, &p.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &p, nil
}
