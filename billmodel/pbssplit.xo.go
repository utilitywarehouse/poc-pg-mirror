// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// Pbssplit represents a row from 'equinox.pbssplit'.
type Pbssplit struct {
	Pbsinvoiceno    sql.NullFloat64 `json:"pbsinvoiceno"`    // pbsinvoiceno
	Pbsaccountno    sql.NullString  `json:"pbsaccountno"`    // pbsaccountno
	Pbsamount       sql.NullFloat64 `json:"pbsamount"`       // pbsamount
	PbsAuniquesys   sql.NullFloat64 `json:"pbs_auniquesys"`  // pbs_auniquesys
	Pbsstatus       sql.NullString  `json:"pbsstatus"`       // pbsstatus
	Pbscliservice   sql.NullString  `json:"pbscliservice"`   // pbscliservice
	Pbscliuniquesys sql.NullFloat64 `json:"pbscliuniquesys"` // pbscliuniquesys
	EquinoxPrn      sql.NullInt64   `json:"equinox_prn"`     // equinox_prn
	EquinoxLrn      int64           `json:"equinox_lrn"`     // equinox_lrn
	EquinoxSec      sql.NullInt64   `json:"equinox_sec"`     // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Pbssplit exists in the database.
func (p *Pbssplit) Exists() bool {
	return p._exists
}

// Deleted provides information if the Pbssplit has been deleted from the database.
func (p *Pbssplit) Deleted() bool {
	return p._deleted
}

// Insert inserts the Pbssplit to the database.
func (p *Pbssplit) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if p._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.pbssplit (` +
		`pbsinvoiceno, pbsaccountno, pbsamount, pbs_auniquesys, pbsstatus, pbscliservice, pbscliuniquesys, equinox_prn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, p.Pbsinvoiceno, p.Pbsaccountno, p.Pbsamount, p.PbsAuniquesys, p.Pbsstatus, p.Pbscliservice, p.Pbscliuniquesys, p.EquinoxPrn, p.EquinoxSec)
	err = db.QueryRow(sqlstr, p.Pbsinvoiceno, p.Pbsaccountno, p.Pbsamount, p.PbsAuniquesys, p.Pbsstatus, p.Pbscliservice, p.Pbscliuniquesys, p.EquinoxPrn, p.EquinoxSec).Scan(&p.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	p._exists = true

	return nil
}

// Update updates the Pbssplit in the database.
func (p *Pbssplit) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if p._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.pbssplit SET (` +
		`pbsinvoiceno, pbsaccountno, pbsamount, pbs_auniquesys, pbsstatus, pbscliservice, pbscliuniquesys, equinox_prn, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9` +
		`) WHERE equinox_lrn = $10`

	// run query
	XOLog(sqlstr, p.Pbsinvoiceno, p.Pbsaccountno, p.Pbsamount, p.PbsAuniquesys, p.Pbsstatus, p.Pbscliservice, p.Pbscliuniquesys, p.EquinoxPrn, p.EquinoxSec, p.EquinoxLrn)
	_, err = db.Exec(sqlstr, p.Pbsinvoiceno, p.Pbsaccountno, p.Pbsamount, p.PbsAuniquesys, p.Pbsstatus, p.Pbscliservice, p.Pbscliuniquesys, p.EquinoxPrn, p.EquinoxSec, p.EquinoxLrn)
	return err
}

// Save saves the Pbssplit to the database.
func (p *Pbssplit) Save(db XODB) error {
	if p.Exists() {
		return p.Update(db)
	}

	return p.Insert(db)
}

// Upsert performs an upsert for Pbssplit.
//
// NOTE: PostgreSQL 9.5+ only
func (p *Pbssplit) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if p._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.pbssplit (` +
		`pbsinvoiceno, pbsaccountno, pbsamount, pbs_auniquesys, pbsstatus, pbscliservice, pbscliuniquesys, equinox_prn, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`pbsinvoiceno, pbsaccountno, pbsamount, pbs_auniquesys, pbsstatus, pbscliservice, pbscliuniquesys, equinox_prn, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.pbsinvoiceno, EXCLUDED.pbsaccountno, EXCLUDED.pbsamount, EXCLUDED.pbs_auniquesys, EXCLUDED.pbsstatus, EXCLUDED.pbscliservice, EXCLUDED.pbscliuniquesys, EXCLUDED.equinox_prn, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, p.Pbsinvoiceno, p.Pbsaccountno, p.Pbsamount, p.PbsAuniquesys, p.Pbsstatus, p.Pbscliservice, p.Pbscliuniquesys, p.EquinoxPrn, p.EquinoxLrn, p.EquinoxSec)
	_, err = db.Exec(sqlstr, p.Pbsinvoiceno, p.Pbsaccountno, p.Pbsamount, p.PbsAuniquesys, p.Pbsstatus, p.Pbscliservice, p.Pbscliuniquesys, p.EquinoxPrn, p.EquinoxLrn, p.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	p._exists = true

	return nil
}

// Delete deletes the Pbssplit from the database.
func (p *Pbssplit) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return nil
	}

	// if deleted, bail
	if p._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.pbssplit WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, p.EquinoxLrn)
	_, err = db.Exec(sqlstr, p.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	p._deleted = true

	return nil
}

// PbssplitByEquinoxLrn retrieves a row from 'equinox.pbssplit' as a Pbssplit.
//
// Generated from index 'pbssplit_pkey'.
func PbssplitByEquinoxLrn(db XODB, equinoxLrn int64) (*Pbssplit, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`pbsinvoiceno, pbsaccountno, pbsamount, pbs_auniquesys, pbsstatus, pbscliservice, pbscliuniquesys, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.pbssplit ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	p := Pbssplit{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&p.Pbsinvoiceno, &p.Pbsaccountno, &p.Pbsamount, &p.PbsAuniquesys, &p.Pbsstatus, &p.Pbscliservice, &p.Pbscliuniquesys, &p.EquinoxPrn, &p.EquinoxLrn, &p.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &p, nil
}
