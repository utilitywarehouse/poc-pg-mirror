// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"

	"github.com/lib/pq"
)

// Ppmeter represents a row from 'equinox.ppmeters'.
type Ppmeter struct {
	Prepaystaticid   sql.NullString  `json:"prepaystaticid"`   // prepaystaticid
	Prepaycustid     sql.NullString  `json:"prepaycustid"`     // prepaycustid
	Prepaysupref     sql.NullString  `json:"prepaysupref"`     // prepaysupref
	Prepaymeterno    sql.NullString  `json:"prepaymeterno"`    // prepaymeterno
	Prepaympr        sql.NullString  `json:"prepaympr"`        // prepaympr
	Prepaystartdate  pq.NullTime     `json:"prepaystartdate"`  // prepaystartdate
	Prepayenddate    pq.NullTime     `json:"prepayenddate"`    // prepayenddate
	Prepaycustaccno  sql.NullString  `json:"prepaycustaccno"`  // prepaycustaccno
	Prepaygref       sql.NullString  `json:"prepaygref"`       // prepaygref
	Prepaycustdebt   sql.NullFloat64 `json:"prepaycustdebt"`   // prepaycustdebt
	Prepaytype       sql.NullString  `json:"prepaytype"`       // prepaytype
	Prepaystatus     sql.NullString  `json:"prepaystatus"`     // prepaystatus
	Prepayoridebt    sql.NullFloat64 `json:"prepayoridebt"`    // prepayoridebt
	Prepaynowdebt    sql.NullFloat64 `json:"prepaynowdebt"`    // prepaynowdebt
	Prepayorinondebt sql.NullFloat64 `json:"prepayorinondebt"` // prepayorinondebt
	Prepaynownondebt sql.NullFloat64 `json:"prepaynownondebt"` // prepaynownondebt
	Prepayrecrate    sql.NullFloat64 `json:"prepayrecrate"`    // prepayrecrate
	Prepayrecdate    pq.NullTime     `json:"prepayrecdate"`    // prepayrecdate
	Prepayecused     sql.NullFloat64 `json:"prepayecused"`     // prepayecused
	Prepaysparec1    sql.NullString  `json:"prepaysparec1"`    // prepaysparec1
	Prepaysaprec2    sql.NullString  `json:"prepaysaprec2"`    // prepaysaprec2
	Prepaysparen1    sql.NullFloat64 `json:"prepaysparen1"`    // prepaysparen1
	Prepayspared1    pq.NullTime     `json:"prepayspared1"`    // prepayspared1
	EquinoxLrn       int64           `json:"equinox_lrn"`      // equinox_lrn
	EquinoxSec       sql.NullInt64   `json:"equinox_sec"`      // equinox_sec
}

func AllPpmeter(db XODB, callback func(x Ppmeter) bool) error {

	// sql query
	const sqlstr = `SELECT ` +
		`prepaystaticid, prepaycustid, prepaysupref, prepaymeterno, prepaympr, prepaystartdate, prepayenddate, prepaycustaccno, prepaygref, prepaycustdebt, prepaytype, prepaystatus, prepayoridebt, prepaynowdebt, prepayorinondebt, prepaynownondebt, prepayrecrate, prepayrecdate, prepayecused, prepaysparec1, prepaysaprec2, prepaysparen1, prepayspared1, equinox_lrn, equinox_sec ` +
		`FROM equinox.ppmeters `

	q, err := db.Query(sqlstr)

	if err != nil {
		return err
	}
	defer q.Close()

	// load results
	for q.Next() {
		p := Ppmeter{}

		// scan
		err = q.Scan(&p.Prepaystaticid, &p.Prepaycustid, &p.Prepaysupref, &p.Prepaymeterno, &p.Prepaympr, &p.Prepaystartdate, &p.Prepayenddate, &p.Prepaycustaccno, &p.Prepaygref, &p.Prepaycustdebt, &p.Prepaytype, &p.Prepaystatus, &p.Prepayoridebt, &p.Prepaynowdebt, &p.Prepayorinondebt, &p.Prepaynownondebt, &p.Prepayrecrate, &p.Prepayrecdate, &p.Prepayecused, &p.Prepaysparec1, &p.Prepaysaprec2, &p.Prepaysparen1, &p.Prepayspared1, &p.EquinoxLrn, &p.EquinoxSec)
		if err != nil {
			return err
		}
		if !callback(p) {
			return nil
		}
	}

	return nil
}

// PpmeterByEquinoxLrn retrieves a row from 'equinox.ppmeters' as a Ppmeter.
//
// Generated from index 'ppmeters_pkey'.
func PpmeterByEquinoxLrn(db XODB, equinoxLrn int64) (*Ppmeter, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`prepaystaticid, prepaycustid, prepaysupref, prepaymeterno, prepaympr, prepaystartdate, prepayenddate, prepaycustaccno, prepaygref, prepaycustdebt, prepaytype, prepaystatus, prepayoridebt, prepaynowdebt, prepayorinondebt, prepaynownondebt, prepayrecrate, prepayrecdate, prepayecused, prepaysparec1, prepaysaprec2, prepaysparen1, prepayspared1, equinox_lrn, equinox_sec ` +
		`FROM equinox.ppmeters ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	p := Ppmeter{}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&p.Prepaystaticid, &p.Prepaycustid, &p.Prepaysupref, &p.Prepaymeterno, &p.Prepaympr, &p.Prepaystartdate, &p.Prepayenddate, &p.Prepaycustaccno, &p.Prepaygref, &p.Prepaycustdebt, &p.Prepaytype, &p.Prepaystatus, &p.Prepayoridebt, &p.Prepaynowdebt, &p.Prepayorinondebt, &p.Prepaynownondebt, &p.Prepayrecrate, &p.Prepayrecdate, &p.Prepayecused, &p.Prepaysparec1, &p.Prepaysaprec2, &p.Prepaysparen1, &p.Prepayspared1, &p.EquinoxLrn, &p.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &p, nil
}
