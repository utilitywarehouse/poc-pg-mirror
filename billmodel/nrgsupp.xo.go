// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// Nrgsupp represents a row from 'equinox.nrgsupp'.
type Nrgsupp struct {
	NrgSuppliercode sql.NullString `json:"nrg_suppliercode"` // nrg_suppliercode
	NrgSuppliername sql.NullString `json:"nrg_suppliername"` // nrg_suppliername
	NrgDefunct      sql.NullInt64  `json:"nrg_defunct"`      // nrg_defunct
	NrgMarketagent  sql.NullString `json:"nrg_marketagent"`  // nrg_marketagent
	NrgPrePay       sql.NullInt64  `json:"nrg_pre_pay"`      // nrg_pre_pay
	NrgBusinesssupp sql.NullInt64  `json:"nrg_businesssupp"` // nrg_businesssupp
	EquinoxLrn      int64          `json:"equinox_lrn"`      // equinox_lrn
	EquinoxSec      sql.NullInt64  `json:"equinox_sec"`      // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Nrgsupp exists in the database.
func (n *Nrgsupp) Exists() bool {
	return n._exists
}

// Deleted provides information if the Nrgsupp has been deleted from the database.
func (n *Nrgsupp) Deleted() bool {
	return n._deleted
}

// Insert inserts the Nrgsupp to the database.
func (n *Nrgsupp) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if n._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.nrgsupp (` +
		`nrg_suppliercode, nrg_suppliername, nrg_defunct, nrg_marketagent, nrg_pre_pay, nrg_businesssupp, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, n.NrgSuppliercode, n.NrgSuppliername, n.NrgDefunct, n.NrgMarketagent, n.NrgPrePay, n.NrgBusinesssupp, n.EquinoxSec)
	err = db.QueryRow(sqlstr, n.NrgSuppliercode, n.NrgSuppliername, n.NrgDefunct, n.NrgMarketagent, n.NrgPrePay, n.NrgBusinesssupp, n.EquinoxSec).Scan(&n.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	n._exists = true

	return nil
}

// Update updates the Nrgsupp in the database.
func (n *Nrgsupp) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !n._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if n._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.nrgsupp SET (` +
		`nrg_suppliercode, nrg_suppliername, nrg_defunct, nrg_marketagent, nrg_pre_pay, nrg_businesssupp, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`) WHERE equinox_lrn = $8`

	// run query
	XOLog(sqlstr, n.NrgSuppliercode, n.NrgSuppliername, n.NrgDefunct, n.NrgMarketagent, n.NrgPrePay, n.NrgBusinesssupp, n.EquinoxSec, n.EquinoxLrn)
	_, err = db.Exec(sqlstr, n.NrgSuppliercode, n.NrgSuppliername, n.NrgDefunct, n.NrgMarketagent, n.NrgPrePay, n.NrgBusinesssupp, n.EquinoxSec, n.EquinoxLrn)
	return err
}

// Save saves the Nrgsupp to the database.
func (n *Nrgsupp) Save(db XODB) error {
	if n.Exists() {
		return n.Update(db)
	}

	return n.Insert(db)
}

// Upsert performs an upsert for Nrgsupp.
//
// NOTE: PostgreSQL 9.5+ only
func (n *Nrgsupp) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if n._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.nrgsupp (` +
		`nrg_suppliercode, nrg_suppliername, nrg_defunct, nrg_marketagent, nrg_pre_pay, nrg_businesssupp, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`nrg_suppliercode, nrg_suppliername, nrg_defunct, nrg_marketagent, nrg_pre_pay, nrg_businesssupp, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.nrg_suppliercode, EXCLUDED.nrg_suppliername, EXCLUDED.nrg_defunct, EXCLUDED.nrg_marketagent, EXCLUDED.nrg_pre_pay, EXCLUDED.nrg_businesssupp, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, n.NrgSuppliercode, n.NrgSuppliername, n.NrgDefunct, n.NrgMarketagent, n.NrgPrePay, n.NrgBusinesssupp, n.EquinoxLrn, n.EquinoxSec)
	_, err = db.Exec(sqlstr, n.NrgSuppliercode, n.NrgSuppliername, n.NrgDefunct, n.NrgMarketagent, n.NrgPrePay, n.NrgBusinesssupp, n.EquinoxLrn, n.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	n._exists = true

	return nil
}

// Delete deletes the Nrgsupp from the database.
func (n *Nrgsupp) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !n._exists {
		return nil
	}

	// if deleted, bail
	if n._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.nrgsupp WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, n.EquinoxLrn)
	_, err = db.Exec(sqlstr, n.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	n._deleted = true

	return nil
}

// NrgsuppByEquinoxLrn retrieves a row from 'equinox.nrgsupp' as a Nrgsupp.
//
// Generated from index 'nrgsupp_pkey'.
func NrgsuppByEquinoxLrn(db XODB, equinoxLrn int64) (*Nrgsupp, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`nrg_suppliercode, nrg_suppliername, nrg_defunct, nrg_marketagent, nrg_pre_pay, nrg_businesssupp, equinox_lrn, equinox_sec ` +
		`FROM equinox.nrgsupp ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	n := Nrgsupp{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&n.NrgSuppliercode, &n.NrgSuppliername, &n.NrgDefunct, &n.NrgMarketagent, &n.NrgPrePay, &n.NrgBusinesssupp, &n.EquinoxLrn, &n.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &n, nil
}
