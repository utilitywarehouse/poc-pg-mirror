// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// Mam represents a row from 'equinox.mam'.
type Mam struct {
	Mamid           sql.NullString `json:"mamid"`           // mamid
	Mamname         sql.NullString `json:"mamname"`         // mamname
	Mamneedfiles    sql.NullInt64  `json:"mamneedfiles"`    // mamneedfiles
	Mamixlink       sql.NullInt64  `json:"mamixlink"`       // mamixlink
	Mamemail        sql.NullInt64  `json:"mamemail"`        // mamemail
	Mameaddress     sql.NullString `json:"mameaddress"`     // mameaddress
	Mamthirdparty   sql.NullInt64  `json:"mamthirdparty"`   // mamthirdparty
	Mamthirdpartyid sql.NullString `json:"mamthirdpartyid"` // mamthirdpartyid
	Mamfileno       sql.NullInt64  `json:"mamfileno"`       // mamfileno
	Mamnumber       sql.NullInt64  `json:"mamnumber"`       // mamnumber
	Mamcontractref  sql.NullString `json:"mamcontractref"`  // mamcontractref
	Mamnode         sql.NullString `json:"mamnode"`         // mamnode
	EquinoxLrn      int64          `json:"equinox_lrn"`     // equinox_lrn
	EquinoxSec      sql.NullInt64  `json:"equinox_sec"`     // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Mam exists in the database.
func (m *Mam) Exists() bool {
	return m._exists
}

// Deleted provides information if the Mam has been deleted from the database.
func (m *Mam) Deleted() bool {
	return m._deleted
}

// Insert inserts the Mam to the database.
func (m *Mam) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if m._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.mam (` +
		`mamid, mamname, mamneedfiles, mamixlink, mamemail, mameaddress, mamthirdparty, mamthirdpartyid, mamfileno, mamnumber, mamcontractref, mamnode, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, m.Mamid, m.Mamname, m.Mamneedfiles, m.Mamixlink, m.Mamemail, m.Mameaddress, m.Mamthirdparty, m.Mamthirdpartyid, m.Mamfileno, m.Mamnumber, m.Mamcontractref, m.Mamnode, m.EquinoxSec)
	err = db.QueryRow(sqlstr, m.Mamid, m.Mamname, m.Mamneedfiles, m.Mamixlink, m.Mamemail, m.Mameaddress, m.Mamthirdparty, m.Mamthirdpartyid, m.Mamfileno, m.Mamnumber, m.Mamcontractref, m.Mamnode, m.EquinoxSec).Scan(&m.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	m._exists = true

	return nil
}

// Update updates the Mam in the database.
func (m *Mam) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !m._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if m._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.mam SET (` +
		`mamid, mamname, mamneedfiles, mamixlink, mamemail, mameaddress, mamthirdparty, mamthirdpartyid, mamfileno, mamnumber, mamcontractref, mamnode, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13` +
		`) WHERE equinox_lrn = $14`

	// run query
	XOLog(sqlstr, m.Mamid, m.Mamname, m.Mamneedfiles, m.Mamixlink, m.Mamemail, m.Mameaddress, m.Mamthirdparty, m.Mamthirdpartyid, m.Mamfileno, m.Mamnumber, m.Mamcontractref, m.Mamnode, m.EquinoxSec, m.EquinoxLrn)
	_, err = db.Exec(sqlstr, m.Mamid, m.Mamname, m.Mamneedfiles, m.Mamixlink, m.Mamemail, m.Mameaddress, m.Mamthirdparty, m.Mamthirdpartyid, m.Mamfileno, m.Mamnumber, m.Mamcontractref, m.Mamnode, m.EquinoxSec, m.EquinoxLrn)
	return err
}

// Save saves the Mam to the database.
func (m *Mam) Save(db XODB) error {
	if m.Exists() {
		return m.Update(db)
	}

	return m.Insert(db)
}

// Upsert performs an upsert for Mam.
//
// NOTE: PostgreSQL 9.5+ only
func (m *Mam) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if m._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.mam (` +
		`mamid, mamname, mamneedfiles, mamixlink, mamemail, mameaddress, mamthirdparty, mamthirdpartyid, mamfileno, mamnumber, mamcontractref, mamnode, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`mamid, mamname, mamneedfiles, mamixlink, mamemail, mameaddress, mamthirdparty, mamthirdpartyid, mamfileno, mamnumber, mamcontractref, mamnode, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.mamid, EXCLUDED.mamname, EXCLUDED.mamneedfiles, EXCLUDED.mamixlink, EXCLUDED.mamemail, EXCLUDED.mameaddress, EXCLUDED.mamthirdparty, EXCLUDED.mamthirdpartyid, EXCLUDED.mamfileno, EXCLUDED.mamnumber, EXCLUDED.mamcontractref, EXCLUDED.mamnode, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, m.Mamid, m.Mamname, m.Mamneedfiles, m.Mamixlink, m.Mamemail, m.Mameaddress, m.Mamthirdparty, m.Mamthirdpartyid, m.Mamfileno, m.Mamnumber, m.Mamcontractref, m.Mamnode, m.EquinoxLrn, m.EquinoxSec)
	_, err = db.Exec(sqlstr, m.Mamid, m.Mamname, m.Mamneedfiles, m.Mamixlink, m.Mamemail, m.Mameaddress, m.Mamthirdparty, m.Mamthirdpartyid, m.Mamfileno, m.Mamnumber, m.Mamcontractref, m.Mamnode, m.EquinoxLrn, m.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	m._exists = true

	return nil
}

// Delete deletes the Mam from the database.
func (m *Mam) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !m._exists {
		return nil
	}

	// if deleted, bail
	if m._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.mam WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, m.EquinoxLrn)
	_, err = db.Exec(sqlstr, m.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	m._deleted = true

	return nil
}

// MamByEquinoxLrn retrieves a row from 'equinox.mam' as a Mam.
//
// Generated from index 'mam_pkey'.
func MamByEquinoxLrn(db XODB, equinoxLrn int64) (*Mam, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`mamid, mamname, mamneedfiles, mamixlink, mamemail, mameaddress, mamthirdparty, mamthirdpartyid, mamfileno, mamnumber, mamcontractref, mamnode, equinox_lrn, equinox_sec ` +
		`FROM equinox.mam ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	m := Mam{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&m.Mamid, &m.Mamname, &m.Mamneedfiles, &m.Mamixlink, &m.Mamemail, &m.Mameaddress, &m.Mamthirdparty, &m.Mamthirdpartyid, &m.Mamfileno, &m.Mamnumber, &m.Mamcontractref, &m.Mamnode, &m.EquinoxLrn, &m.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &m, nil
}
