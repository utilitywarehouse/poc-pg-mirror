// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// Deptmnt represents a row from 'equinox.deptmnt'.
type Deptmnt struct {
	Deptno     sql.NullInt64  `json:"deptno"`      // deptno
	Deptname   sql.NullString `json:"deptname"`    // deptname
	Deptaccess sql.NullInt64  `json:"deptaccess"`  // deptaccess
	EquinoxLrn int64          `json:"equinox_lrn"` // equinox_lrn
	EquinoxSec sql.NullInt64  `json:"equinox_sec"` // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Deptmnt exists in the database.
func (d *Deptmnt) Exists() bool {
	return d._exists
}

// Deleted provides information if the Deptmnt has been deleted from the database.
func (d *Deptmnt) Deleted() bool {
	return d._deleted
}

// Insert inserts the Deptmnt to the database.
func (d *Deptmnt) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if d._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.deptmnt (` +
		`deptno, deptname, deptaccess, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, d.Deptno, d.Deptname, d.Deptaccess, d.EquinoxSec)
	err = db.QueryRow(sqlstr, d.Deptno, d.Deptname, d.Deptaccess, d.EquinoxSec).Scan(&d.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	d._exists = true

	return nil
}

// Update updates the Deptmnt in the database.
func (d *Deptmnt) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !d._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if d._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.deptmnt SET (` +
		`deptno, deptname, deptaccess, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4` +
		`) WHERE equinox_lrn = $5`

	// run query
	XOLog(sqlstr, d.Deptno, d.Deptname, d.Deptaccess, d.EquinoxSec, d.EquinoxLrn)
	_, err = db.Exec(sqlstr, d.Deptno, d.Deptname, d.Deptaccess, d.EquinoxSec, d.EquinoxLrn)
	return err
}

// Save saves the Deptmnt to the database.
func (d *Deptmnt) Save(db XODB) error {
	if d.Exists() {
		return d.Update(db)
	}

	return d.Insert(db)
}

// Upsert performs an upsert for Deptmnt.
//
// NOTE: PostgreSQL 9.5+ only
func (d *Deptmnt) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if d._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.deptmnt (` +
		`deptno, deptname, deptaccess, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`deptno, deptname, deptaccess, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.deptno, EXCLUDED.deptname, EXCLUDED.deptaccess, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, d.Deptno, d.Deptname, d.Deptaccess, d.EquinoxLrn, d.EquinoxSec)
	_, err = db.Exec(sqlstr, d.Deptno, d.Deptname, d.Deptaccess, d.EquinoxLrn, d.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	d._exists = true

	return nil
}

// Delete deletes the Deptmnt from the database.
func (d *Deptmnt) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !d._exists {
		return nil
	}

	// if deleted, bail
	if d._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.deptmnt WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, d.EquinoxLrn)
	_, err = db.Exec(sqlstr, d.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	d._deleted = true

	return nil
}

// DeptmntByEquinoxLrn retrieves a row from 'equinox.deptmnt' as a Deptmnt.
//
// Generated from index 'deptmnt_pkey'.
func DeptmntByEquinoxLrn(db XODB, equinoxLrn int64) (*Deptmnt, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`deptno, deptname, deptaccess, equinox_lrn, equinox_sec ` +
		`FROM equinox.deptmnt ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	d := Deptmnt{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&d.Deptno, &d.Deptname, &d.Deptaccess, &d.EquinoxLrn, &d.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &d, nil
}
