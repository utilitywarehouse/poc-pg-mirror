// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"

	"github.com/lib/pq"
)

// Afftran represents a row from 'equinox.afftrans'.
type Afftran struct {
	Affttransactid  sql.NullFloat64 `json:"affttransactid"`  // affttransactid
	Afftdate        pq.NullTime     `json:"afftdate"`        // afftdate
	Afftdescription sql.NullString  `json:"afftdescription"` // afftdescription
	Afftvalue       sql.NullFloat64 `json:"afftvalue"`       // afftvalue
	Afftcommis      sql.NullFloat64 `json:"afftcommis"`      // afftcommis
	Afftsaving      sql.NullFloat64 `json:"afftsaving"`      // afftsaving
	Afftbillno      sql.NullFloat64 `json:"afftbillno"`      // afftbillno
	Afftafftype     sql.NullString  `json:"afftafftype"`     // afftafftype
	Afftaffid       sql.NullString  `json:"afftaffid"`       // afftaffid
	Afftafftranref  sql.NullString  `json:"afftafftranref"`  // afftafftranref
	Affturlaccount  sql.NullString  `json:"affturlaccount"`  // affturlaccount
	Afftaffmerid    sql.NullString  `json:"afftaffmerid"`    // afftaffmerid
	Afftsparec1     sql.NullString  `json:"afftsparec1"`     // afftsparec1
	Afftsparec2     sql.NullString  `json:"afftsparec2"`     // afftsparec2
	Afftspared1     pq.NullTime     `json:"afftspared1"`     // afftspared1
	Afftspared2     pq.NullTime     `json:"afftspared2"`     // afftspared2
	Afftspared3     pq.NullTime     `json:"afftspared3"`     // afftspared3
	Afftsparen1     sql.NullFloat64 `json:"afftsparen1"`     // afftsparen1
	Afftsparen2     sql.NullFloat64 `json:"afftsparen2"`     // afftsparen2
	Afftsparen3     sql.NullFloat64 `json:"afftsparen3"`     // afftsparen3
	EquinoxPrn      sql.NullInt64   `json:"equinox_prn"`     // equinox_prn
	EquinoxLrn      int64           `json:"equinox_lrn"`     // equinox_lrn
	EquinoxSec      sql.NullInt64   `json:"equinox_sec"`     // equinox_sec
}

func AllAfftran(db XODB, callback func(x Afftran) bool) error {

	// sql query
	const sqlstr = `SELECT ` +
		`affttransactid, afftdate, afftdescription, afftvalue, afftcommis, afftsaving, afftbillno, afftafftype, afftaffid, afftafftranref, affturlaccount, afftaffmerid, afftsparec1, afftsparec2, afftspared1, afftspared2, afftspared3, afftsparen1, afftsparen2, afftsparen3, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.afftrans `

	q, err := db.Query(sqlstr)

	if err != nil {
		return err
	}
	defer q.Close()

	// load results
	for q.Next() {
		a := Afftran{}

		// scan
		err = q.Scan(&a.Affttransactid, &a.Afftdate, &a.Afftdescription, &a.Afftvalue, &a.Afftcommis, &a.Afftsaving, &a.Afftbillno, &a.Afftafftype, &a.Afftaffid, &a.Afftafftranref, &a.Affturlaccount, &a.Afftaffmerid, &a.Afftsparec1, &a.Afftsparec2, &a.Afftspared1, &a.Afftspared2, &a.Afftspared3, &a.Afftsparen1, &a.Afftsparen2, &a.Afftsparen3, &a.EquinoxPrn, &a.EquinoxLrn, &a.EquinoxSec)
		if err != nil {
			return err
		}
		if !callback(a) {
			return nil
		}
	}

	return nil
}

// AfftranByEquinoxLrn retrieves a row from 'equinox.afftrans' as a Afftran.
//
// Generated from index 'afftrans_pkey'.
func AfftranByEquinoxLrn(db XODB, equinoxLrn int64) (*Afftran, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`affttransactid, afftdate, afftdescription, afftvalue, afftcommis, afftsaving, afftbillno, afftafftype, afftaffid, afftafftranref, affturlaccount, afftaffmerid, afftsparec1, afftsparec2, afftspared1, afftspared2, afftspared3, afftsparen1, afftsparen2, afftsparen3, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.afftrans ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	a := Afftran{}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&a.Affttransactid, &a.Afftdate, &a.Afftdescription, &a.Afftvalue, &a.Afftcommis, &a.Afftsaving, &a.Afftbillno, &a.Afftafftype, &a.Afftaffid, &a.Afftafftranref, &a.Affturlaccount, &a.Afftaffmerid, &a.Afftsparec1, &a.Afftsparec2, &a.Afftspared1, &a.Afftspared2, &a.Afftspared3, &a.Afftsparen1, &a.Afftsparen2, &a.Afftsparen3, &a.EquinoxPrn, &a.EquinoxLrn, &a.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &a, nil
}
