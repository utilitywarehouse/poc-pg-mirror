// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import "database/sql"

// Caci represents a row from 'equinox.caci'.
type Caci struct {
	CaciUniquedpr   sql.NullFloat64 `json:"caci_uniquedpr"`   // caci_uniquedpr
	CaciAddresskey  sql.NullFloat64 `json:"caci_addresskey"`  // caci_addresskey
	CaciAddress1    sql.NullString  `json:"caci_address_1"`   // caci_address_1
	CaciAddress2    sql.NullString  `json:"caci_address_2"`   // caci_address_2
	CaciAddress3    sql.NullString  `json:"caci_address_3"`   // caci_address_3
	CaciPostcode    sql.NullString  `json:"caci_postcode"`    // caci_postcode
	CaciAcorntype   sql.NullString  `json:"caci_acorntype"`   // caci_acorntype
	CaciPostcodenew sql.NullString  `json:"caci_postcodenew"` // caci_postcodenew
	EquinoxLrn      int64           `json:"equinox_lrn"`      // equinox_lrn
	EquinoxSec      sql.NullInt64   `json:"equinox_sec"`      // equinox_sec
}

func AllCaci(db XODB, callback func(x Caci) bool) error {

	// sql query
	const sqlstr = `SELECT ` +
		`caci_uniquedpr, caci_addresskey, caci_address_1, caci_address_2, caci_address_3, caci_postcode, caci_acorntype, caci_postcodenew, equinox_lrn, equinox_sec ` +
		`FROM equinox.caci `

	q, err := db.Query(sqlstr)

	if err != nil {
		return err
	}
	defer q.Close()

	// load results
	for q.Next() {
		c := Caci{}

		// scan
		err = q.Scan(&c.CaciUniquedpr, &c.CaciAddresskey, &c.CaciAddress1, &c.CaciAddress2, &c.CaciAddress3, &c.CaciPostcode, &c.CaciAcorntype, &c.CaciPostcodenew, &c.EquinoxLrn, &c.EquinoxSec)
		if err != nil {
			return err
		}
		if !callback(c) {
			return nil
		}
	}

	return nil
}

// CaciByEquinoxLrn retrieves a row from 'equinox.caci' as a Caci.
//
// Generated from index 'caci_pkey'.
func CaciByEquinoxLrn(db XODB, equinoxLrn int64) (*Caci, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`caci_uniquedpr, caci_addresskey, caci_address_1, caci_address_2, caci_address_3, caci_postcode, caci_acorntype, caci_postcodenew, equinox_lrn, equinox_sec ` +
		`FROM equinox.caci ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	c := Caci{}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&c.CaciUniquedpr, &c.CaciAddresskey, &c.CaciAddress1, &c.CaciAddress2, &c.CaciAddress3, &c.CaciPostcode, &c.CaciAcorntype, &c.CaciPostcodenew, &c.EquinoxLrn, &c.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &c, nil
}
