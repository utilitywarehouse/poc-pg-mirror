// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// Caci represents a row from 'equinox.caci'.
type Caci struct {
	CaciUniquedpr   sql.NullFloat64 `json:"caci_uniquedpr"`   // caci_uniquedpr
	CaciAddresskey  sql.NullFloat64 `json:"caci_addresskey"`  // caci_addresskey
	CaciAddress1    sql.NullString  `json:"caci_address_1"`   // caci_address_1
	CaciAddress2    sql.NullString  `json:"caci_address_2"`   // caci_address_2
	CaciAddress3    sql.NullString  `json:"caci_address_3"`   // caci_address_3
	CaciPostcode    sql.NullString  `json:"caci_postcode"`    // caci_postcode
	CaciAcorntype   sql.NullString  `json:"caci_acorntype"`   // caci_acorntype
	CaciPostcodenew sql.NullString  `json:"caci_postcodenew"` // caci_postcodenew
	EquinoxLrn      int64           `json:"equinox_lrn"`      // equinox_lrn
	EquinoxSec      sql.NullInt64   `json:"equinox_sec"`      // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Caci exists in the database.
func (c *Caci) Exists() bool {
	return c._exists
}

// Deleted provides information if the Caci has been deleted from the database.
func (c *Caci) Deleted() bool {
	return c._deleted
}

// Insert inserts the Caci to the database.
func (c *Caci) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.caci (` +
		`caci_uniquedpr, caci_addresskey, caci_address_1, caci_address_2, caci_address_3, caci_postcode, caci_acorntype, caci_postcodenew, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, c.CaciUniquedpr, c.CaciAddresskey, c.CaciAddress1, c.CaciAddress2, c.CaciAddress3, c.CaciPostcode, c.CaciAcorntype, c.CaciPostcodenew, c.EquinoxSec)
	err = db.QueryRow(sqlstr, c.CaciUniquedpr, c.CaciAddresskey, c.CaciAddress1, c.CaciAddress2, c.CaciAddress3, c.CaciPostcode, c.CaciAcorntype, c.CaciPostcodenew, c.EquinoxSec).Scan(&c.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Update updates the Caci in the database.
func (c *Caci) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if c._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.caci SET (` +
		`caci_uniquedpr, caci_addresskey, caci_address_1, caci_address_2, caci_address_3, caci_postcode, caci_acorntype, caci_postcodenew, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9` +
		`) WHERE equinox_lrn = $10`

	// run query
	XOLog(sqlstr, c.CaciUniquedpr, c.CaciAddresskey, c.CaciAddress1, c.CaciAddress2, c.CaciAddress3, c.CaciPostcode, c.CaciAcorntype, c.CaciPostcodenew, c.EquinoxSec, c.EquinoxLrn)
	_, err = db.Exec(sqlstr, c.CaciUniquedpr, c.CaciAddresskey, c.CaciAddress1, c.CaciAddress2, c.CaciAddress3, c.CaciPostcode, c.CaciAcorntype, c.CaciPostcodenew, c.EquinoxSec, c.EquinoxLrn)
	return err
}

// Save saves the Caci to the database.
func (c *Caci) Save(db XODB) error {
	if c.Exists() {
		return c.Update(db)
	}

	return c.Insert(db)
}

// Upsert performs an upsert for Caci.
//
// NOTE: PostgreSQL 9.5+ only
func (c *Caci) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.caci (` +
		`caci_uniquedpr, caci_addresskey, caci_address_1, caci_address_2, caci_address_3, caci_postcode, caci_acorntype, caci_postcodenew, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`caci_uniquedpr, caci_addresskey, caci_address_1, caci_address_2, caci_address_3, caci_postcode, caci_acorntype, caci_postcodenew, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.caci_uniquedpr, EXCLUDED.caci_addresskey, EXCLUDED.caci_address_1, EXCLUDED.caci_address_2, EXCLUDED.caci_address_3, EXCLUDED.caci_postcode, EXCLUDED.caci_acorntype, EXCLUDED.caci_postcodenew, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, c.CaciUniquedpr, c.CaciAddresskey, c.CaciAddress1, c.CaciAddress2, c.CaciAddress3, c.CaciPostcode, c.CaciAcorntype, c.CaciPostcodenew, c.EquinoxLrn, c.EquinoxSec)
	_, err = db.Exec(sqlstr, c.CaciUniquedpr, c.CaciAddresskey, c.CaciAddress1, c.CaciAddress2, c.CaciAddress3, c.CaciPostcode, c.CaciAcorntype, c.CaciPostcodenew, c.EquinoxLrn, c.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Delete deletes the Caci from the database.
func (c *Caci) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return nil
	}

	// if deleted, bail
	if c._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.caci WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, c.EquinoxLrn)
	_, err = db.Exec(sqlstr, c.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	c._deleted = true

	return nil
}

// CaciByEquinoxLrn retrieves a row from 'equinox.caci' as a Caci.
//
// Generated from index 'caci_pkey'.
func CaciByEquinoxLrn(db XODB, equinoxLrn int64) (*Caci, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`caci_uniquedpr, caci_addresskey, caci_address_1, caci_address_2, caci_address_3, caci_postcode, caci_acorntype, caci_postcodenew, equinox_lrn, equinox_sec ` +
		`FROM equinox.caci ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	c := Caci{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&c.CaciUniquedpr, &c.CaciAddresskey, &c.CaciAddress1, &c.CaciAddress2, &c.CaciAddress3, &c.CaciPostcode, &c.CaciAcorntype, &c.CaciPostcodenew, &c.EquinoxLrn, &c.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &c, nil
}
