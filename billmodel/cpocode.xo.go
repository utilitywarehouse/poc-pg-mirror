// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// Cpocode represents a row from 'equinox.cpocodes'.
type Cpocode struct {
	Cpoid          sql.NullInt64   `json:"cpoid"`          // cpoid
	Cpodescription sql.NullString  `json:"cpodescription"` // cpodescription
	Cpovalue1      sql.NullFloat64 `json:"cpovalue1"`      // cpovalue1
	Cpovalue2      sql.NullFloat64 `json:"cpovalue2"`      // cpovalue2
	Cpovalue3      sql.NullFloat64 `json:"cpovalue3"`      // cpovalue3
	Cpovalue4      sql.NullFloat64 `json:"cpovalue4"`      // cpovalue4
	Cpovalue5      sql.NullFloat64 `json:"cpovalue5"`      // cpovalue5
	Cpovalue6      sql.NullFloat64 `json:"cpovalue6"`      // cpovalue6
	Cpovalue7      sql.NullFloat64 `json:"cpovalue7"`      // cpovalue7
	Cpovalue8      sql.NullFloat64 `json:"cpovalue8"`      // cpovalue8
	Cpovalue9      sql.NullFloat64 `json:"cpovalue9"`      // cpovalue9
	Cpovalue10     sql.NullFloat64 `json:"cpovalue10"`     // cpovalue10
	Cpovalue11     sql.NullFloat64 `json:"cpovalue11"`     // cpovalue11
	Cpovalue12     sql.NullFloat64 `json:"cpovalue12"`     // cpovalue12
	Cpovalue13     sql.NullFloat64 `json:"cpovalue13"`     // cpovalue13
	EquinoxLrn     int64           `json:"equinox_lrn"`    // equinox_lrn
	EquinoxSec     sql.NullInt64   `json:"equinox_sec"`    // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Cpocode exists in the database.
func (c *Cpocode) Exists() bool {
	return c._exists
}

// Deleted provides information if the Cpocode has been deleted from the database.
func (c *Cpocode) Deleted() bool {
	return c._deleted
}

// Insert inserts the Cpocode to the database.
func (c *Cpocode) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.cpocodes (` +
		`cpoid, cpodescription, cpovalue1, cpovalue2, cpovalue3, cpovalue4, cpovalue5, cpovalue6, cpovalue7, cpovalue8, cpovalue9, cpovalue10, cpovalue11, cpovalue12, cpovalue13, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, c.Cpoid, c.Cpodescription, c.Cpovalue1, c.Cpovalue2, c.Cpovalue3, c.Cpovalue4, c.Cpovalue5, c.Cpovalue6, c.Cpovalue7, c.Cpovalue8, c.Cpovalue9, c.Cpovalue10, c.Cpovalue11, c.Cpovalue12, c.Cpovalue13, c.EquinoxSec)
	err = db.QueryRow(sqlstr, c.Cpoid, c.Cpodescription, c.Cpovalue1, c.Cpovalue2, c.Cpovalue3, c.Cpovalue4, c.Cpovalue5, c.Cpovalue6, c.Cpovalue7, c.Cpovalue8, c.Cpovalue9, c.Cpovalue10, c.Cpovalue11, c.Cpovalue12, c.Cpovalue13, c.EquinoxSec).Scan(&c.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Update updates the Cpocode in the database.
func (c *Cpocode) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if c._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.cpocodes SET (` +
		`cpoid, cpodescription, cpovalue1, cpovalue2, cpovalue3, cpovalue4, cpovalue5, cpovalue6, cpovalue7, cpovalue8, cpovalue9, cpovalue10, cpovalue11, cpovalue12, cpovalue13, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16` +
		`) WHERE equinox_lrn = $17`

	// run query
	XOLog(sqlstr, c.Cpoid, c.Cpodescription, c.Cpovalue1, c.Cpovalue2, c.Cpovalue3, c.Cpovalue4, c.Cpovalue5, c.Cpovalue6, c.Cpovalue7, c.Cpovalue8, c.Cpovalue9, c.Cpovalue10, c.Cpovalue11, c.Cpovalue12, c.Cpovalue13, c.EquinoxSec, c.EquinoxLrn)
	_, err = db.Exec(sqlstr, c.Cpoid, c.Cpodescription, c.Cpovalue1, c.Cpovalue2, c.Cpovalue3, c.Cpovalue4, c.Cpovalue5, c.Cpovalue6, c.Cpovalue7, c.Cpovalue8, c.Cpovalue9, c.Cpovalue10, c.Cpovalue11, c.Cpovalue12, c.Cpovalue13, c.EquinoxSec, c.EquinoxLrn)
	return err
}

// Save saves the Cpocode to the database.
func (c *Cpocode) Save(db XODB) error {
	if c.Exists() {
		return c.Update(db)
	}

	return c.Insert(db)
}

// Upsert performs an upsert for Cpocode.
//
// NOTE: PostgreSQL 9.5+ only
func (c *Cpocode) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.cpocodes (` +
		`cpoid, cpodescription, cpovalue1, cpovalue2, cpovalue3, cpovalue4, cpovalue5, cpovalue6, cpovalue7, cpovalue8, cpovalue9, cpovalue10, cpovalue11, cpovalue12, cpovalue13, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`cpoid, cpodescription, cpovalue1, cpovalue2, cpovalue3, cpovalue4, cpovalue5, cpovalue6, cpovalue7, cpovalue8, cpovalue9, cpovalue10, cpovalue11, cpovalue12, cpovalue13, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.cpoid, EXCLUDED.cpodescription, EXCLUDED.cpovalue1, EXCLUDED.cpovalue2, EXCLUDED.cpovalue3, EXCLUDED.cpovalue4, EXCLUDED.cpovalue5, EXCLUDED.cpovalue6, EXCLUDED.cpovalue7, EXCLUDED.cpovalue8, EXCLUDED.cpovalue9, EXCLUDED.cpovalue10, EXCLUDED.cpovalue11, EXCLUDED.cpovalue12, EXCLUDED.cpovalue13, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, c.Cpoid, c.Cpodescription, c.Cpovalue1, c.Cpovalue2, c.Cpovalue3, c.Cpovalue4, c.Cpovalue5, c.Cpovalue6, c.Cpovalue7, c.Cpovalue8, c.Cpovalue9, c.Cpovalue10, c.Cpovalue11, c.Cpovalue12, c.Cpovalue13, c.EquinoxLrn, c.EquinoxSec)
	_, err = db.Exec(sqlstr, c.Cpoid, c.Cpodescription, c.Cpovalue1, c.Cpovalue2, c.Cpovalue3, c.Cpovalue4, c.Cpovalue5, c.Cpovalue6, c.Cpovalue7, c.Cpovalue8, c.Cpovalue9, c.Cpovalue10, c.Cpovalue11, c.Cpovalue12, c.Cpovalue13, c.EquinoxLrn, c.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Delete deletes the Cpocode from the database.
func (c *Cpocode) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return nil
	}

	// if deleted, bail
	if c._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.cpocodes WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, c.EquinoxLrn)
	_, err = db.Exec(sqlstr, c.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	c._deleted = true

	return nil
}

// CpocodeByEquinoxLrn retrieves a row from 'equinox.cpocodes' as a Cpocode.
//
// Generated from index 'cpocodes_pkey'.
func CpocodeByEquinoxLrn(db XODB, equinoxLrn int64) (*Cpocode, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`cpoid, cpodescription, cpovalue1, cpovalue2, cpovalue3, cpovalue4, cpovalue5, cpovalue6, cpovalue7, cpovalue8, cpovalue9, cpovalue10, cpovalue11, cpovalue12, cpovalue13, equinox_lrn, equinox_sec ` +
		`FROM equinox.cpocodes ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	c := Cpocode{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&c.Cpoid, &c.Cpodescription, &c.Cpovalue1, &c.Cpovalue2, &c.Cpovalue3, &c.Cpovalue4, &c.Cpovalue5, &c.Cpovalue6, &c.Cpovalue7, &c.Cpovalue8, &c.Cpovalue9, &c.Cpovalue10, &c.Cpovalue11, &c.Cpovalue12, &c.Cpovalue13, &c.EquinoxLrn, &c.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &c, nil
}
