// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// Bmarklet represents a row from 'equinox.bmarklet'.
type Bmarklet struct {
	Bmcode      sql.NullString `json:"bmcode"`      // bmcode
	Bmname      sql.NullString `json:"bmname"`      // bmname
	Bmvalue     sql.NullString `json:"bmvalue"`     // bmvalue
	Bmlongvalue sql.NullInt64  `json:"bmlongvalue"` // bmlongvalue
	EquinoxPrn  sql.NullInt64  `json:"equinox_prn"` // equinox_prn
	EquinoxLrn  int64          `json:"equinox_lrn"` // equinox_lrn
	EquinoxSec  sql.NullInt64  `json:"equinox_sec"` // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Bmarklet exists in the database.
func (b *Bmarklet) Exists() bool {
	return b._exists
}

// Deleted provides information if the Bmarklet has been deleted from the database.
func (b *Bmarklet) Deleted() bool {
	return b._deleted
}

// Insert inserts the Bmarklet to the database.
func (b *Bmarklet) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if b._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.bmarklet (` +
		`bmcode, bmname, bmvalue, bmlongvalue, equinox_prn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, b.Bmcode, b.Bmname, b.Bmvalue, b.Bmlongvalue, b.EquinoxPrn, b.EquinoxSec)
	err = db.QueryRow(sqlstr, b.Bmcode, b.Bmname, b.Bmvalue, b.Bmlongvalue, b.EquinoxPrn, b.EquinoxSec).Scan(&b.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	b._exists = true

	return nil
}

// Update updates the Bmarklet in the database.
func (b *Bmarklet) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !b._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if b._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.bmarklet SET (` +
		`bmcode, bmname, bmvalue, bmlongvalue, equinox_prn, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6` +
		`) WHERE equinox_lrn = $7`

	// run query
	XOLog(sqlstr, b.Bmcode, b.Bmname, b.Bmvalue, b.Bmlongvalue, b.EquinoxPrn, b.EquinoxSec, b.EquinoxLrn)
	_, err = db.Exec(sqlstr, b.Bmcode, b.Bmname, b.Bmvalue, b.Bmlongvalue, b.EquinoxPrn, b.EquinoxSec, b.EquinoxLrn)
	return err
}

// Save saves the Bmarklet to the database.
func (b *Bmarklet) Save(db XODB) error {
	if b.Exists() {
		return b.Update(db)
	}

	return b.Insert(db)
}

// Upsert performs an upsert for Bmarklet.
//
// NOTE: PostgreSQL 9.5+ only
func (b *Bmarklet) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if b._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.bmarklet (` +
		`bmcode, bmname, bmvalue, bmlongvalue, equinox_prn, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`bmcode, bmname, bmvalue, bmlongvalue, equinox_prn, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.bmcode, EXCLUDED.bmname, EXCLUDED.bmvalue, EXCLUDED.bmlongvalue, EXCLUDED.equinox_prn, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, b.Bmcode, b.Bmname, b.Bmvalue, b.Bmlongvalue, b.EquinoxPrn, b.EquinoxLrn, b.EquinoxSec)
	_, err = db.Exec(sqlstr, b.Bmcode, b.Bmname, b.Bmvalue, b.Bmlongvalue, b.EquinoxPrn, b.EquinoxLrn, b.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	b._exists = true

	return nil
}

// Delete deletes the Bmarklet from the database.
func (b *Bmarklet) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !b._exists {
		return nil
	}

	// if deleted, bail
	if b._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.bmarklet WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, b.EquinoxLrn)
	_, err = db.Exec(sqlstr, b.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	b._deleted = true

	return nil
}

// BmarkletByEquinoxLrn retrieves a row from 'equinox.bmarklet' as a Bmarklet.
//
// Generated from index 'bmarklet_pkey'.
func BmarkletByEquinoxLrn(db XODB, equinoxLrn int64) (*Bmarklet, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`bmcode, bmname, bmvalue, bmlongvalue, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.bmarklet ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	b := Bmarklet{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&b.Bmcode, &b.Bmname, &b.Bmvalue, &b.Bmlongvalue, &b.EquinoxPrn, &b.EquinoxLrn, &b.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &b, nil
}
