// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"

	"github.com/lib/pq"
)

// O2recon represents a row from 'equinox.o2recon'.
type O2recon struct {
	O2Cli         sql.NullString `json:"o2_cli"`         // o2_cli
	O2Sim         sql.NullString `json:"o2_sim"`         // o2_sim
	O2Status      sql.NullString `json:"o2_status"`      // o2_status
	O2Lastchgdate pq.NullTime    `json:"o2_lastchgdate"` // o2_lastchgdate
	O2Lastchgtype sql.NullString `json:"o2_lastchgtype"` // o2_lastchgtype
	O2Servoptions sql.NullString `json:"o2_servoptions"` // o2_servoptions
	EquinoxLrn    int64          `json:"equinox_lrn"`    // equinox_lrn
	EquinoxSec    sql.NullInt64  `json:"equinox_sec"`    // equinox_sec
}

// O2reconByEquinoxLrn retrieves a row from 'equinox.o2recon' as a O2recon.
//
// Generated from index 'o2recon_pkey'.
func O2reconByEquinoxLrn(db XODB, equinoxLrn int64) (*O2recon, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`o2_cli, o2_sim, o2_status, o2_lastchgdate, o2_lastchgtype, o2_servoptions, equinox_lrn, equinox_sec ` +
		`FROM equinox.o2recon ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	o := O2recon{}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&o.O2Cli, &o.O2Sim, &o.O2Status, &o.O2Lastchgdate, &o.O2Lastchgtype, &o.O2Servoptions, &o.EquinoxLrn, &o.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &o, nil
}
