// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"

	"github.com/lib/pq"
)

// Region represents a row from 'equinox.regions'.
type Region struct {
	Regstd           sql.NullString  `json:"regstd"`           // regstd
	Reglocalexchange sql.NullString  `json:"reglocalexchange"` // reglocalexchange
	Regitvregion     sql.NullString  `json:"regitvregion"`     // regitvregion
	Regarea          sql.NullString  `json:"regarea"`          // regarea
	Regmobcoverage   sql.NullFloat64 `json:"regmobcoverage"`   // regmobcoverage
	Regcwinterconnec sql.NullString  `json:"regcwinterconnec"` // regcwinterconnec
	Reggeogregion    sql.NullString  `json:"reggeogregion"`    // reggeogregion
	Reglocallist     sql.NullString  `json:"reglocallist"`     // reglocallist
	Regsparec1       sql.NullString  `json:"regsparec1"`       // regsparec1
	Regsparen1       sql.NullFloat64 `json:"regsparen1"`       // regsparen1
	Regspared1       pq.NullTime     `json:"regspared1"`       // regspared1
	EquinoxLrn       int64           `json:"equinox_lrn"`      // equinox_lrn
	EquinoxSec       sql.NullInt64   `json:"equinox_sec"`      // equinox_sec
}

func AllRegion(db XODB, callback func(x Region) bool) error {

	// sql query
	const sqlstr = `SELECT ` +
		`regstd, reglocalexchange, regitvregion, regarea, regmobcoverage, regcwinterconnec, reggeogregion, reglocallist, regsparec1, regsparen1, regspared1, equinox_lrn, equinox_sec ` +
		`FROM equinox.regions `

	q, err := db.Query(sqlstr)

	if err != nil {
		return err
	}
	defer q.Close()

	// load results
	for q.Next() {
		r := Region{}

		// scan
		err = q.Scan(&r.Regstd, &r.Reglocalexchange, &r.Regitvregion, &r.Regarea, &r.Regmobcoverage, &r.Regcwinterconnec, &r.Reggeogregion, &r.Reglocallist, &r.Regsparec1, &r.Regsparen1, &r.Regspared1, &r.EquinoxLrn, &r.EquinoxSec)
		if err != nil {
			return err
		}
		if !callback(r) {
			return nil
		}
	}

	return nil
}

// RegionByEquinoxLrn retrieves a row from 'equinox.regions' as a Region.
//
// Generated from index 'regions_pkey'.
func RegionByEquinoxLrn(db XODB, equinoxLrn int64) (*Region, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`regstd, reglocalexchange, regitvregion, regarea, regmobcoverage, regcwinterconnec, reggeogregion, reglocallist, regsparec1, regsparen1, regspared1, equinox_lrn, equinox_sec ` +
		`FROM equinox.regions ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	r := Region{}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&r.Regstd, &r.Reglocalexchange, &r.Regitvregion, &r.Regarea, &r.Regmobcoverage, &r.Regcwinterconnec, &r.Reggeogregion, &r.Reglocallist, &r.Regsparec1, &r.Regsparen1, &r.Regspared1, &r.EquinoxLrn, &r.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &r, nil
}
