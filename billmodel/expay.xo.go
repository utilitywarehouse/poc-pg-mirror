// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/lib/pq"
)

// Expay represents a row from 'equinox.expay'.
type Expay struct {
	Expaypayment    sql.NullFloat64 `json:"expaypayment"`    // expaypayment
	Expaylevel      sql.NullFloat64 `json:"expaylevel"`      // expaylevel
	Expaytype       sql.NullInt64   `json:"expaytype"`       // expaytype
	Expaydealcode   sql.NullString  `json:"expaydealcode"`   // expaydealcode
	Expaysparen     sql.NullInt64   `json:"expaysparen"`     // expaysparen
	Expaysparec     sql.NullString  `json:"expaysparec"`     // expaysparec
	Expaynumbdb     sql.NullInt64   `json:"expaynumbdb"`     // expaynumbdb
	Expaypaymentraw sql.NullFloat64 `json:"expaypaymentraw"` // expaypaymentraw
	Expaycvcrate    sql.NullFloat64 `json:"expaycvcrate"`    // expaycvcrate
	Expaysparec1    sql.NullString  `json:"expaysparec1"`    // expaysparec1
	Expaysparen1    sql.NullFloat64 `json:"expaysparen1"`    // expaysparen1
	Expayspared1    pq.NullTime     `json:"expayspared1"`    // expayspared1
	EquinoxPrn      sql.NullInt64   `json:"equinox_prn"`     // equinox_prn
	EquinoxLrn      int64           `json:"equinox_lrn"`     // equinox_lrn
	EquinoxSec      sql.NullInt64   `json:"equinox_sec"`     // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Expay exists in the database.
func (e *Expay) Exists() bool {
	return e._exists
}

// Deleted provides information if the Expay has been deleted from the database.
func (e *Expay) Deleted() bool {
	return e._deleted
}

// Insert inserts the Expay to the database.
func (e *Expay) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if e._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.expay (` +
		`expaypayment, expaylevel, expaytype, expaydealcode, expaysparen, expaysparec, expaynumbdb, expaypaymentraw, expaycvcrate, expaysparec1, expaysparen1, expayspared1, equinox_prn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, e.Expaypayment, e.Expaylevel, e.Expaytype, e.Expaydealcode, e.Expaysparen, e.Expaysparec, e.Expaynumbdb, e.Expaypaymentraw, e.Expaycvcrate, e.Expaysparec1, e.Expaysparen1, e.Expayspared1, e.EquinoxPrn, e.EquinoxSec)
	err = db.QueryRow(sqlstr, e.Expaypayment, e.Expaylevel, e.Expaytype, e.Expaydealcode, e.Expaysparen, e.Expaysparec, e.Expaynumbdb, e.Expaypaymentraw, e.Expaycvcrate, e.Expaysparec1, e.Expaysparen1, e.Expayspared1, e.EquinoxPrn, e.EquinoxSec).Scan(&e.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	e._exists = true

	return nil
}

// Update updates the Expay in the database.
func (e *Expay) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !e._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if e._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.expay SET (` +
		`expaypayment, expaylevel, expaytype, expaydealcode, expaysparen, expaysparec, expaynumbdb, expaypaymentraw, expaycvcrate, expaysparec1, expaysparen1, expayspared1, equinox_prn, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14` +
		`) WHERE equinox_lrn = $15`

	// run query
	XOLog(sqlstr, e.Expaypayment, e.Expaylevel, e.Expaytype, e.Expaydealcode, e.Expaysparen, e.Expaysparec, e.Expaynumbdb, e.Expaypaymentraw, e.Expaycvcrate, e.Expaysparec1, e.Expaysparen1, e.Expayspared1, e.EquinoxPrn, e.EquinoxSec, e.EquinoxLrn)
	_, err = db.Exec(sqlstr, e.Expaypayment, e.Expaylevel, e.Expaytype, e.Expaydealcode, e.Expaysparen, e.Expaysparec, e.Expaynumbdb, e.Expaypaymentraw, e.Expaycvcrate, e.Expaysparec1, e.Expaysparen1, e.Expayspared1, e.EquinoxPrn, e.EquinoxSec, e.EquinoxLrn)
	return err
}

// Save saves the Expay to the database.
func (e *Expay) Save(db XODB) error {
	if e.Exists() {
		return e.Update(db)
	}

	return e.Insert(db)
}

// Upsert performs an upsert for Expay.
//
// NOTE: PostgreSQL 9.5+ only
func (e *Expay) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if e._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.expay (` +
		`expaypayment, expaylevel, expaytype, expaydealcode, expaysparen, expaysparec, expaynumbdb, expaypaymentraw, expaycvcrate, expaysparec1, expaysparen1, expayspared1, equinox_prn, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`expaypayment, expaylevel, expaytype, expaydealcode, expaysparen, expaysparec, expaynumbdb, expaypaymentraw, expaycvcrate, expaysparec1, expaysparen1, expayspared1, equinox_prn, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.expaypayment, EXCLUDED.expaylevel, EXCLUDED.expaytype, EXCLUDED.expaydealcode, EXCLUDED.expaysparen, EXCLUDED.expaysparec, EXCLUDED.expaynumbdb, EXCLUDED.expaypaymentraw, EXCLUDED.expaycvcrate, EXCLUDED.expaysparec1, EXCLUDED.expaysparen1, EXCLUDED.expayspared1, EXCLUDED.equinox_prn, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, e.Expaypayment, e.Expaylevel, e.Expaytype, e.Expaydealcode, e.Expaysparen, e.Expaysparec, e.Expaynumbdb, e.Expaypaymentraw, e.Expaycvcrate, e.Expaysparec1, e.Expaysparen1, e.Expayspared1, e.EquinoxPrn, e.EquinoxLrn, e.EquinoxSec)
	_, err = db.Exec(sqlstr, e.Expaypayment, e.Expaylevel, e.Expaytype, e.Expaydealcode, e.Expaysparen, e.Expaysparec, e.Expaynumbdb, e.Expaypaymentraw, e.Expaycvcrate, e.Expaysparec1, e.Expaysparen1, e.Expayspared1, e.EquinoxPrn, e.EquinoxLrn, e.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	e._exists = true

	return nil
}

// Delete deletes the Expay from the database.
func (e *Expay) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !e._exists {
		return nil
	}

	// if deleted, bail
	if e._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.expay WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, e.EquinoxLrn)
	_, err = db.Exec(sqlstr, e.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	e._deleted = true

	return nil
}

// ExpayByEquinoxLrn retrieves a row from 'equinox.expay' as a Expay.
//
// Generated from index 'expay_pkey'.
func ExpayByEquinoxLrn(db XODB, equinoxLrn int64) (*Expay, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`expaypayment, expaylevel, expaytype, expaydealcode, expaysparen, expaysparec, expaynumbdb, expaypaymentraw, expaycvcrate, expaysparec1, expaysparen1, expayspared1, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.expay ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	e := Expay{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&e.Expaypayment, &e.Expaylevel, &e.Expaytype, &e.Expaydealcode, &e.Expaysparen, &e.Expaysparec, &e.Expaynumbdb, &e.Expaypaymentraw, &e.Expaycvcrate, &e.Expaysparec1, &e.Expaysparen1, &e.Expayspared1, &e.EquinoxPrn, &e.EquinoxLrn, &e.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &e, nil
}
