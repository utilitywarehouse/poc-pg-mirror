// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// Compack represents a row from 'equinox.compack'.
type Compack struct {
	Cpnumber         sql.NullInt64   `json:"cpnumber"`         // cpnumber
	Cpdescription    sql.NullString  `json:"cpdescription"`    // cpdescription
	Cptype           sql.NullString  `json:"cptype"`           // cptype
	Cpbands          sql.NullInt64   `json:"cpbands"`          // cpbands
	Cpbillinggroup   sql.NullInt64   `json:"cpbillinggroup"`   // cpbillinggroup
	Cpratingtype     sql.NullInt64   `json:"cpratingtype"`     // cpratingtype
	Cpnondddiscount  sql.NullString  `json:"cpnondddiscount"`  // cpnondddiscount
	Cpaccelbonus     sql.NullString  `json:"cpaccelbonus"`     // cpaccelbonus
	Cpsubtariffband  sql.NullString  `json:"cpsubtariffband"`  // cpsubtariffband
	Cpzeroothercalls sql.NullString  `json:"cpzeroothercalls"` // cpzeroothercalls
	Cpsparenum2      sql.NullFloat64 `json:"cpsparenum2"`      // cpsparenum2
	Cpsparec1        sql.NullString  `json:"cpsparec1"`        // cpsparec1
	Cpsparec2        sql.NullString  `json:"cpsparec2"`        // cpsparec2
	EquinoxLrn       int64           `json:"equinox_lrn"`      // equinox_lrn
	EquinoxSec       sql.NullInt64   `json:"equinox_sec"`      // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Compack exists in the database.
func (c *Compack) Exists() bool {
	return c._exists
}

// Deleted provides information if the Compack has been deleted from the database.
func (c *Compack) Deleted() bool {
	return c._deleted
}

// Insert inserts the Compack to the database.
func (c *Compack) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.compack (` +
		`cpnumber, cpdescription, cptype, cpbands, cpbillinggroup, cpratingtype, cpnondddiscount, cpaccelbonus, cpsubtariffband, cpzeroothercalls, cpsparenum2, cpsparec1, cpsparec2, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, c.Cpnumber, c.Cpdescription, c.Cptype, c.Cpbands, c.Cpbillinggroup, c.Cpratingtype, c.Cpnondddiscount, c.Cpaccelbonus, c.Cpsubtariffband, c.Cpzeroothercalls, c.Cpsparenum2, c.Cpsparec1, c.Cpsparec2, c.EquinoxSec)
	err = db.QueryRow(sqlstr, c.Cpnumber, c.Cpdescription, c.Cptype, c.Cpbands, c.Cpbillinggroup, c.Cpratingtype, c.Cpnondddiscount, c.Cpaccelbonus, c.Cpsubtariffband, c.Cpzeroothercalls, c.Cpsparenum2, c.Cpsparec1, c.Cpsparec2, c.EquinoxSec).Scan(&c.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Update updates the Compack in the database.
func (c *Compack) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if c._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.compack SET (` +
		`cpnumber, cpdescription, cptype, cpbands, cpbillinggroup, cpratingtype, cpnondddiscount, cpaccelbonus, cpsubtariffband, cpzeroothercalls, cpsparenum2, cpsparec1, cpsparec2, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14` +
		`) WHERE equinox_lrn = $15`

	// run query
	XOLog(sqlstr, c.Cpnumber, c.Cpdescription, c.Cptype, c.Cpbands, c.Cpbillinggroup, c.Cpratingtype, c.Cpnondddiscount, c.Cpaccelbonus, c.Cpsubtariffband, c.Cpzeroothercalls, c.Cpsparenum2, c.Cpsparec1, c.Cpsparec2, c.EquinoxSec, c.EquinoxLrn)
	_, err = db.Exec(sqlstr, c.Cpnumber, c.Cpdescription, c.Cptype, c.Cpbands, c.Cpbillinggroup, c.Cpratingtype, c.Cpnondddiscount, c.Cpaccelbonus, c.Cpsubtariffband, c.Cpzeroothercalls, c.Cpsparenum2, c.Cpsparec1, c.Cpsparec2, c.EquinoxSec, c.EquinoxLrn)
	return err
}

// Save saves the Compack to the database.
func (c *Compack) Save(db XODB) error {
	if c.Exists() {
		return c.Update(db)
	}

	return c.Insert(db)
}

// Upsert performs an upsert for Compack.
//
// NOTE: PostgreSQL 9.5+ only
func (c *Compack) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.compack (` +
		`cpnumber, cpdescription, cptype, cpbands, cpbillinggroup, cpratingtype, cpnondddiscount, cpaccelbonus, cpsubtariffband, cpzeroothercalls, cpsparenum2, cpsparec1, cpsparec2, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`cpnumber, cpdescription, cptype, cpbands, cpbillinggroup, cpratingtype, cpnondddiscount, cpaccelbonus, cpsubtariffband, cpzeroothercalls, cpsparenum2, cpsparec1, cpsparec2, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.cpnumber, EXCLUDED.cpdescription, EXCLUDED.cptype, EXCLUDED.cpbands, EXCLUDED.cpbillinggroup, EXCLUDED.cpratingtype, EXCLUDED.cpnondddiscount, EXCLUDED.cpaccelbonus, EXCLUDED.cpsubtariffband, EXCLUDED.cpzeroothercalls, EXCLUDED.cpsparenum2, EXCLUDED.cpsparec1, EXCLUDED.cpsparec2, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, c.Cpnumber, c.Cpdescription, c.Cptype, c.Cpbands, c.Cpbillinggroup, c.Cpratingtype, c.Cpnondddiscount, c.Cpaccelbonus, c.Cpsubtariffband, c.Cpzeroothercalls, c.Cpsparenum2, c.Cpsparec1, c.Cpsparec2, c.EquinoxLrn, c.EquinoxSec)
	_, err = db.Exec(sqlstr, c.Cpnumber, c.Cpdescription, c.Cptype, c.Cpbands, c.Cpbillinggroup, c.Cpratingtype, c.Cpnondddiscount, c.Cpaccelbonus, c.Cpsubtariffband, c.Cpzeroothercalls, c.Cpsparenum2, c.Cpsparec1, c.Cpsparec2, c.EquinoxLrn, c.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Delete deletes the Compack from the database.
func (c *Compack) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return nil
	}

	// if deleted, bail
	if c._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.compack WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, c.EquinoxLrn)
	_, err = db.Exec(sqlstr, c.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	c._deleted = true

	return nil
}

// CompackByEquinoxLrn retrieves a row from 'equinox.compack' as a Compack.
//
// Generated from index 'compack_pkey'.
func CompackByEquinoxLrn(db XODB, equinoxLrn int64) (*Compack, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`cpnumber, cpdescription, cptype, cpbands, cpbillinggroup, cpratingtype, cpnondddiscount, cpaccelbonus, cpsubtariffband, cpzeroothercalls, cpsparenum2, cpsparec1, cpsparec2, equinox_lrn, equinox_sec ` +
		`FROM equinox.compack ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	c := Compack{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&c.Cpnumber, &c.Cpdescription, &c.Cptype, &c.Cpbands, &c.Cpbillinggroup, &c.Cpratingtype, &c.Cpnondddiscount, &c.Cpaccelbonus, &c.Cpsubtariffband, &c.Cpzeroothercalls, &c.Cpsparenum2, &c.Cpsparec1, &c.Cpsparec2, &c.EquinoxLrn, &c.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &c, nil
}
