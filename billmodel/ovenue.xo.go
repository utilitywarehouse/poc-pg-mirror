// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import "database/sql"

// OVenue represents a row from 'equinox.o_venues'.
type OVenue struct {
	OvVenueid   sql.NullString `json:"ov_venueid"`   // ov_venueid
	OvVenuename sql.NullString `json:"ov_venuename"` // ov_venuename
	OvAddress1  sql.NullString `json:"ov_address1"`  // ov_address1
	OvAddress2  sql.NullString `json:"ov_address2"`  // ov_address2
	OvAddress3  sql.NullString `json:"ov_address3"`  // ov_address3
	OvAddress4  sql.NullString `json:"ov_address4"`  // ov_address4
	OvAddress5  sql.NullString `json:"ov_address5"`  // ov_address5
	OvPostcode  sql.NullString `json:"ov_postcode"`  // ov_postcode
	OvVancode   sql.NullString `json:"ov_vancode"`   // ov_vancode
	EquinoxLrn  int64          `json:"equinox_lrn"`  // equinox_lrn
	EquinoxSec  sql.NullInt64  `json:"equinox_sec"`  // equinox_sec
}

func AllOVenue(db XODB, callback func(x OVenue) bool) error {

	// sql query
	const sqlstr = `SELECT ` +
		`ov_venueid, ov_venuename, ov_address1, ov_address2, ov_address3, ov_address4, ov_address5, ov_postcode, ov_vancode, equinox_lrn, equinox_sec ` +
		`FROM equinox.o_venues `

	q, err := db.Query(sqlstr)

	if err != nil {
		return err
	}
	defer q.Close()

	// load results
	for q.Next() {
		ov := OVenue{}

		// scan
		err = q.Scan(&ov.OvVenueid, &ov.OvVenuename, &ov.OvAddress1, &ov.OvAddress2, &ov.OvAddress3, &ov.OvAddress4, &ov.OvAddress5, &ov.OvPostcode, &ov.OvVancode, &ov.EquinoxLrn, &ov.EquinoxSec)
		if err != nil {
			return err
		}
		if !callback(ov) {
			return nil
		}
	}

	return nil
}

// OVenueByEquinoxLrn retrieves a row from 'equinox.o_venues' as a OVenue.
//
// Generated from index 'o_venues_pkey'.
func OVenueByEquinoxLrn(db XODB, equinoxLrn int64) (*OVenue, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`ov_venueid, ov_venuename, ov_address1, ov_address2, ov_address3, ov_address4, ov_address5, ov_postcode, ov_vancode, equinox_lrn, equinox_sec ` +
		`FROM equinox.o_venues ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	ov := OVenue{}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&ov.OvVenueid, &ov.OvVenuename, &ov.OvAddress1, &ov.OvAddress2, &ov.OvAddress3, &ov.OvAddress4, &ov.OvAddress5, &ov.OvPostcode, &ov.OvVancode, &ov.EquinoxLrn, &ov.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &ov, nil
}
