// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"

	"github.com/lib/pq"
)

// Sim represents a row from 'equinox.sim'.
type Sim struct {
	Simcli           sql.NullString  `json:"simcli"`           // simcli
	Simserialnumber  sql.NullString  `json:"simserialnumber"`  // simserialnumber
	Simpuk           sql.NullString  `json:"simpuk"`           // simpuk
	Simpin           sql.NullString  `json:"simpin"`           // simpin
	Simcost          sql.NullFloat64 `json:"simcost"`          // simcost
	Simaccoutnumber  sql.NullString  `json:"simaccoutnumber"`  // simaccoutnumber
	Simdateallocated pq.NullTime     `json:"simdateallocated"` // simdateallocated
	Simmpcstatus     sql.NullString  `json:"simmpcstatus"`     // simmpcstatus
	Simmpcstatusdate pq.NullTime     `json:"simmpcstatusdate"` // simmpcstatusdate
	Simoriginalcli   sql.NullString  `json:"simoriginalcli"`   // simoriginalcli
	Simimsi          sql.NullString  `json:"simimsi"`          // simimsi
	Simsparec1       sql.NullString  `json:"simsparec1"`       // simsparec1
	Simsparen1       sql.NullFloat64 `json:"simsparen1"`       // simsparen1
	Simspared1       pq.NullTime     `json:"simspared1"`       // simspared1
	Simtype          sql.NullString  `json:"simtype"`          // simtype
	Simstatus        sql.NullString  `json:"simstatus"`        // simstatus
	Simexecid        sql.NullString  `json:"simexecid"`        // simexecid
	Simlocation      sql.NullString  `json:"simlocation"`      // simlocation
	Simappformno     sql.NullString  `json:"simappformno"`     // simappformno
	EquinoxLrn       int64           `json:"equinox_lrn"`      // equinox_lrn
	EquinoxSec       sql.NullInt64   `json:"equinox_sec"`      // equinox_sec
}

func AllSim(db XODB, callback func(x Sim) bool) error {

	// sql query
	const sqlstr = `SELECT ` +
		`simcli, simserialnumber, simpuk, simpin, simcost, simaccoutnumber, simdateallocated, simmpcstatus, simmpcstatusdate, simoriginalcli, simimsi, simsparec1, simsparen1, simspared1, simtype, simstatus, simexecid, simlocation, simappformno, equinox_lrn, equinox_sec ` +
		`FROM equinox.sim `

	q, err := db.Query(sqlstr)

	if err != nil {
		return err
	}
	defer q.Close()

	// load results
	for q.Next() {
		s := Sim{}

		// scan
		err = q.Scan(&s.Simcli, &s.Simserialnumber, &s.Simpuk, &s.Simpin, &s.Simcost, &s.Simaccoutnumber, &s.Simdateallocated, &s.Simmpcstatus, &s.Simmpcstatusdate, &s.Simoriginalcli, &s.Simimsi, &s.Simsparec1, &s.Simsparen1, &s.Simspared1, &s.Simtype, &s.Simstatus, &s.Simexecid, &s.Simlocation, &s.Simappformno, &s.EquinoxLrn, &s.EquinoxSec)
		if err != nil {
			return err
		}
		if !callback(s) {
			return nil
		}
	}

	return nil
}

// SimByEquinoxLrn retrieves a row from 'equinox.sim' as a Sim.
//
// Generated from index 'sim_pkey'.
func SimByEquinoxLrn(db XODB, equinoxLrn int64) (*Sim, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`simcli, simserialnumber, simpuk, simpin, simcost, simaccoutnumber, simdateallocated, simmpcstatus, simmpcstatusdate, simoriginalcli, simimsi, simsparec1, simsparen1, simspared1, simtype, simstatus, simexecid, simlocation, simappformno, equinox_lrn, equinox_sec ` +
		`FROM equinox.sim ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	s := Sim{}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&s.Simcli, &s.Simserialnumber, &s.Simpuk, &s.Simpin, &s.Simcost, &s.Simaccoutnumber, &s.Simdateallocated, &s.Simmpcstatus, &s.Simmpcstatusdate, &s.Simoriginalcli, &s.Simimsi, &s.Simsparec1, &s.Simsparen1, &s.Simspared1, &s.Simtype, &s.Simstatus, &s.Simexecid, &s.Simlocation, &s.Simappformno, &s.EquinoxLrn, &s.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &s, nil
}
