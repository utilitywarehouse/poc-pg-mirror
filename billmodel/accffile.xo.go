// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"

	"github.com/lib/pq"
)

// Accffile represents a row from 'equinox.accffile'.
type Accffile struct {
	Gaccftranstype   sql.NullString  `json:"gaccftranstype"`   // gaccftranstype
	Gaccfackcode     sql.NullString  `json:"gaccfackcode"`     // gaccfackcode
	Gaccffiletype    sql.NullString  `json:"gaccffiletype"`    // gaccffiletype
	Gaccfcontactref  sql.NullFloat64 `json:"gaccfcontactref"`  // gaccfcontactref
	Gaccfreadref     sql.NullString  `json:"gaccfreadref"`     // gaccfreadref
	Gaccfreasoncode  sql.NullString  `json:"gaccfreasoncode"`  // gaccfreasoncode
	Gaccfapptextval  sql.NullInt64   `json:"gaccfapptextval"`  // gaccfapptextval
	Gaccfshippercode sql.NullString  `json:"gaccfshippercode"` // gaccfshippercode
	Gaccfmprn        sql.NullFloat64 `json:"gaccfmprn"`        // gaccfmprn
	Gaccfadjstartdte pq.NullTime     `json:"gaccfadjstartdte"` // gaccfadjstartdte
	Gaccfadjenddte   pq.NullTime     `json:"gaccfadjenddte"`   // gaccfadjenddte
	Gaccfadjtype     sql.NullString  `json:"gaccfadjtype"`     // gaccfadjtype
	Gaccfdataitemchg sql.NullString  `json:"gaccfdataitemchg"` // gaccfdataitemchg
	Gaccfrvsdvou     sql.NullInt64   `json:"gaccfrvsdvou"`     // gaccfrvsdvou
	Gaccfrsnremarks  sql.NullInt64   `json:"gaccfrsnremarks"`  // gaccfrsnremarks
	Gaccffileread    sql.NullString  `json:"gaccffileread"`    // gaccffileread
	Gaccfdateread    pq.NullTime     `json:"gaccfdateread"`    // gaccfdateread
	Gaccftimeread    pq.NullTime     `json:"gaccftimeread"`    // gaccftimeread
	EquinoxPrn       sql.NullInt64   `json:"equinox_prn"`      // equinox_prn
	EquinoxLrn       int64           `json:"equinox_lrn"`      // equinox_lrn
	EquinoxSec       sql.NullInt64   `json:"equinox_sec"`      // equinox_sec
}

func AllAccffile(db XODB, callback func(x Accffile) bool) error {

	// sql query
	const sqlstr = `SELECT ` +
		`gaccftranstype, gaccfackcode, gaccffiletype, gaccfcontactref, gaccfreadref, gaccfreasoncode, gaccfapptextval, gaccfshippercode, gaccfmprn, gaccfadjstartdte, gaccfadjenddte, gaccfadjtype, gaccfdataitemchg, gaccfrvsdvou, gaccfrsnremarks, gaccffileread, gaccfdateread, gaccftimeread, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.accffile `

	q, err := db.Query(sqlstr)

	if err != nil {
		return err
	}
	defer q.Close()

	// load results
	for q.Next() {
		a := Accffile{}

		// scan
		err = q.Scan(&a.Gaccftranstype, &a.Gaccfackcode, &a.Gaccffiletype, &a.Gaccfcontactref, &a.Gaccfreadref, &a.Gaccfreasoncode, &a.Gaccfapptextval, &a.Gaccfshippercode, &a.Gaccfmprn, &a.Gaccfadjstartdte, &a.Gaccfadjenddte, &a.Gaccfadjtype, &a.Gaccfdataitemchg, &a.Gaccfrvsdvou, &a.Gaccfrsnremarks, &a.Gaccffileread, &a.Gaccfdateread, &a.Gaccftimeread, &a.EquinoxPrn, &a.EquinoxLrn, &a.EquinoxSec)
		if err != nil {
			return err
		}
		if !callback(a) {
			return nil
		}
	}

	return nil
}

// AccffileByEquinoxLrn retrieves a row from 'equinox.accffile' as a Accffile.
//
// Generated from index 'accffile_pkey'.
func AccffileByEquinoxLrn(db XODB, equinoxLrn int64) (*Accffile, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`gaccftranstype, gaccfackcode, gaccffiletype, gaccfcontactref, gaccfreadref, gaccfreasoncode, gaccfapptextval, gaccfshippercode, gaccfmprn, gaccfadjstartdte, gaccfadjenddte, gaccfadjtype, gaccfdataitemchg, gaccfrvsdvou, gaccfrsnremarks, gaccffileread, gaccfdateread, gaccftimeread, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.accffile ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	a := Accffile{}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&a.Gaccftranstype, &a.Gaccfackcode, &a.Gaccffiletype, &a.Gaccfcontactref, &a.Gaccfreadref, &a.Gaccfreasoncode, &a.Gaccfapptextval, &a.Gaccfshippercode, &a.Gaccfmprn, &a.Gaccfadjstartdte, &a.Gaccfadjenddte, &a.Gaccfadjtype, &a.Gaccfdataitemchg, &a.Gaccfrvsdvou, &a.Gaccfrsnremarks, &a.Gaccffileread, &a.Gaccfdateread, &a.Gaccftimeread, &a.EquinoxPrn, &a.EquinoxLrn, &a.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &a, nil
}
