// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/lib/pq"
)

// Citylink represents a row from 'equinox.citylink'.
type Citylink struct {
	ClUniqueid     sql.NullInt64   `json:"cl_uniqueid"`     // cl_uniqueid
	ClAddress1     sql.NullString  `json:"cl_address1"`     // cl_address1
	ClAddress2     sql.NullString  `json:"cl_address2"`     // cl_address2
	ClAddress3     sql.NullString  `json:"cl_address3"`     // cl_address3
	ClAddress4     sql.NullString  `json:"cl_address4"`     // cl_address4
	ClPostcode     sql.NullString  `json:"cl_postcode"`     // cl_postcode
	ClBuildingname sql.NullString  `json:"cl_buildingname"` // cl_buildingname
	ClBuildingno   sql.NullString  `json:"cl_buildingno"`   // cl_buildingno
	ClStreet       sql.NullString  `json:"cl_street"`       // cl_street
	ClLocale       sql.NullString  `json:"cl_locale"`       // cl_locale
	ClPosttown     sql.NullString  `json:"cl_posttown"`     // cl_posttown
	ClCounty       sql.NullString  `json:"cl_county"`       // cl_county
	ClPacks        sql.NullInt64   `json:"cl_packs"`        // cl_packs
	ClName         sql.NullString  `json:"cl_name"`         // cl_name
	ClAccountname  sql.NullString  `json:"cl_accountname"`  // cl_accountname
	ClAccountno    sql.NullString  `json:"cl_accountno"`    // cl_accountno
	ClPrinted      sql.NullInt64   `json:"cl_printed"`      // cl_printed
	ClEntereddate  pq.NullTime     `json:"cl_entereddate"`  // cl_entereddate
	ClSource       sql.NullString  `json:"cl_source"`       // cl_source
	ClCreatefile   sql.NullInt64   `json:"cl_createfile"`   // cl_createfile
	ClSparec1      sql.NullString  `json:"cl_sparec1"`      // cl_sparec1
	ClSparec2      sql.NullString  `json:"cl_sparec2"`      // cl_sparec2
	ClSpared1      pq.NullTime     `json:"cl_spared1"`      // cl_spared1
	ClSpared2      pq.NullTime     `json:"cl_spared2"`      // cl_spared2
	ClSparen1      sql.NullFloat64 `json:"cl_sparen1"`      // cl_sparen1
	ClSparen2      sql.NullFloat64 `json:"cl_sparen2"`      // cl_sparen2
	ClTelno        sql.NullString  `json:"cl_telno"`        // cl_telno
	ClEmail        sql.NullString  `json:"cl_email"`        // cl_email
	ClDeliverytype sql.NullString  `json:"cl_deliverytype"` // cl_deliverytype
	EquinoxLrn     int64           `json:"equinox_lrn"`     // equinox_lrn
	EquinoxSec     sql.NullInt64   `json:"equinox_sec"`     // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Citylink exists in the database.
func (c *Citylink) Exists() bool {
	return c._exists
}

// Deleted provides information if the Citylink has been deleted from the database.
func (c *Citylink) Deleted() bool {
	return c._deleted
}

// Insert inserts the Citylink to the database.
func (c *Citylink) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.citylink (` +
		`cl_uniqueid, cl_address1, cl_address2, cl_address3, cl_address4, cl_postcode, cl_buildingname, cl_buildingno, cl_street, cl_locale, cl_posttown, cl_county, cl_packs, cl_name, cl_accountname, cl_accountno, cl_printed, cl_entereddate, cl_source, cl_createfile, cl_sparec1, cl_sparec2, cl_spared1, cl_spared2, cl_sparen1, cl_sparen2, cl_telno, cl_email, cl_deliverytype, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, c.ClUniqueid, c.ClAddress1, c.ClAddress2, c.ClAddress3, c.ClAddress4, c.ClPostcode, c.ClBuildingname, c.ClBuildingno, c.ClStreet, c.ClLocale, c.ClPosttown, c.ClCounty, c.ClPacks, c.ClName, c.ClAccountname, c.ClAccountno, c.ClPrinted, c.ClEntereddate, c.ClSource, c.ClCreatefile, c.ClSparec1, c.ClSparec2, c.ClSpared1, c.ClSpared2, c.ClSparen1, c.ClSparen2, c.ClTelno, c.ClEmail, c.ClDeliverytype, c.EquinoxSec)
	err = db.QueryRow(sqlstr, c.ClUniqueid, c.ClAddress1, c.ClAddress2, c.ClAddress3, c.ClAddress4, c.ClPostcode, c.ClBuildingname, c.ClBuildingno, c.ClStreet, c.ClLocale, c.ClPosttown, c.ClCounty, c.ClPacks, c.ClName, c.ClAccountname, c.ClAccountno, c.ClPrinted, c.ClEntereddate, c.ClSource, c.ClCreatefile, c.ClSparec1, c.ClSparec2, c.ClSpared1, c.ClSpared2, c.ClSparen1, c.ClSparen2, c.ClTelno, c.ClEmail, c.ClDeliverytype, c.EquinoxSec).Scan(&c.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Update updates the Citylink in the database.
func (c *Citylink) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if c._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.citylink SET (` +
		`cl_uniqueid, cl_address1, cl_address2, cl_address3, cl_address4, cl_postcode, cl_buildingname, cl_buildingno, cl_street, cl_locale, cl_posttown, cl_county, cl_packs, cl_name, cl_accountname, cl_accountno, cl_printed, cl_entereddate, cl_source, cl_createfile, cl_sparec1, cl_sparec2, cl_spared1, cl_spared2, cl_sparen1, cl_sparen2, cl_telno, cl_email, cl_deliverytype, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30` +
		`) WHERE equinox_lrn = $31`

	// run query
	XOLog(sqlstr, c.ClUniqueid, c.ClAddress1, c.ClAddress2, c.ClAddress3, c.ClAddress4, c.ClPostcode, c.ClBuildingname, c.ClBuildingno, c.ClStreet, c.ClLocale, c.ClPosttown, c.ClCounty, c.ClPacks, c.ClName, c.ClAccountname, c.ClAccountno, c.ClPrinted, c.ClEntereddate, c.ClSource, c.ClCreatefile, c.ClSparec1, c.ClSparec2, c.ClSpared1, c.ClSpared2, c.ClSparen1, c.ClSparen2, c.ClTelno, c.ClEmail, c.ClDeliverytype, c.EquinoxSec, c.EquinoxLrn)
	_, err = db.Exec(sqlstr, c.ClUniqueid, c.ClAddress1, c.ClAddress2, c.ClAddress3, c.ClAddress4, c.ClPostcode, c.ClBuildingname, c.ClBuildingno, c.ClStreet, c.ClLocale, c.ClPosttown, c.ClCounty, c.ClPacks, c.ClName, c.ClAccountname, c.ClAccountno, c.ClPrinted, c.ClEntereddate, c.ClSource, c.ClCreatefile, c.ClSparec1, c.ClSparec2, c.ClSpared1, c.ClSpared2, c.ClSparen1, c.ClSparen2, c.ClTelno, c.ClEmail, c.ClDeliverytype, c.EquinoxSec, c.EquinoxLrn)
	return err
}

// Save saves the Citylink to the database.
func (c *Citylink) Save(db XODB) error {
	if c.Exists() {
		return c.Update(db)
	}

	return c.Insert(db)
}

// Upsert performs an upsert for Citylink.
//
// NOTE: PostgreSQL 9.5+ only
func (c *Citylink) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.citylink (` +
		`cl_uniqueid, cl_address1, cl_address2, cl_address3, cl_address4, cl_postcode, cl_buildingname, cl_buildingno, cl_street, cl_locale, cl_posttown, cl_county, cl_packs, cl_name, cl_accountname, cl_accountno, cl_printed, cl_entereddate, cl_source, cl_createfile, cl_sparec1, cl_sparec2, cl_spared1, cl_spared2, cl_sparen1, cl_sparen2, cl_telno, cl_email, cl_deliverytype, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`cl_uniqueid, cl_address1, cl_address2, cl_address3, cl_address4, cl_postcode, cl_buildingname, cl_buildingno, cl_street, cl_locale, cl_posttown, cl_county, cl_packs, cl_name, cl_accountname, cl_accountno, cl_printed, cl_entereddate, cl_source, cl_createfile, cl_sparec1, cl_sparec2, cl_spared1, cl_spared2, cl_sparen1, cl_sparen2, cl_telno, cl_email, cl_deliverytype, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.cl_uniqueid, EXCLUDED.cl_address1, EXCLUDED.cl_address2, EXCLUDED.cl_address3, EXCLUDED.cl_address4, EXCLUDED.cl_postcode, EXCLUDED.cl_buildingname, EXCLUDED.cl_buildingno, EXCLUDED.cl_street, EXCLUDED.cl_locale, EXCLUDED.cl_posttown, EXCLUDED.cl_county, EXCLUDED.cl_packs, EXCLUDED.cl_name, EXCLUDED.cl_accountname, EXCLUDED.cl_accountno, EXCLUDED.cl_printed, EXCLUDED.cl_entereddate, EXCLUDED.cl_source, EXCLUDED.cl_createfile, EXCLUDED.cl_sparec1, EXCLUDED.cl_sparec2, EXCLUDED.cl_spared1, EXCLUDED.cl_spared2, EXCLUDED.cl_sparen1, EXCLUDED.cl_sparen2, EXCLUDED.cl_telno, EXCLUDED.cl_email, EXCLUDED.cl_deliverytype, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, c.ClUniqueid, c.ClAddress1, c.ClAddress2, c.ClAddress3, c.ClAddress4, c.ClPostcode, c.ClBuildingname, c.ClBuildingno, c.ClStreet, c.ClLocale, c.ClPosttown, c.ClCounty, c.ClPacks, c.ClName, c.ClAccountname, c.ClAccountno, c.ClPrinted, c.ClEntereddate, c.ClSource, c.ClCreatefile, c.ClSparec1, c.ClSparec2, c.ClSpared1, c.ClSpared2, c.ClSparen1, c.ClSparen2, c.ClTelno, c.ClEmail, c.ClDeliverytype, c.EquinoxLrn, c.EquinoxSec)
	_, err = db.Exec(sqlstr, c.ClUniqueid, c.ClAddress1, c.ClAddress2, c.ClAddress3, c.ClAddress4, c.ClPostcode, c.ClBuildingname, c.ClBuildingno, c.ClStreet, c.ClLocale, c.ClPosttown, c.ClCounty, c.ClPacks, c.ClName, c.ClAccountname, c.ClAccountno, c.ClPrinted, c.ClEntereddate, c.ClSource, c.ClCreatefile, c.ClSparec1, c.ClSparec2, c.ClSpared1, c.ClSpared2, c.ClSparen1, c.ClSparen2, c.ClTelno, c.ClEmail, c.ClDeliverytype, c.EquinoxLrn, c.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Delete deletes the Citylink from the database.
func (c *Citylink) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return nil
	}

	// if deleted, bail
	if c._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.citylink WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, c.EquinoxLrn)
	_, err = db.Exec(sqlstr, c.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	c._deleted = true

	return nil
}

// CitylinkByEquinoxLrn retrieves a row from 'equinox.citylink' as a Citylink.
//
// Generated from index 'citylink_pkey'.
func CitylinkByEquinoxLrn(db XODB, equinoxLrn int64) (*Citylink, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`cl_uniqueid, cl_address1, cl_address2, cl_address3, cl_address4, cl_postcode, cl_buildingname, cl_buildingno, cl_street, cl_locale, cl_posttown, cl_county, cl_packs, cl_name, cl_accountname, cl_accountno, cl_printed, cl_entereddate, cl_source, cl_createfile, cl_sparec1, cl_sparec2, cl_spared1, cl_spared2, cl_sparen1, cl_sparen2, cl_telno, cl_email, cl_deliverytype, equinox_lrn, equinox_sec ` +
		`FROM equinox.citylink ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	c := Citylink{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&c.ClUniqueid, &c.ClAddress1, &c.ClAddress2, &c.ClAddress3, &c.ClAddress4, &c.ClPostcode, &c.ClBuildingname, &c.ClBuildingno, &c.ClStreet, &c.ClLocale, &c.ClPosttown, &c.ClCounty, &c.ClPacks, &c.ClName, &c.ClAccountname, &c.ClAccountno, &c.ClPrinted, &c.ClEntereddate, &c.ClSource, &c.ClCreatefile, &c.ClSparec1, &c.ClSparec2, &c.ClSpared1, &c.ClSpared2, &c.ClSparen1, &c.ClSparen2, &c.ClTelno, &c.ClEmail, &c.ClDeliverytype, &c.EquinoxLrn, &c.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &c, nil
}
