// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/lib/pq"
)

// Udcclaim represents a row from 'equinox.udcclaim'.
type Udcclaim struct {
	Udccissuedate   pq.NullTime     `json:"udccissuedate"`   // udccissuedate
	Udccclaimno     sql.NullString  `json:"udccclaimno"`     // udccclaimno
	Udccrequestdate pq.NullTime     `json:"udccrequestdate"` // udccrequestdate
	Udcccomment     sql.NullInt64   `json:"udcccomment"`     // udcccomment
	Udccuniquesys   sql.NullInt64   `json:"udccuniquesys"`   // udccuniquesys
	Udcchearingdate pq.NullTime     `json:"udcchearingdate"` // udcchearingdate
	Udcchearingtype sql.NullString  `json:"udcchearingtype"` // udcchearingtype
	Udccclaimperiod sql.NullString  `json:"udccclaimperiod"` // udccclaimperiod
	Udccclaimamount sql.NullFloat64 `json:"udccclaimamount"` // udccclaimamount
	Udcccourtfee    sql.NullFloat64 `json:"udcccourtfee"`    // udcccourtfee
	EquinoxPrn      sql.NullInt64   `json:"equinox_prn"`     // equinox_prn
	EquinoxLrn      int64           `json:"equinox_lrn"`     // equinox_lrn
	EquinoxSec      sql.NullInt64   `json:"equinox_sec"`     // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Udcclaim exists in the database.
func (u *Udcclaim) Exists() bool {
	return u._exists
}

// Deleted provides information if the Udcclaim has been deleted from the database.
func (u *Udcclaim) Deleted() bool {
	return u._deleted
}

// Insert inserts the Udcclaim to the database.
func (u *Udcclaim) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if u._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.udcclaim (` +
		`udccissuedate, udccclaimno, udccrequestdate, udcccomment, udccuniquesys, udcchearingdate, udcchearingtype, udccclaimperiod, udccclaimamount, udcccourtfee, equinox_prn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, u.Udccissuedate, u.Udccclaimno, u.Udccrequestdate, u.Udcccomment, u.Udccuniquesys, u.Udcchearingdate, u.Udcchearingtype, u.Udccclaimperiod, u.Udccclaimamount, u.Udcccourtfee, u.EquinoxPrn, u.EquinoxSec)
	err = db.QueryRow(sqlstr, u.Udccissuedate, u.Udccclaimno, u.Udccrequestdate, u.Udcccomment, u.Udccuniquesys, u.Udcchearingdate, u.Udcchearingtype, u.Udccclaimperiod, u.Udccclaimamount, u.Udcccourtfee, u.EquinoxPrn, u.EquinoxSec).Scan(&u.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	u._exists = true

	return nil
}

// Update updates the Udcclaim in the database.
func (u *Udcclaim) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !u._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if u._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.udcclaim SET (` +
		`udccissuedate, udccclaimno, udccrequestdate, udcccomment, udccuniquesys, udcchearingdate, udcchearingtype, udccclaimperiod, udccclaimamount, udcccourtfee, equinox_prn, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12` +
		`) WHERE equinox_lrn = $13`

	// run query
	XOLog(sqlstr, u.Udccissuedate, u.Udccclaimno, u.Udccrequestdate, u.Udcccomment, u.Udccuniquesys, u.Udcchearingdate, u.Udcchearingtype, u.Udccclaimperiod, u.Udccclaimamount, u.Udcccourtfee, u.EquinoxPrn, u.EquinoxSec, u.EquinoxLrn)
	_, err = db.Exec(sqlstr, u.Udccissuedate, u.Udccclaimno, u.Udccrequestdate, u.Udcccomment, u.Udccuniquesys, u.Udcchearingdate, u.Udcchearingtype, u.Udccclaimperiod, u.Udccclaimamount, u.Udcccourtfee, u.EquinoxPrn, u.EquinoxSec, u.EquinoxLrn)
	return err
}

// Save saves the Udcclaim to the database.
func (u *Udcclaim) Save(db XODB) error {
	if u.Exists() {
		return u.Update(db)
	}

	return u.Insert(db)
}

// Upsert performs an upsert for Udcclaim.
//
// NOTE: PostgreSQL 9.5+ only
func (u *Udcclaim) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if u._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.udcclaim (` +
		`udccissuedate, udccclaimno, udccrequestdate, udcccomment, udccuniquesys, udcchearingdate, udcchearingtype, udccclaimperiod, udccclaimamount, udcccourtfee, equinox_prn, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`udccissuedate, udccclaimno, udccrequestdate, udcccomment, udccuniquesys, udcchearingdate, udcchearingtype, udccclaimperiod, udccclaimamount, udcccourtfee, equinox_prn, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.udccissuedate, EXCLUDED.udccclaimno, EXCLUDED.udccrequestdate, EXCLUDED.udcccomment, EXCLUDED.udccuniquesys, EXCLUDED.udcchearingdate, EXCLUDED.udcchearingtype, EXCLUDED.udccclaimperiod, EXCLUDED.udccclaimamount, EXCLUDED.udcccourtfee, EXCLUDED.equinox_prn, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, u.Udccissuedate, u.Udccclaimno, u.Udccrequestdate, u.Udcccomment, u.Udccuniquesys, u.Udcchearingdate, u.Udcchearingtype, u.Udccclaimperiod, u.Udccclaimamount, u.Udcccourtfee, u.EquinoxPrn, u.EquinoxLrn, u.EquinoxSec)
	_, err = db.Exec(sqlstr, u.Udccissuedate, u.Udccclaimno, u.Udccrequestdate, u.Udcccomment, u.Udccuniquesys, u.Udcchearingdate, u.Udcchearingtype, u.Udccclaimperiod, u.Udccclaimamount, u.Udcccourtfee, u.EquinoxPrn, u.EquinoxLrn, u.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	u._exists = true

	return nil
}

// Delete deletes the Udcclaim from the database.
func (u *Udcclaim) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !u._exists {
		return nil
	}

	// if deleted, bail
	if u._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.udcclaim WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, u.EquinoxLrn)
	_, err = db.Exec(sqlstr, u.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	u._deleted = true

	return nil
}

// UdcclaimByEquinoxLrn retrieves a row from 'equinox.udcclaim' as a Udcclaim.
//
// Generated from index 'udcclaim_pkey'.
func UdcclaimByEquinoxLrn(db XODB, equinoxLrn int64) (*Udcclaim, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`udccissuedate, udccclaimno, udccrequestdate, udcccomment, udccuniquesys, udcchearingdate, udcchearingtype, udccclaimperiod, udccclaimamount, udcccourtfee, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.udcclaim ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	u := Udcclaim{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&u.Udccissuedate, &u.Udccclaimno, &u.Udccrequestdate, &u.Udcccomment, &u.Udccuniquesys, &u.Udcchearingdate, &u.Udcchearingtype, &u.Udccclaimperiod, &u.Udccclaimamount, &u.Udcccourtfee, &u.EquinoxPrn, &u.EquinoxLrn, &u.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &u, nil
}
