// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import "database/sql"

// Sharopt represents a row from 'equinox.sharopts'.
type Sharopt struct {
	Soexid     sql.NullString `json:"soexid"`      // soexid
	EquinoxLrn int64          `json:"equinox_lrn"` // equinox_lrn
	EquinoxSec sql.NullInt64  `json:"equinox_sec"` // equinox_sec
}

func AllSharopt(db XODB, callback func(x Sharopt) bool) error {

	// sql query
	const sqlstr = `SELECT ` +
		`soexid, equinox_lrn, equinox_sec ` +
		`FROM equinox.sharopts `

	q, err := db.Query(sqlstr)

	if err != nil {
		return err
	}
	defer q.Close()

	// load results
	for q.Next() {
		s := Sharopt{}

		// scan
		err = q.Scan(&s.Soexid, &s.EquinoxLrn, &s.EquinoxSec)
		if err != nil {
			return err
		}
		if !callback(s) {
			return nil
		}
	}

	return nil
}

// SharoptByEquinoxLrn retrieves a row from 'equinox.sharopts' as a Sharopt.
//
// Generated from index 'sharopts_pkey'.
func SharoptByEquinoxLrn(db XODB, equinoxLrn int64) (*Sharopt, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`soexid, equinox_lrn, equinox_sec ` +
		`FROM equinox.sharopts ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	s := Sharopt{}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&s.Soexid, &s.EquinoxLrn, &s.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &s, nil
}
