// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"

	"github.com/lib/pq"
)

// Property represents a row from 'equinox.property'.
type Property struct {
	Propertyid       sql.NullInt64   `json:"propertyid"`       // propertyid
	Propertyname     sql.NullString  `json:"propertyname"`     // propertyname
	Propertytable    sql.NullString  `json:"propertytable"`    // propertytable
	Propertyvalname  sql.NullString  `json:"propertyvalname"`  // propertyvalname
	Propertyblankok  sql.NullString  `json:"propertyblankok"`  // propertyblankok
	Propertydatatype sql.NullString  `json:"propertydatatype"` // propertydatatype
	Propertyvalues   sql.NullInt64   `json:"propertyvalues"`   // propertyvalues
	Propertydescript sql.NullString  `json:"propertydescript"` // propertydescript
	Propertynotes    sql.NullString  `json:"propertynotes"`    // propertynotes
	Propertychar1    sql.NullString  `json:"propertychar1"`    // propertychar1
	Propertychar2    sql.NullString  `json:"propertychar2"`    // propertychar2
	Propertynum1     sql.NullFloat64 `json:"propertynum1"`     // propertynum1
	Propertynum2     sql.NullFloat64 `json:"propertynum2"`     // propertynum2
	Propertydate1    pq.NullTime     `json:"propertydate1"`    // propertydate1
	EquinoxLrn       int64           `json:"equinox_lrn"`      // equinox_lrn
	EquinoxSec       sql.NullInt64   `json:"equinox_sec"`      // equinox_sec
}

func AllProperty(db XODB, callback func(x Property) bool) error {

	// sql query
	const sqlstr = `SELECT ` +
		`propertyid, propertyname, propertytable, propertyvalname, propertyblankok, propertydatatype, propertyvalues, propertydescript, propertynotes, propertychar1, propertychar2, propertynum1, propertynum2, propertydate1, equinox_lrn, equinox_sec ` +
		`FROM equinox.property `

	q, err := db.Query(sqlstr)

	if err != nil {
		return err
	}
	defer q.Close()

	// load results
	for q.Next() {
		p := Property{}

		// scan
		err = q.Scan(&p.Propertyid, &p.Propertyname, &p.Propertytable, &p.Propertyvalname, &p.Propertyblankok, &p.Propertydatatype, &p.Propertyvalues, &p.Propertydescript, &p.Propertynotes, &p.Propertychar1, &p.Propertychar2, &p.Propertynum1, &p.Propertynum2, &p.Propertydate1, &p.EquinoxLrn, &p.EquinoxSec)
		if err != nil {
			return err
		}
		if !callback(p) {
			return nil
		}
	}

	return nil
}

// PropertyByEquinoxLrn retrieves a row from 'equinox.property' as a Property.
//
// Generated from index 'property_pkey'.
func PropertyByEquinoxLrn(db XODB, equinoxLrn int64) (*Property, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`propertyid, propertyname, propertytable, propertyvalname, propertyblankok, propertydatatype, propertyvalues, propertydescript, propertynotes, propertychar1, propertychar2, propertynum1, propertynum2, propertydate1, equinox_lrn, equinox_sec ` +
		`FROM equinox.property ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	p := Property{}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&p.Propertyid, &p.Propertyname, &p.Propertytable, &p.Propertyvalname, &p.Propertyblankok, &p.Propertydatatype, &p.Propertyvalues, &p.Propertydescript, &p.Propertynotes, &p.Propertychar1, &p.Propertychar2, &p.Propertynum1, &p.Propertynum2, &p.Propertydate1, &p.EquinoxLrn, &p.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &p, nil
}
