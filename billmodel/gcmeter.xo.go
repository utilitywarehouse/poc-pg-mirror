// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/lib/pq"
)

// Gcmeter represents a row from 'equinox.gcmeter'.
type Gcmeter struct {
	Gcintmeterregid sql.NullFloat64 `json:"gcintmeterregid"` // gcintmeterregid
	Gcmetertpr      sql.NullInt64   `json:"gcmetertpr"`      // gcmetertpr
	Gcmeterserialid sql.NullString  `json:"gcmeterserialid"` // gcmeterserialid
	Gcmeterregid    sql.NullString  `json:"gcmeterregid"`    // gcmeterregid
	Gcmeterdials    sql.NullInt64   `json:"gcmeterdials"`    // gcmeterdials
	Gcregtype       sql.NullString  `json:"gcregtype"`       // gcregtype
	Gcregeac        sql.NullInt64   `json:"gcregeac"`        // gcregeac
	Gcinstalldate   pq.NullTime     `json:"gcinstalldate"`   // gcinstalldate
	Gcstartdate     pq.NullTime     `json:"gcstartdate"`     // gcstartdate
	Gcsparen1       sql.NullFloat64 `json:"gcsparen1"`       // gcsparen1
	Gcmpan          sql.NullString  `json:"gcmpan"`          // gcmpan
	Gcefffrom       pq.NullTime     `json:"gcefffrom"`       // gcefffrom
	Gcmetertype     sql.NullString  `json:"gcmetertype"`     // gcmetertype
	EquinoxPrn      sql.NullInt64   `json:"equinox_prn"`     // equinox_prn
	EquinoxLrn      int64           `json:"equinox_lrn"`     // equinox_lrn
	EquinoxSec      sql.NullInt64   `json:"equinox_sec"`     // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Gcmeter exists in the database.
func (g *Gcmeter) Exists() bool {
	return g._exists
}

// Deleted provides information if the Gcmeter has been deleted from the database.
func (g *Gcmeter) Deleted() bool {
	return g._deleted
}

// Insert inserts the Gcmeter to the database.
func (g *Gcmeter) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if g._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.gcmeter (` +
		`gcintmeterregid, gcmetertpr, gcmeterserialid, gcmeterregid, gcmeterdials, gcregtype, gcregeac, gcinstalldate, gcstartdate, gcsparen1, gcmpan, gcefffrom, gcmetertype, equinox_prn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, g.Gcintmeterregid, g.Gcmetertpr, g.Gcmeterserialid, g.Gcmeterregid, g.Gcmeterdials, g.Gcregtype, g.Gcregeac, g.Gcinstalldate, g.Gcstartdate, g.Gcsparen1, g.Gcmpan, g.Gcefffrom, g.Gcmetertype, g.EquinoxPrn, g.EquinoxSec)
	err = db.QueryRow(sqlstr, g.Gcintmeterregid, g.Gcmetertpr, g.Gcmeterserialid, g.Gcmeterregid, g.Gcmeterdials, g.Gcregtype, g.Gcregeac, g.Gcinstalldate, g.Gcstartdate, g.Gcsparen1, g.Gcmpan, g.Gcefffrom, g.Gcmetertype, g.EquinoxPrn, g.EquinoxSec).Scan(&g.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	g._exists = true

	return nil
}

// Update updates the Gcmeter in the database.
func (g *Gcmeter) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !g._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if g._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.gcmeter SET (` +
		`gcintmeterregid, gcmetertpr, gcmeterserialid, gcmeterregid, gcmeterdials, gcregtype, gcregeac, gcinstalldate, gcstartdate, gcsparen1, gcmpan, gcefffrom, gcmetertype, equinox_prn, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15` +
		`) WHERE equinox_lrn = $16`

	// run query
	XOLog(sqlstr, g.Gcintmeterregid, g.Gcmetertpr, g.Gcmeterserialid, g.Gcmeterregid, g.Gcmeterdials, g.Gcregtype, g.Gcregeac, g.Gcinstalldate, g.Gcstartdate, g.Gcsparen1, g.Gcmpan, g.Gcefffrom, g.Gcmetertype, g.EquinoxPrn, g.EquinoxSec, g.EquinoxLrn)
	_, err = db.Exec(sqlstr, g.Gcintmeterregid, g.Gcmetertpr, g.Gcmeterserialid, g.Gcmeterregid, g.Gcmeterdials, g.Gcregtype, g.Gcregeac, g.Gcinstalldate, g.Gcstartdate, g.Gcsparen1, g.Gcmpan, g.Gcefffrom, g.Gcmetertype, g.EquinoxPrn, g.EquinoxSec, g.EquinoxLrn)
	return err
}

// Save saves the Gcmeter to the database.
func (g *Gcmeter) Save(db XODB) error {
	if g.Exists() {
		return g.Update(db)
	}

	return g.Insert(db)
}

// Upsert performs an upsert for Gcmeter.
//
// NOTE: PostgreSQL 9.5+ only
func (g *Gcmeter) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if g._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.gcmeter (` +
		`gcintmeterregid, gcmetertpr, gcmeterserialid, gcmeterregid, gcmeterdials, gcregtype, gcregeac, gcinstalldate, gcstartdate, gcsparen1, gcmpan, gcefffrom, gcmetertype, equinox_prn, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`gcintmeterregid, gcmetertpr, gcmeterserialid, gcmeterregid, gcmeterdials, gcregtype, gcregeac, gcinstalldate, gcstartdate, gcsparen1, gcmpan, gcefffrom, gcmetertype, equinox_prn, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.gcintmeterregid, EXCLUDED.gcmetertpr, EXCLUDED.gcmeterserialid, EXCLUDED.gcmeterregid, EXCLUDED.gcmeterdials, EXCLUDED.gcregtype, EXCLUDED.gcregeac, EXCLUDED.gcinstalldate, EXCLUDED.gcstartdate, EXCLUDED.gcsparen1, EXCLUDED.gcmpan, EXCLUDED.gcefffrom, EXCLUDED.gcmetertype, EXCLUDED.equinox_prn, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, g.Gcintmeterregid, g.Gcmetertpr, g.Gcmeterserialid, g.Gcmeterregid, g.Gcmeterdials, g.Gcregtype, g.Gcregeac, g.Gcinstalldate, g.Gcstartdate, g.Gcsparen1, g.Gcmpan, g.Gcefffrom, g.Gcmetertype, g.EquinoxPrn, g.EquinoxLrn, g.EquinoxSec)
	_, err = db.Exec(sqlstr, g.Gcintmeterregid, g.Gcmetertpr, g.Gcmeterserialid, g.Gcmeterregid, g.Gcmeterdials, g.Gcregtype, g.Gcregeac, g.Gcinstalldate, g.Gcstartdate, g.Gcsparen1, g.Gcmpan, g.Gcefffrom, g.Gcmetertype, g.EquinoxPrn, g.EquinoxLrn, g.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	g._exists = true

	return nil
}

// Delete deletes the Gcmeter from the database.
func (g *Gcmeter) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !g._exists {
		return nil
	}

	// if deleted, bail
	if g._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.gcmeter WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, g.EquinoxLrn)
	_, err = db.Exec(sqlstr, g.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	g._deleted = true

	return nil
}

// GcmeterByEquinoxLrn retrieves a row from 'equinox.gcmeter' as a Gcmeter.
//
// Generated from index 'gcmeter_pkey'.
func GcmeterByEquinoxLrn(db XODB, equinoxLrn int64) (*Gcmeter, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`gcintmeterregid, gcmetertpr, gcmeterserialid, gcmeterregid, gcmeterdials, gcregtype, gcregeac, gcinstalldate, gcstartdate, gcsparen1, gcmpan, gcefffrom, gcmetertype, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.gcmeter ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	g := Gcmeter{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&g.Gcintmeterregid, &g.Gcmetertpr, &g.Gcmeterserialid, &g.Gcmeterregid, &g.Gcmeterdials, &g.Gcregtype, &g.Gcregeac, &g.Gcinstalldate, &g.Gcstartdate, &g.Gcsparen1, &g.Gcmpan, &g.Gcefffrom, &g.Gcmetertype, &g.EquinoxPrn, &g.EquinoxLrn, &g.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &g, nil
}
