// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/lib/pq"
)

// Equip represents a row from 'equinox.equip'.
type Equip struct {
	Equipsysnumber   sql.NullFloat64 `json:"equipsysnumber"`   // equipsysnumber
	Equipmanufacture sql.NullString  `json:"equipmanufacture"` // equipmanufacture
	Equipmodel       sql.NullString  `json:"equipmodel"`       // equipmodel
	Equipserialno    sql.NullString  `json:"equipserialno"`    // equipserialno
	Equiptype        sql.NullString  `json:"equiptype"`        // equiptype
	Equipname        sql.NullString  `json:"equipname"`        // equipname
	Equipmanagement  sql.NullString  `json:"equipmanagement"`  // equipmanagement
	Equipinstalldate pq.NullTime     `json:"equipinstalldate"` // equipinstalldate
	Equipengineer    sql.NullString  `json:"equipengineer"`    // equipengineer
	Equipservicecall sql.NullString  `json:"equipservicecall"` // equipservicecall
	Equiporiunsubpri sql.NullFloat64 `json:"equiporiunsubpri"` // equiporiunsubpri
	EquinoxPrn       sql.NullInt64   `json:"equinox_prn"`      // equinox_prn
	EquinoxLrn       int64           `json:"equinox_lrn"`      // equinox_lrn
	EquinoxSec       sql.NullInt64   `json:"equinox_sec"`      // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Equip exists in the database.
func (e *Equip) Exists() bool {
	return e._exists
}

// Deleted provides information if the Equip has been deleted from the database.
func (e *Equip) Deleted() bool {
	return e._deleted
}

// Insert inserts the Equip to the database.
func (e *Equip) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if e._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.equip (` +
		`equipsysnumber, equipmanufacture, equipmodel, equipserialno, equiptype, equipname, equipmanagement, equipinstalldate, equipengineer, equipservicecall, equiporiunsubpri, equinox_prn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, e.Equipsysnumber, e.Equipmanufacture, e.Equipmodel, e.Equipserialno, e.Equiptype, e.Equipname, e.Equipmanagement, e.Equipinstalldate, e.Equipengineer, e.Equipservicecall, e.Equiporiunsubpri, e.EquinoxPrn, e.EquinoxSec)
	err = db.QueryRow(sqlstr, e.Equipsysnumber, e.Equipmanufacture, e.Equipmodel, e.Equipserialno, e.Equiptype, e.Equipname, e.Equipmanagement, e.Equipinstalldate, e.Equipengineer, e.Equipservicecall, e.Equiporiunsubpri, e.EquinoxPrn, e.EquinoxSec).Scan(&e.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	e._exists = true

	return nil
}

// Update updates the Equip in the database.
func (e *Equip) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !e._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if e._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.equip SET (` +
		`equipsysnumber, equipmanufacture, equipmodel, equipserialno, equiptype, equipname, equipmanagement, equipinstalldate, equipengineer, equipservicecall, equiporiunsubpri, equinox_prn, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13` +
		`) WHERE equinox_lrn = $14`

	// run query
	XOLog(sqlstr, e.Equipsysnumber, e.Equipmanufacture, e.Equipmodel, e.Equipserialno, e.Equiptype, e.Equipname, e.Equipmanagement, e.Equipinstalldate, e.Equipengineer, e.Equipservicecall, e.Equiporiunsubpri, e.EquinoxPrn, e.EquinoxSec, e.EquinoxLrn)
	_, err = db.Exec(sqlstr, e.Equipsysnumber, e.Equipmanufacture, e.Equipmodel, e.Equipserialno, e.Equiptype, e.Equipname, e.Equipmanagement, e.Equipinstalldate, e.Equipengineer, e.Equipservicecall, e.Equiporiunsubpri, e.EquinoxPrn, e.EquinoxSec, e.EquinoxLrn)
	return err
}

// Save saves the Equip to the database.
func (e *Equip) Save(db XODB) error {
	if e.Exists() {
		return e.Update(db)
	}

	return e.Insert(db)
}

// Upsert performs an upsert for Equip.
//
// NOTE: PostgreSQL 9.5+ only
func (e *Equip) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if e._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.equip (` +
		`equipsysnumber, equipmanufacture, equipmodel, equipserialno, equiptype, equipname, equipmanagement, equipinstalldate, equipengineer, equipservicecall, equiporiunsubpri, equinox_prn, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`equipsysnumber, equipmanufacture, equipmodel, equipserialno, equiptype, equipname, equipmanagement, equipinstalldate, equipengineer, equipservicecall, equiporiunsubpri, equinox_prn, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.equipsysnumber, EXCLUDED.equipmanufacture, EXCLUDED.equipmodel, EXCLUDED.equipserialno, EXCLUDED.equiptype, EXCLUDED.equipname, EXCLUDED.equipmanagement, EXCLUDED.equipinstalldate, EXCLUDED.equipengineer, EXCLUDED.equipservicecall, EXCLUDED.equiporiunsubpri, EXCLUDED.equinox_prn, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, e.Equipsysnumber, e.Equipmanufacture, e.Equipmodel, e.Equipserialno, e.Equiptype, e.Equipname, e.Equipmanagement, e.Equipinstalldate, e.Equipengineer, e.Equipservicecall, e.Equiporiunsubpri, e.EquinoxPrn, e.EquinoxLrn, e.EquinoxSec)
	_, err = db.Exec(sqlstr, e.Equipsysnumber, e.Equipmanufacture, e.Equipmodel, e.Equipserialno, e.Equiptype, e.Equipname, e.Equipmanagement, e.Equipinstalldate, e.Equipengineer, e.Equipservicecall, e.Equiporiunsubpri, e.EquinoxPrn, e.EquinoxLrn, e.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	e._exists = true

	return nil
}

// Delete deletes the Equip from the database.
func (e *Equip) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !e._exists {
		return nil
	}

	// if deleted, bail
	if e._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.equip WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, e.EquinoxLrn)
	_, err = db.Exec(sqlstr, e.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	e._deleted = true

	return nil
}

// EquipByEquinoxLrn retrieves a row from 'equinox.equip' as a Equip.
//
// Generated from index 'equip_pkey'.
func EquipByEquinoxLrn(db XODB, equinoxLrn int64) (*Equip, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`equipsysnumber, equipmanufacture, equipmodel, equipserialno, equiptype, equipname, equipmanagement, equipinstalldate, equipengineer, equipservicecall, equiporiunsubpri, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.equip ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	e := Equip{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&e.Equipsysnumber, &e.Equipmanufacture, &e.Equipmodel, &e.Equipserialno, &e.Equiptype, &e.Equipname, &e.Equipmanagement, &e.Equipinstalldate, &e.Equipengineer, &e.Equipservicecall, &e.Equiporiunsubpri, &e.EquinoxPrn, &e.EquinoxLrn, &e.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &e, nil
}
