// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"

	"github.com/lib/pq"
)

// Billmsg represents a row from 'equinox.billmsgs'.
type Billmsg struct {
	Bmsgcustaccount  sql.NullString `json:"bmsgcustaccount"`  // bmsgcustaccount
	Bmsgmessageid    sql.NullString `json:"bmsgmessageid"`    // bmsgmessageid
	Bmsgsentdate     pq.NullTime    `json:"bmsgsentdate"`     // bmsgsentdate
	Bmsgresponsedate pq.NullTime    `json:"bmsgresponsedate"` // bmsgresponsedate
	Bmgsresponseby   sql.NullString `json:"bmgsresponseby"`   // bmgsresponseby
	EquinoxLrn       int64          `json:"equinox_lrn"`      // equinox_lrn
	EquinoxSec       sql.NullInt64  `json:"equinox_sec"`      // equinox_sec
}

func AllBillmsg(db XODB, callback func(x Billmsg) bool) error {

	// sql query
	const sqlstr = `SELECT ` +
		`bmsgcustaccount, bmsgmessageid, bmsgsentdate, bmsgresponsedate, bmgsresponseby, equinox_lrn, equinox_sec ` +
		`FROM equinox.billmsgs `

	q, err := db.Query(sqlstr)

	if err != nil {
		return err
	}
	defer q.Close()

	// load results
	for q.Next() {
		b := Billmsg{}

		// scan
		err = q.Scan(&b.Bmsgcustaccount, &b.Bmsgmessageid, &b.Bmsgsentdate, &b.Bmsgresponsedate, &b.Bmgsresponseby, &b.EquinoxLrn, &b.EquinoxSec)
		if err != nil {
			return err
		}
		if !callback(b) {
			return nil
		}
	}

	return nil
}

// BillmsgByEquinoxLrn retrieves a row from 'equinox.billmsgs' as a Billmsg.
//
// Generated from index 'billmsgs_pkey'.
func BillmsgByEquinoxLrn(db XODB, equinoxLrn int64) (*Billmsg, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`bmsgcustaccount, bmsgmessageid, bmsgsentdate, bmsgresponsedate, bmgsresponseby, equinox_lrn, equinox_sec ` +
		`FROM equinox.billmsgs ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	b := Billmsg{}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&b.Bmsgcustaccount, &b.Bmsgmessageid, &b.Bmsgsentdate, &b.Bmsgresponsedate, &b.Bmgsresponseby, &b.EquinoxLrn, &b.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &b, nil
}
