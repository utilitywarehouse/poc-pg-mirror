// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// Optmonth represents a row from 'equinox.optmonth'.
type Optmonth struct {
	Ommonth         sql.NullString `json:"ommonth"`         // ommonth
	Omcustsnqservs1 sql.NullInt64  `json:"omcustsnqservs1"` // omcustsnqservs1
	Omcustsnqservs2 sql.NullInt64  `json:"omcustsnqservs2"` // omcustsnqservs2
	Omcustsnqservs3 sql.NullInt64  `json:"omcustsnqservs3"` // omcustsnqservs3
	Omcustsnqservs4 sql.NullInt64  `json:"omcustsnqservs4"` // omcustsnqservs4
	Omcustsnqservs5 sql.NullInt64  `json:"omcustsnqservs5"` // omcustsnqservs5
	Omcustsqservs1  sql.NullInt64  `json:"omcustsqservs1"`  // omcustsqservs1
	Omcustsqservs2  sql.NullInt64  `json:"omcustsqservs2"`  // omcustsqservs2
	Omcustsqservs3  sql.NullInt64  `json:"omcustsqservs3"`  // omcustsqservs3
	Omcustsqservs4  sql.NullInt64  `json:"omcustsqservs4"`  // omcustsqservs4
	Omcustsqservs5  sql.NullInt64  `json:"omcustsqservs5"`  // omcustsqservs5
	EquinoxPrn      sql.NullInt64  `json:"equinox_prn"`     // equinox_prn
	EquinoxLrn      int64          `json:"equinox_lrn"`     // equinox_lrn
	EquinoxSec      sql.NullInt64  `json:"equinox_sec"`     // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Optmonth exists in the database.
func (o *Optmonth) Exists() bool {
	return o._exists
}

// Deleted provides information if the Optmonth has been deleted from the database.
func (o *Optmonth) Deleted() bool {
	return o._deleted
}

// Insert inserts the Optmonth to the database.
func (o *Optmonth) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if o._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.optmonth (` +
		`ommonth, omcustsnqservs1, omcustsnqservs2, omcustsnqservs3, omcustsnqservs4, omcustsnqservs5, omcustsqservs1, omcustsqservs2, omcustsqservs3, omcustsqservs4, omcustsqservs5, equinox_prn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, o.Ommonth, o.Omcustsnqservs1, o.Omcustsnqservs2, o.Omcustsnqservs3, o.Omcustsnqservs4, o.Omcustsnqservs5, o.Omcustsqservs1, o.Omcustsqservs2, o.Omcustsqservs3, o.Omcustsqservs4, o.Omcustsqservs5, o.EquinoxPrn, o.EquinoxSec)
	err = db.QueryRow(sqlstr, o.Ommonth, o.Omcustsnqservs1, o.Omcustsnqservs2, o.Omcustsnqservs3, o.Omcustsnqservs4, o.Omcustsnqservs5, o.Omcustsqservs1, o.Omcustsqservs2, o.Omcustsqservs3, o.Omcustsqservs4, o.Omcustsqservs5, o.EquinoxPrn, o.EquinoxSec).Scan(&o.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	o._exists = true

	return nil
}

// Update updates the Optmonth in the database.
func (o *Optmonth) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !o._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if o._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.optmonth SET (` +
		`ommonth, omcustsnqservs1, omcustsnqservs2, omcustsnqservs3, omcustsnqservs4, omcustsnqservs5, omcustsqservs1, omcustsqservs2, omcustsqservs3, omcustsqservs4, omcustsqservs5, equinox_prn, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13` +
		`) WHERE equinox_lrn = $14`

	// run query
	XOLog(sqlstr, o.Ommonth, o.Omcustsnqservs1, o.Omcustsnqservs2, o.Omcustsnqservs3, o.Omcustsnqservs4, o.Omcustsnqservs5, o.Omcustsqservs1, o.Omcustsqservs2, o.Omcustsqservs3, o.Omcustsqservs4, o.Omcustsqservs5, o.EquinoxPrn, o.EquinoxSec, o.EquinoxLrn)
	_, err = db.Exec(sqlstr, o.Ommonth, o.Omcustsnqservs1, o.Omcustsnqservs2, o.Omcustsnqservs3, o.Omcustsnqservs4, o.Omcustsnqservs5, o.Omcustsqservs1, o.Omcustsqservs2, o.Omcustsqservs3, o.Omcustsqservs4, o.Omcustsqservs5, o.EquinoxPrn, o.EquinoxSec, o.EquinoxLrn)
	return err
}

// Save saves the Optmonth to the database.
func (o *Optmonth) Save(db XODB) error {
	if o.Exists() {
		return o.Update(db)
	}

	return o.Insert(db)
}

// Upsert performs an upsert for Optmonth.
//
// NOTE: PostgreSQL 9.5+ only
func (o *Optmonth) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if o._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.optmonth (` +
		`ommonth, omcustsnqservs1, omcustsnqservs2, omcustsnqservs3, omcustsnqservs4, omcustsnqservs5, omcustsqservs1, omcustsqservs2, omcustsqservs3, omcustsqservs4, omcustsqservs5, equinox_prn, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`ommonth, omcustsnqservs1, omcustsnqservs2, omcustsnqservs3, omcustsnqservs4, omcustsnqservs5, omcustsqservs1, omcustsqservs2, omcustsqservs3, omcustsqservs4, omcustsqservs5, equinox_prn, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.ommonth, EXCLUDED.omcustsnqservs1, EXCLUDED.omcustsnqservs2, EXCLUDED.omcustsnqservs3, EXCLUDED.omcustsnqservs4, EXCLUDED.omcustsnqservs5, EXCLUDED.omcustsqservs1, EXCLUDED.omcustsqservs2, EXCLUDED.omcustsqservs3, EXCLUDED.omcustsqservs4, EXCLUDED.omcustsqservs5, EXCLUDED.equinox_prn, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, o.Ommonth, o.Omcustsnqservs1, o.Omcustsnqservs2, o.Omcustsnqservs3, o.Omcustsnqservs4, o.Omcustsnqservs5, o.Omcustsqservs1, o.Omcustsqservs2, o.Omcustsqservs3, o.Omcustsqservs4, o.Omcustsqservs5, o.EquinoxPrn, o.EquinoxLrn, o.EquinoxSec)
	_, err = db.Exec(sqlstr, o.Ommonth, o.Omcustsnqservs1, o.Omcustsnqservs2, o.Omcustsnqservs3, o.Omcustsnqservs4, o.Omcustsnqservs5, o.Omcustsqservs1, o.Omcustsqservs2, o.Omcustsqservs3, o.Omcustsqservs4, o.Omcustsqservs5, o.EquinoxPrn, o.EquinoxLrn, o.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	o._exists = true

	return nil
}

// Delete deletes the Optmonth from the database.
func (o *Optmonth) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !o._exists {
		return nil
	}

	// if deleted, bail
	if o._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.optmonth WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, o.EquinoxLrn)
	_, err = db.Exec(sqlstr, o.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	o._deleted = true

	return nil
}

// OptmonthByEquinoxLrn retrieves a row from 'equinox.optmonth' as a Optmonth.
//
// Generated from index 'optmonth_pkey'.
func OptmonthByEquinoxLrn(db XODB, equinoxLrn int64) (*Optmonth, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`ommonth, omcustsnqservs1, omcustsnqservs2, omcustsnqservs3, omcustsnqservs4, omcustsnqservs5, omcustsqservs1, omcustsqservs2, omcustsqservs3, omcustsqservs4, omcustsqservs5, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.optmonth ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	o := Optmonth{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&o.Ommonth, &o.Omcustsnqservs1, &o.Omcustsnqservs2, &o.Omcustsnqservs3, &o.Omcustsnqservs4, &o.Omcustsnqservs5, &o.Omcustsqservs1, &o.Omcustsqservs2, &o.Omcustsqservs3, &o.Omcustsqservs4, &o.Omcustsqservs5, &o.EquinoxPrn, &o.EquinoxLrn, &o.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &o, nil
}
