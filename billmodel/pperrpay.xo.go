// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/lib/pq"
)

// Pperrpay represents a row from 'equinox.pperrpay'.
type Pperrpay struct {
	Pperrpaydt       pq.NullTime     `json:"pperrpaydt"`       // pperrpaydt
	Pperrpaytm       pq.NullTime     `json:"pperrpaytm"`       // pperrpaytm
	Pperrpayamt      sql.NullFloat64 `json:"pperrpayamt"`      // pperrpayamt
	Pperrpayoutlet   sql.NullString  `json:"pperrpayoutlet"`   // pperrpayoutlet
	Pperrpaympid     sql.NullString  `json:"pperrpaympid"`     // pperrpaympid
	Pperrpaytca      sql.NullInt64   `json:"pperrpaytca"`      // pperrpaytca
	Pperrpayinfdt    pq.NullTime     `json:"pperrpayinfdt"`    // pperrpayinfdt
	Pperrpaybal      sql.NullFloat64 `json:"pperrpaybal"`      // pperrpaybal
	Pperrpaystdchrg  sql.NullFloat64 `json:"pperrpaystdchrg"`  // pperrpaystdchrg
	Pperrpaydyrt     sql.NullFloat64 `json:"pperrpaydyrt"`     // pperrpaydyrt
	Pperrpayngtrt    sql.NullFloat64 `json:"pperrpayngtrt"`    // pperrpayngtrt
	Pperrpaytransno  sql.NullInt64   `json:"pperrpaytransno"`  // pperrpaytransno
	Pperrpayadded    pq.NullTime     `json:"pperrpayadded"`    // pperrpayadded
	Pperrpayalloc    pq.NullTime     `json:"pperrpayalloc"`    // pperrpayalloc
	Pperrpayallocto  sql.NullString  `json:"pperrpayallocto"`  // pperrpayallocto
	Pperrpayrefunded pq.NullTime     `json:"pperrpayrefunded"` // pperrpayrefunded
	Pperrpayrefto    sql.NullString  `json:"pperrpayrefto"`    // pperrpayrefto
	Pperrpayorigref  sql.NullString  `json:"pperrpayorigref"`  // pperrpayorigref
	Pperrpaysrc      sql.NullString  `json:"pperrpaysrc"`      // pperrpaysrc
	EquinoxPrn       sql.NullInt64   `json:"equinox_prn"`      // equinox_prn
	EquinoxLrn       int64           `json:"equinox_lrn"`      // equinox_lrn
	EquinoxSec       sql.NullInt64   `json:"equinox_sec"`      // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Pperrpay exists in the database.
func (p *Pperrpay) Exists() bool {
	return p._exists
}

// Deleted provides information if the Pperrpay has been deleted from the database.
func (p *Pperrpay) Deleted() bool {
	return p._deleted
}

// Insert inserts the Pperrpay to the database.
func (p *Pperrpay) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if p._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.pperrpay (` +
		`pperrpaydt, pperrpaytm, pperrpayamt, pperrpayoutlet, pperrpaympid, pperrpaytca, pperrpayinfdt, pperrpaybal, pperrpaystdchrg, pperrpaydyrt, pperrpayngtrt, pperrpaytransno, pperrpayadded, pperrpayalloc, pperrpayallocto, pperrpayrefunded, pperrpayrefto, pperrpayorigref, pperrpaysrc, equinox_prn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, p.Pperrpaydt, p.Pperrpaytm, p.Pperrpayamt, p.Pperrpayoutlet, p.Pperrpaympid, p.Pperrpaytca, p.Pperrpayinfdt, p.Pperrpaybal, p.Pperrpaystdchrg, p.Pperrpaydyrt, p.Pperrpayngtrt, p.Pperrpaytransno, p.Pperrpayadded, p.Pperrpayalloc, p.Pperrpayallocto, p.Pperrpayrefunded, p.Pperrpayrefto, p.Pperrpayorigref, p.Pperrpaysrc, p.EquinoxPrn, p.EquinoxSec)
	err = db.QueryRow(sqlstr, p.Pperrpaydt, p.Pperrpaytm, p.Pperrpayamt, p.Pperrpayoutlet, p.Pperrpaympid, p.Pperrpaytca, p.Pperrpayinfdt, p.Pperrpaybal, p.Pperrpaystdchrg, p.Pperrpaydyrt, p.Pperrpayngtrt, p.Pperrpaytransno, p.Pperrpayadded, p.Pperrpayalloc, p.Pperrpayallocto, p.Pperrpayrefunded, p.Pperrpayrefto, p.Pperrpayorigref, p.Pperrpaysrc, p.EquinoxPrn, p.EquinoxSec).Scan(&p.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	p._exists = true

	return nil
}

// Update updates the Pperrpay in the database.
func (p *Pperrpay) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if p._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.pperrpay SET (` +
		`pperrpaydt, pperrpaytm, pperrpayamt, pperrpayoutlet, pperrpaympid, pperrpaytca, pperrpayinfdt, pperrpaybal, pperrpaystdchrg, pperrpaydyrt, pperrpayngtrt, pperrpaytransno, pperrpayadded, pperrpayalloc, pperrpayallocto, pperrpayrefunded, pperrpayrefto, pperrpayorigref, pperrpaysrc, equinox_prn, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21` +
		`) WHERE equinox_lrn = $22`

	// run query
	XOLog(sqlstr, p.Pperrpaydt, p.Pperrpaytm, p.Pperrpayamt, p.Pperrpayoutlet, p.Pperrpaympid, p.Pperrpaytca, p.Pperrpayinfdt, p.Pperrpaybal, p.Pperrpaystdchrg, p.Pperrpaydyrt, p.Pperrpayngtrt, p.Pperrpaytransno, p.Pperrpayadded, p.Pperrpayalloc, p.Pperrpayallocto, p.Pperrpayrefunded, p.Pperrpayrefto, p.Pperrpayorigref, p.Pperrpaysrc, p.EquinoxPrn, p.EquinoxSec, p.EquinoxLrn)
	_, err = db.Exec(sqlstr, p.Pperrpaydt, p.Pperrpaytm, p.Pperrpayamt, p.Pperrpayoutlet, p.Pperrpaympid, p.Pperrpaytca, p.Pperrpayinfdt, p.Pperrpaybal, p.Pperrpaystdchrg, p.Pperrpaydyrt, p.Pperrpayngtrt, p.Pperrpaytransno, p.Pperrpayadded, p.Pperrpayalloc, p.Pperrpayallocto, p.Pperrpayrefunded, p.Pperrpayrefto, p.Pperrpayorigref, p.Pperrpaysrc, p.EquinoxPrn, p.EquinoxSec, p.EquinoxLrn)
	return err
}

// Save saves the Pperrpay to the database.
func (p *Pperrpay) Save(db XODB) error {
	if p.Exists() {
		return p.Update(db)
	}

	return p.Insert(db)
}

// Upsert performs an upsert for Pperrpay.
//
// NOTE: PostgreSQL 9.5+ only
func (p *Pperrpay) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if p._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.pperrpay (` +
		`pperrpaydt, pperrpaytm, pperrpayamt, pperrpayoutlet, pperrpaympid, pperrpaytca, pperrpayinfdt, pperrpaybal, pperrpaystdchrg, pperrpaydyrt, pperrpayngtrt, pperrpaytransno, pperrpayadded, pperrpayalloc, pperrpayallocto, pperrpayrefunded, pperrpayrefto, pperrpayorigref, pperrpaysrc, equinox_prn, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`pperrpaydt, pperrpaytm, pperrpayamt, pperrpayoutlet, pperrpaympid, pperrpaytca, pperrpayinfdt, pperrpaybal, pperrpaystdchrg, pperrpaydyrt, pperrpayngtrt, pperrpaytransno, pperrpayadded, pperrpayalloc, pperrpayallocto, pperrpayrefunded, pperrpayrefto, pperrpayorigref, pperrpaysrc, equinox_prn, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.pperrpaydt, EXCLUDED.pperrpaytm, EXCLUDED.pperrpayamt, EXCLUDED.pperrpayoutlet, EXCLUDED.pperrpaympid, EXCLUDED.pperrpaytca, EXCLUDED.pperrpayinfdt, EXCLUDED.pperrpaybal, EXCLUDED.pperrpaystdchrg, EXCLUDED.pperrpaydyrt, EXCLUDED.pperrpayngtrt, EXCLUDED.pperrpaytransno, EXCLUDED.pperrpayadded, EXCLUDED.pperrpayalloc, EXCLUDED.pperrpayallocto, EXCLUDED.pperrpayrefunded, EXCLUDED.pperrpayrefto, EXCLUDED.pperrpayorigref, EXCLUDED.pperrpaysrc, EXCLUDED.equinox_prn, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, p.Pperrpaydt, p.Pperrpaytm, p.Pperrpayamt, p.Pperrpayoutlet, p.Pperrpaympid, p.Pperrpaytca, p.Pperrpayinfdt, p.Pperrpaybal, p.Pperrpaystdchrg, p.Pperrpaydyrt, p.Pperrpayngtrt, p.Pperrpaytransno, p.Pperrpayadded, p.Pperrpayalloc, p.Pperrpayallocto, p.Pperrpayrefunded, p.Pperrpayrefto, p.Pperrpayorigref, p.Pperrpaysrc, p.EquinoxPrn, p.EquinoxLrn, p.EquinoxSec)
	_, err = db.Exec(sqlstr, p.Pperrpaydt, p.Pperrpaytm, p.Pperrpayamt, p.Pperrpayoutlet, p.Pperrpaympid, p.Pperrpaytca, p.Pperrpayinfdt, p.Pperrpaybal, p.Pperrpaystdchrg, p.Pperrpaydyrt, p.Pperrpayngtrt, p.Pperrpaytransno, p.Pperrpayadded, p.Pperrpayalloc, p.Pperrpayallocto, p.Pperrpayrefunded, p.Pperrpayrefto, p.Pperrpayorigref, p.Pperrpaysrc, p.EquinoxPrn, p.EquinoxLrn, p.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	p._exists = true

	return nil
}

// Delete deletes the Pperrpay from the database.
func (p *Pperrpay) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return nil
	}

	// if deleted, bail
	if p._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.pperrpay WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, p.EquinoxLrn)
	_, err = db.Exec(sqlstr, p.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	p._deleted = true

	return nil
}

// PperrpayByEquinoxLrn retrieves a row from 'equinox.pperrpay' as a Pperrpay.
//
// Generated from index 'pperrpay_pkey'.
func PperrpayByEquinoxLrn(db XODB, equinoxLrn int64) (*Pperrpay, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`pperrpaydt, pperrpaytm, pperrpayamt, pperrpayoutlet, pperrpaympid, pperrpaytca, pperrpayinfdt, pperrpaybal, pperrpaystdchrg, pperrpaydyrt, pperrpayngtrt, pperrpaytransno, pperrpayadded, pperrpayalloc, pperrpayallocto, pperrpayrefunded, pperrpayrefto, pperrpayorigref, pperrpaysrc, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.pperrpay ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	p := Pperrpay{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&p.Pperrpaydt, &p.Pperrpaytm, &p.Pperrpayamt, &p.Pperrpayoutlet, &p.Pperrpaympid, &p.Pperrpaytca, &p.Pperrpayinfdt, &p.Pperrpaybal, &p.Pperrpaystdchrg, &p.Pperrpaydyrt, &p.Pperrpayngtrt, &p.Pperrpaytransno, &p.Pperrpayadded, &p.Pperrpayalloc, &p.Pperrpayallocto, &p.Pperrpayrefunded, &p.Pperrpayrefto, &p.Pperrpayorigref, &p.Pperrpaysrc, &p.EquinoxPrn, &p.EquinoxLrn, &p.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &p, nil
}
