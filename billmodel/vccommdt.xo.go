// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/lib/pq"
)

// Vccommdt represents a row from 'equinox.vccommdt'.
type Vccommdt struct {
	Detcperiodfrom   pq.NullTime     `json:"detcperiodfrom"`   // detcperiodfrom
	Detcperiodto     pq.NullTime     `json:"detcperiodto"`     // detcperiodto
	Detccrnumber     sql.NullInt64   `json:"detccrnumber"`     // detccrnumber
	Detccustaccno    sql.NullString  `json:"detccustaccno"`    // detccustaccno
	Detccliunique    sql.NullFloat64 `json:"detccliunique"`    // detccliunique
	Detcclino        sql.NullString  `json:"detcclino"`        // detcclino
	Detcclicpsdate   pq.NullTime     `json:"detcclicpsdate"`   // detcclicpsdate
	Detccliwlrdate   pq.NullTime     `json:"detccliwlrdate"`   // detccliwlrdate
	Detcclilivedate  pq.NullTime     `json:"detcclilivedate"`  // detcclilivedate
	Detccommlivedate pq.NullTime     `json:"detccommlivedate"` // detccommlivedate
	Detcservicetype  sql.NullString  `json:"detcservicetype"`  // detcservicetype
	Detccontractterm sql.NullInt64   `json:"detccontractterm"` // detccontractterm
	Detcservlvl      sql.NullString  `json:"detcservlvl"`      // detcservlvl
	Detcquantity     sql.NullInt64   `json:"detcquantity"`     // detcquantity
	Detcnet          sql.NullFloat64 `json:"detcnet"`          // detcnet
	Detcvat          sql.NullFloat64 `json:"detcvat"`          // detcvat
	Detctotal        sql.NullFloat64 `json:"detctotal"`        // detctotal
	Detcratetable    sql.NullFloat64 `json:"detcratetable"`    // detcratetable
	Detddpayments    sql.NullInt64   `json:"detddpayments"`    // detddpayments
	Detctobeclawed   pq.NullTime     `json:"detctobeclawed"`   // detctobeclawed
	Detccrystal      pq.NullTime     `json:"detccrystal"`      // detccrystal
	Detcconsec       sql.NullInt64   `json:"detcconsec"`       // detcconsec
	Detccomplete     sql.NullInt64   `json:"detccomplete"`     // detccomplete
	Detdateclawed    pq.NullTime     `json:"detdateclawed"`    // detdateclawed
	Detclawedbackbal sql.NullFloat64 `json:"detclawedbackbal"` // detclawedbackbal
	Detuniqueid      sql.NullInt64   `json:"detuniqueid"`      // detuniqueid
	Detcliservorig   sql.NullString  `json:"detcliservorig"`   // detcliservorig
	Detcrmoptid      sql.NullString  `json:"detcrmoptid"`      // detcrmoptid
	Detcstatus       sql.NullInt64   `json:"detcstatus"`       // detcstatus
	Detccbpending    sql.NullInt64   `json:"detccbpending"`    // detccbpending
	Detcpaid         pq.NullTime     `json:"detcpaid"`         // detcpaid
	Detcdead         pq.NullTime     `json:"detcdead"`         // detcdead
	EquinoxPrn       sql.NullInt64   `json:"equinox_prn"`      // equinox_prn
	EquinoxLrn       int64           `json:"equinox_lrn"`      // equinox_lrn
	EquinoxSec       sql.NullInt64   `json:"equinox_sec"`      // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Vccommdt exists in the database.
func (v *Vccommdt) Exists() bool {
	return v._exists
}

// Deleted provides information if the Vccommdt has been deleted from the database.
func (v *Vccommdt) Deleted() bool {
	return v._deleted
}

// Insert inserts the Vccommdt to the database.
func (v *Vccommdt) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if v._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.vccommdt (` +
		`detcperiodfrom, detcperiodto, detccrnumber, detccustaccno, detccliunique, detcclino, detcclicpsdate, detccliwlrdate, detcclilivedate, detccommlivedate, detcservicetype, detccontractterm, detcservlvl, detcquantity, detcnet, detcvat, detctotal, detcratetable, detddpayments, detctobeclawed, detccrystal, detcconsec, detccomplete, detdateclawed, detclawedbackbal, detuniqueid, detcliservorig, detcrmoptid, detcstatus, detccbpending, detcpaid, detcdead, equinox_prn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, v.Detcperiodfrom, v.Detcperiodto, v.Detccrnumber, v.Detccustaccno, v.Detccliunique, v.Detcclino, v.Detcclicpsdate, v.Detccliwlrdate, v.Detcclilivedate, v.Detccommlivedate, v.Detcservicetype, v.Detccontractterm, v.Detcservlvl, v.Detcquantity, v.Detcnet, v.Detcvat, v.Detctotal, v.Detcratetable, v.Detddpayments, v.Detctobeclawed, v.Detccrystal, v.Detcconsec, v.Detccomplete, v.Detdateclawed, v.Detclawedbackbal, v.Detuniqueid, v.Detcliservorig, v.Detcrmoptid, v.Detcstatus, v.Detccbpending, v.Detcpaid, v.Detcdead, v.EquinoxPrn, v.EquinoxSec)
	err = db.QueryRow(sqlstr, v.Detcperiodfrom, v.Detcperiodto, v.Detccrnumber, v.Detccustaccno, v.Detccliunique, v.Detcclino, v.Detcclicpsdate, v.Detccliwlrdate, v.Detcclilivedate, v.Detccommlivedate, v.Detcservicetype, v.Detccontractterm, v.Detcservlvl, v.Detcquantity, v.Detcnet, v.Detcvat, v.Detctotal, v.Detcratetable, v.Detddpayments, v.Detctobeclawed, v.Detccrystal, v.Detcconsec, v.Detccomplete, v.Detdateclawed, v.Detclawedbackbal, v.Detuniqueid, v.Detcliservorig, v.Detcrmoptid, v.Detcstatus, v.Detccbpending, v.Detcpaid, v.Detcdead, v.EquinoxPrn, v.EquinoxSec).Scan(&v.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	v._exists = true

	return nil
}

// Update updates the Vccommdt in the database.
func (v *Vccommdt) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !v._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if v._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.vccommdt SET (` +
		`detcperiodfrom, detcperiodto, detccrnumber, detccustaccno, detccliunique, detcclino, detcclicpsdate, detccliwlrdate, detcclilivedate, detccommlivedate, detcservicetype, detccontractterm, detcservlvl, detcquantity, detcnet, detcvat, detctotal, detcratetable, detddpayments, detctobeclawed, detccrystal, detcconsec, detccomplete, detdateclawed, detclawedbackbal, detuniqueid, detcliservorig, detcrmoptid, detcstatus, detccbpending, detcpaid, detcdead, equinox_prn, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34` +
		`) WHERE equinox_lrn = $35`

	// run query
	XOLog(sqlstr, v.Detcperiodfrom, v.Detcperiodto, v.Detccrnumber, v.Detccustaccno, v.Detccliunique, v.Detcclino, v.Detcclicpsdate, v.Detccliwlrdate, v.Detcclilivedate, v.Detccommlivedate, v.Detcservicetype, v.Detccontractterm, v.Detcservlvl, v.Detcquantity, v.Detcnet, v.Detcvat, v.Detctotal, v.Detcratetable, v.Detddpayments, v.Detctobeclawed, v.Detccrystal, v.Detcconsec, v.Detccomplete, v.Detdateclawed, v.Detclawedbackbal, v.Detuniqueid, v.Detcliservorig, v.Detcrmoptid, v.Detcstatus, v.Detccbpending, v.Detcpaid, v.Detcdead, v.EquinoxPrn, v.EquinoxSec, v.EquinoxLrn)
	_, err = db.Exec(sqlstr, v.Detcperiodfrom, v.Detcperiodto, v.Detccrnumber, v.Detccustaccno, v.Detccliunique, v.Detcclino, v.Detcclicpsdate, v.Detccliwlrdate, v.Detcclilivedate, v.Detccommlivedate, v.Detcservicetype, v.Detccontractterm, v.Detcservlvl, v.Detcquantity, v.Detcnet, v.Detcvat, v.Detctotal, v.Detcratetable, v.Detddpayments, v.Detctobeclawed, v.Detccrystal, v.Detcconsec, v.Detccomplete, v.Detdateclawed, v.Detclawedbackbal, v.Detuniqueid, v.Detcliservorig, v.Detcrmoptid, v.Detcstatus, v.Detccbpending, v.Detcpaid, v.Detcdead, v.EquinoxPrn, v.EquinoxSec, v.EquinoxLrn)
	return err
}

// Save saves the Vccommdt to the database.
func (v *Vccommdt) Save(db XODB) error {
	if v.Exists() {
		return v.Update(db)
	}

	return v.Insert(db)
}

// Upsert performs an upsert for Vccommdt.
//
// NOTE: PostgreSQL 9.5+ only
func (v *Vccommdt) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if v._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.vccommdt (` +
		`detcperiodfrom, detcperiodto, detccrnumber, detccustaccno, detccliunique, detcclino, detcclicpsdate, detccliwlrdate, detcclilivedate, detccommlivedate, detcservicetype, detccontractterm, detcservlvl, detcquantity, detcnet, detcvat, detctotal, detcratetable, detddpayments, detctobeclawed, detccrystal, detcconsec, detccomplete, detdateclawed, detclawedbackbal, detuniqueid, detcliservorig, detcrmoptid, detcstatus, detccbpending, detcpaid, detcdead, equinox_prn, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`detcperiodfrom, detcperiodto, detccrnumber, detccustaccno, detccliunique, detcclino, detcclicpsdate, detccliwlrdate, detcclilivedate, detccommlivedate, detcservicetype, detccontractterm, detcservlvl, detcquantity, detcnet, detcvat, detctotal, detcratetable, detddpayments, detctobeclawed, detccrystal, detcconsec, detccomplete, detdateclawed, detclawedbackbal, detuniqueid, detcliservorig, detcrmoptid, detcstatus, detccbpending, detcpaid, detcdead, equinox_prn, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.detcperiodfrom, EXCLUDED.detcperiodto, EXCLUDED.detccrnumber, EXCLUDED.detccustaccno, EXCLUDED.detccliunique, EXCLUDED.detcclino, EXCLUDED.detcclicpsdate, EXCLUDED.detccliwlrdate, EXCLUDED.detcclilivedate, EXCLUDED.detccommlivedate, EXCLUDED.detcservicetype, EXCLUDED.detccontractterm, EXCLUDED.detcservlvl, EXCLUDED.detcquantity, EXCLUDED.detcnet, EXCLUDED.detcvat, EXCLUDED.detctotal, EXCLUDED.detcratetable, EXCLUDED.detddpayments, EXCLUDED.detctobeclawed, EXCLUDED.detccrystal, EXCLUDED.detcconsec, EXCLUDED.detccomplete, EXCLUDED.detdateclawed, EXCLUDED.detclawedbackbal, EXCLUDED.detuniqueid, EXCLUDED.detcliservorig, EXCLUDED.detcrmoptid, EXCLUDED.detcstatus, EXCLUDED.detccbpending, EXCLUDED.detcpaid, EXCLUDED.detcdead, EXCLUDED.equinox_prn, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, v.Detcperiodfrom, v.Detcperiodto, v.Detccrnumber, v.Detccustaccno, v.Detccliunique, v.Detcclino, v.Detcclicpsdate, v.Detccliwlrdate, v.Detcclilivedate, v.Detccommlivedate, v.Detcservicetype, v.Detccontractterm, v.Detcservlvl, v.Detcquantity, v.Detcnet, v.Detcvat, v.Detctotal, v.Detcratetable, v.Detddpayments, v.Detctobeclawed, v.Detccrystal, v.Detcconsec, v.Detccomplete, v.Detdateclawed, v.Detclawedbackbal, v.Detuniqueid, v.Detcliservorig, v.Detcrmoptid, v.Detcstatus, v.Detccbpending, v.Detcpaid, v.Detcdead, v.EquinoxPrn, v.EquinoxLrn, v.EquinoxSec)
	_, err = db.Exec(sqlstr, v.Detcperiodfrom, v.Detcperiodto, v.Detccrnumber, v.Detccustaccno, v.Detccliunique, v.Detcclino, v.Detcclicpsdate, v.Detccliwlrdate, v.Detcclilivedate, v.Detccommlivedate, v.Detcservicetype, v.Detccontractterm, v.Detcservlvl, v.Detcquantity, v.Detcnet, v.Detcvat, v.Detctotal, v.Detcratetable, v.Detddpayments, v.Detctobeclawed, v.Detccrystal, v.Detcconsec, v.Detccomplete, v.Detdateclawed, v.Detclawedbackbal, v.Detuniqueid, v.Detcliservorig, v.Detcrmoptid, v.Detcstatus, v.Detccbpending, v.Detcpaid, v.Detcdead, v.EquinoxPrn, v.EquinoxLrn, v.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	v._exists = true

	return nil
}

// Delete deletes the Vccommdt from the database.
func (v *Vccommdt) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !v._exists {
		return nil
	}

	// if deleted, bail
	if v._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.vccommdt WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, v.EquinoxLrn)
	_, err = db.Exec(sqlstr, v.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	v._deleted = true

	return nil
}

// VccommdtByEquinoxLrn retrieves a row from 'equinox.vccommdt' as a Vccommdt.
//
// Generated from index 'vccommdt_pkey'.
func VccommdtByEquinoxLrn(db XODB, equinoxLrn int64) (*Vccommdt, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`detcperiodfrom, detcperiodto, detccrnumber, detccustaccno, detccliunique, detcclino, detcclicpsdate, detccliwlrdate, detcclilivedate, detccommlivedate, detcservicetype, detccontractterm, detcservlvl, detcquantity, detcnet, detcvat, detctotal, detcratetable, detddpayments, detctobeclawed, detccrystal, detcconsec, detccomplete, detdateclawed, detclawedbackbal, detuniqueid, detcliservorig, detcrmoptid, detcstatus, detccbpending, detcpaid, detcdead, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.vccommdt ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	v := Vccommdt{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&v.Detcperiodfrom, &v.Detcperiodto, &v.Detccrnumber, &v.Detccustaccno, &v.Detccliunique, &v.Detcclino, &v.Detcclicpsdate, &v.Detccliwlrdate, &v.Detcclilivedate, &v.Detccommlivedate, &v.Detcservicetype, &v.Detccontractterm, &v.Detcservlvl, &v.Detcquantity, &v.Detcnet, &v.Detcvat, &v.Detctotal, &v.Detcratetable, &v.Detddpayments, &v.Detctobeclawed, &v.Detccrystal, &v.Detcconsec, &v.Detccomplete, &v.Detdateclawed, &v.Detclawedbackbal, &v.Detuniqueid, &v.Detcliservorig, &v.Detcrmoptid, &v.Detcstatus, &v.Detccbpending, &v.Detcpaid, &v.Detcdead, &v.EquinoxPrn, &v.EquinoxLrn, &v.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &v, nil
}
