// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"

	"github.com/lib/pq"
)

// Exfitter represents a row from 'equinox.exfitter'.
type Exfitter struct {
	Efid             sql.NullString `json:"efid"`             // efid
	Efcaptstatus     sql.NullString `json:"efcaptstatus"`     // efcaptstatus
	Efnotification   sql.NullString `json:"efnotification"`   // efnotification
	Efappname        sql.NullString `json:"efappname"`        // efappname
	Efvanid          sql.NullString `json:"efvanid"`          // efvanid
	Efcontractsigned sql.NullString `json:"efcontractsigned"` // efcontractsigned
	Efpassedexam     sql.NullString `json:"efpassedexam"`     // efpassedexam
	Efpassedeyetest  sql.NullString `json:"efpassedeyetest"`  // efpassedeyetest
	Eftrainingatt    sql.NullString `json:"eftrainingatt"`    // eftrainingatt
	Efdate           pq.NullTime    `json:"efdate"`           // efdate
	Efappid          sql.NullString `json:"efappid"`          // efappid
	Eftype           sql.NullString `json:"eftype"`           // eftype
	Efvatreg         sql.NullInt64  `json:"efvatreg"`         // efvatreg
	Efvatno          sql.NullString `json:"efvatno"`          // efvatno
	Efmobileno       sql.NullString `json:"efmobileno"`       // efmobileno
	Efemailaddress   sql.NullString `json:"efemailaddress"`   // efemailaddress
	Effirstname      sql.NullString `json:"effirstname"`      // effirstname
	Efsurname        sql.NullString `json:"efsurname"`        // efsurname
	Effitstatus      sql.NullString `json:"effitstatus"`      // effitstatus
	Efwelcsent       pq.NullTime    `json:"efwelcsent"`       // efwelcsent
	EquinoxPrn       sql.NullInt64  `json:"equinox_prn"`      // equinox_prn
	EquinoxLrn       int64          `json:"equinox_lrn"`      // equinox_lrn
	EquinoxSec       sql.NullInt64  `json:"equinox_sec"`      // equinox_sec
}

func AllExfitter(db XODB, callback func(x Exfitter) bool) error {

	// sql query
	const sqlstr = `SELECT ` +
		`efid, efcaptstatus, efnotification, efappname, efvanid, efcontractsigned, efpassedexam, efpassedeyetest, eftrainingatt, efdate, efappid, eftype, efvatreg, efvatno, efmobileno, efemailaddress, effirstname, efsurname, effitstatus, efwelcsent, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.exfitter `

	q, err := db.Query(sqlstr)

	if err != nil {
		return err
	}
	defer q.Close()

	// load results
	for q.Next() {
		e := Exfitter{}

		// scan
		err = q.Scan(&e.Efid, &e.Efcaptstatus, &e.Efnotification, &e.Efappname, &e.Efvanid, &e.Efcontractsigned, &e.Efpassedexam, &e.Efpassedeyetest, &e.Eftrainingatt, &e.Efdate, &e.Efappid, &e.Eftype, &e.Efvatreg, &e.Efvatno, &e.Efmobileno, &e.Efemailaddress, &e.Effirstname, &e.Efsurname, &e.Effitstatus, &e.Efwelcsent, &e.EquinoxPrn, &e.EquinoxLrn, &e.EquinoxSec)
		if err != nil {
			return err
		}
		if !callback(e) {
			return nil
		}
	}

	return nil
}

// ExfitterByEquinoxLrn retrieves a row from 'equinox.exfitter' as a Exfitter.
//
// Generated from index 'exfitter_pkey'.
func ExfitterByEquinoxLrn(db XODB, equinoxLrn int64) (*Exfitter, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`efid, efcaptstatus, efnotification, efappname, efvanid, efcontractsigned, efpassedexam, efpassedeyetest, eftrainingatt, efdate, efappid, eftype, efvatreg, efvatno, efmobileno, efemailaddress, effirstname, efsurname, effitstatus, efwelcsent, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.exfitter ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	e := Exfitter{}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&e.Efid, &e.Efcaptstatus, &e.Efnotification, &e.Efappname, &e.Efvanid, &e.Efcontractsigned, &e.Efpassedexam, &e.Efpassedeyetest, &e.Eftrainingatt, &e.Efdate, &e.Efappid, &e.Eftype, &e.Efvatreg, &e.Efvatno, &e.Efmobileno, &e.Efemailaddress, &e.Effirstname, &e.Efsurname, &e.Effitstatus, &e.Efwelcsent, &e.EquinoxPrn, &e.EquinoxLrn, &e.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &e, nil
}
