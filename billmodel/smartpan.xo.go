// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/lib/pq"
)

// Smartpan represents a row from 'equinox.smartpan'.
type Smartpan struct {
	Spanpan       sql.NullString `json:"spanpan"`       // spanpan
	Spanaccno     sql.NullString `json:"spanaccno"`     // spanaccno
	Spanmpxn      sql.NullString `json:"spanmpxn"`      // spanmpxn
	Spanallocated pq.NullTime    `json:"spanallocated"` // spanallocated
	Spansource    sql.NullString `json:"spansource"`    // spansource
	Spanspares1   sql.NullString `json:"spanspares1"`   // spanspares1
	Spanspared1   pq.NullTime    `json:"spanspared1"`   // spanspared1
	Spanspared2   pq.NullTime    `json:"spanspared2"`   // spanspared2
	Spansparen1   sql.NullInt64  `json:"spansparen1"`   // spansparen1
	EquinoxLrn    int64          `json:"equinox_lrn"`   // equinox_lrn
	EquinoxSec    sql.NullInt64  `json:"equinox_sec"`   // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Smartpan exists in the database.
func (s *Smartpan) Exists() bool {
	return s._exists
}

// Deleted provides information if the Smartpan has been deleted from the database.
func (s *Smartpan) Deleted() bool {
	return s._deleted
}

// Insert inserts the Smartpan to the database.
func (s *Smartpan) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if s._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.smartpan (` +
		`spanpan, spanaccno, spanmpxn, spanallocated, spansource, spanspares1, spanspared1, spanspared2, spansparen1, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, s.Spanpan, s.Spanaccno, s.Spanmpxn, s.Spanallocated, s.Spansource, s.Spanspares1, s.Spanspared1, s.Spanspared2, s.Spansparen1, s.EquinoxSec)
	err = db.QueryRow(sqlstr, s.Spanpan, s.Spanaccno, s.Spanmpxn, s.Spanallocated, s.Spansource, s.Spanspares1, s.Spanspared1, s.Spanspared2, s.Spansparen1, s.EquinoxSec).Scan(&s.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	s._exists = true

	return nil
}

// Update updates the Smartpan in the database.
func (s *Smartpan) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !s._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if s._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.smartpan SET (` +
		`spanpan, spanaccno, spanmpxn, spanallocated, spansource, spanspares1, spanspared1, spanspared2, spansparen1, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10` +
		`) WHERE equinox_lrn = $11`

	// run query
	XOLog(sqlstr, s.Spanpan, s.Spanaccno, s.Spanmpxn, s.Spanallocated, s.Spansource, s.Spanspares1, s.Spanspared1, s.Spanspared2, s.Spansparen1, s.EquinoxSec, s.EquinoxLrn)
	_, err = db.Exec(sqlstr, s.Spanpan, s.Spanaccno, s.Spanmpxn, s.Spanallocated, s.Spansource, s.Spanspares1, s.Spanspared1, s.Spanspared2, s.Spansparen1, s.EquinoxSec, s.EquinoxLrn)
	return err
}

// Save saves the Smartpan to the database.
func (s *Smartpan) Save(db XODB) error {
	if s.Exists() {
		return s.Update(db)
	}

	return s.Insert(db)
}

// Upsert performs an upsert for Smartpan.
//
// NOTE: PostgreSQL 9.5+ only
func (s *Smartpan) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if s._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.smartpan (` +
		`spanpan, spanaccno, spanmpxn, spanallocated, spansource, spanspares1, spanspared1, spanspared2, spansparen1, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`spanpan, spanaccno, spanmpxn, spanallocated, spansource, spanspares1, spanspared1, spanspared2, spansparen1, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.spanpan, EXCLUDED.spanaccno, EXCLUDED.spanmpxn, EXCLUDED.spanallocated, EXCLUDED.spansource, EXCLUDED.spanspares1, EXCLUDED.spanspared1, EXCLUDED.spanspared2, EXCLUDED.spansparen1, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, s.Spanpan, s.Spanaccno, s.Spanmpxn, s.Spanallocated, s.Spansource, s.Spanspares1, s.Spanspared1, s.Spanspared2, s.Spansparen1, s.EquinoxLrn, s.EquinoxSec)
	_, err = db.Exec(sqlstr, s.Spanpan, s.Spanaccno, s.Spanmpxn, s.Spanallocated, s.Spansource, s.Spanspares1, s.Spanspared1, s.Spanspared2, s.Spansparen1, s.EquinoxLrn, s.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	s._exists = true

	return nil
}

// Delete deletes the Smartpan from the database.
func (s *Smartpan) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !s._exists {
		return nil
	}

	// if deleted, bail
	if s._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.smartpan WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, s.EquinoxLrn)
	_, err = db.Exec(sqlstr, s.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	s._deleted = true

	return nil
}

// SmartpanByEquinoxLrn retrieves a row from 'equinox.smartpan' as a Smartpan.
//
// Generated from index 'smartpan_pkey'.
func SmartpanByEquinoxLrn(db XODB, equinoxLrn int64) (*Smartpan, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`spanpan, spanaccno, spanmpxn, spanallocated, spansource, spanspares1, spanspared1, spanspared2, spansparen1, equinox_lrn, equinox_sec ` +
		`FROM equinox.smartpan ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	s := Smartpan{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&s.Spanpan, &s.Spanaccno, &s.Spanmpxn, &s.Spanallocated, &s.Spansource, &s.Spanspares1, &s.Spanspared1, &s.Spanspared2, &s.Spansparen1, &s.EquinoxLrn, &s.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &s, nil
}
