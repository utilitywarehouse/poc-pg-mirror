// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"

	"github.com/lib/pq"
)

// Deposit represents a row from 'equinox.deposits'.
type Deposit struct {
	Deposituniquesys sql.NullFloat64 `json:"deposituniquesys"` // deposituniquesys
	Depositdate      pq.NullTime     `json:"depositdate"`      // depositdate
	Deposittime      pq.NullTime     `json:"deposittime"`      // deposittime
	Deposittotal     sql.NullFloat64 `json:"deposittotal"`     // deposittotal
	Deposittype      sql.NullString  `json:"deposittype"`      // deposittype
	Depositourref    sql.NullString  `json:"depositourref"`    // depositourref
	Depositcomments  sql.NullInt64   `json:"depositcomments"`  // depositcomments
	Depositbilldate  pq.NullTime     `json:"depositbilldate"`  // depositbilldate
	Depositbillno    sql.NullFloat64 `json:"depositbillno"`    // depositbillno
	Depositholduntil pq.NullTime     `json:"depositholduntil"` // depositholduntil
	EquinoxPrn       sql.NullInt64   `json:"equinox_prn"`      // equinox_prn
	EquinoxLrn       int64           `json:"equinox_lrn"`      // equinox_lrn
	EquinoxSec       sql.NullInt64   `json:"equinox_sec"`      // equinox_sec
}

// DepositByEquinoxLrn retrieves a row from 'equinox.deposits' as a Deposit.
//
// Generated from index 'deposits_pkey'.
func DepositByEquinoxLrn(db XODB, equinoxLrn int64) (*Deposit, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`deposituniquesys, depositdate, deposittime, deposittotal, deposittype, depositourref, depositcomments, depositbilldate, depositbillno, depositholduntil, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.deposits ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	d := Deposit{}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&d.Deposituniquesys, &d.Depositdate, &d.Deposittime, &d.Deposittotal, &d.Deposittype, &d.Depositourref, &d.Depositcomments, &d.Depositbilldate, &d.Depositbillno, &d.Depositholduntil, &d.EquinoxPrn, &d.EquinoxLrn, &d.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &d, nil
}
