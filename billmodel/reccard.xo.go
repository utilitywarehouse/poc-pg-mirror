// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/lib/pq"
)

// Reccard represents a row from 'equinox.reccard'.
type Reccard struct {
	Recuniquesys    sql.NullFloat64 `json:"recuniquesys"`    // recuniquesys
	Recaccounttype  sql.NullString  `json:"recaccounttype"`  // recaccounttype
	Reccustidentity sql.NullString  `json:"reccustidentity"` // reccustidentity
	Recshopperref   sql.NullString  `json:"recshopperref"`   // recshopperref
	Rectypecord     sql.NullString  `json:"rectypecord"`     // rectypecord
	Recverified     sql.NullInt64   `json:"recverified"`     // recverified
	Recvalid        sql.NullInt64   `json:"recvalid"`        // recvalid
	Recrecurring    sql.NullInt64   `json:"recrecurring"`    // recrecurring
	Reconeclick     sql.NullInt64   `json:"reconeclick"`     // reconeclick
	Recdateentered  pq.NullTime     `json:"recdateentered"`  // recdateentered
	Recenteredby    sql.NullString  `json:"recenteredby"`    // recenteredby
	Recnotes        sql.NullInt64   `json:"recnotes"`        // recnotes
	Recusage        sql.NullString  `json:"recusage"`        // recusage
	Recusagebar     sql.NullString  `json:"recusagebar"`     // recusagebar
	Reccardno       sql.NullString  `json:"reccardno"`       // reccardno
	Recsparen1      sql.NullInt64   `json:"recsparen1"`      // recsparen1
	Recsparen2      sql.NullInt64   `json:"recsparen2"`      // recsparen2
	Recspared1      pq.NullTime     `json:"recspared1"`      // recspared1
	Recspared2      pq.NullTime     `json:"recspared2"`      // recspared2
	EquinoxLrn      int64           `json:"equinox_lrn"`     // equinox_lrn
	EquinoxSec      sql.NullInt64   `json:"equinox_sec"`     // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Reccard exists in the database.
func (r *Reccard) Exists() bool {
	return r._exists
}

// Deleted provides information if the Reccard has been deleted from the database.
func (r *Reccard) Deleted() bool {
	return r._deleted
}

// Insert inserts the Reccard to the database.
func (r *Reccard) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if r._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.reccard (` +
		`recuniquesys, recaccounttype, reccustidentity, recshopperref, rectypecord, recverified, recvalid, recrecurring, reconeclick, recdateentered, recenteredby, recnotes, recusage, recusagebar, reccardno, recsparen1, recsparen2, recspared1, recspared2, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, r.Recuniquesys, r.Recaccounttype, r.Reccustidentity, r.Recshopperref, r.Rectypecord, r.Recverified, r.Recvalid, r.Recrecurring, r.Reconeclick, r.Recdateentered, r.Recenteredby, r.Recnotes, r.Recusage, r.Recusagebar, r.Reccardno, r.Recsparen1, r.Recsparen2, r.Recspared1, r.Recspared2, r.EquinoxSec)
	err = db.QueryRow(sqlstr, r.Recuniquesys, r.Recaccounttype, r.Reccustidentity, r.Recshopperref, r.Rectypecord, r.Recverified, r.Recvalid, r.Recrecurring, r.Reconeclick, r.Recdateentered, r.Recenteredby, r.Recnotes, r.Recusage, r.Recusagebar, r.Reccardno, r.Recsparen1, r.Recsparen2, r.Recspared1, r.Recspared2, r.EquinoxSec).Scan(&r.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	r._exists = true

	return nil
}

// Update updates the Reccard in the database.
func (r *Reccard) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !r._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if r._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.reccard SET (` +
		`recuniquesys, recaccounttype, reccustidentity, recshopperref, rectypecord, recverified, recvalid, recrecurring, reconeclick, recdateentered, recenteredby, recnotes, recusage, recusagebar, reccardno, recsparen1, recsparen2, recspared1, recspared2, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20` +
		`) WHERE equinox_lrn = $21`

	// run query
	XOLog(sqlstr, r.Recuniquesys, r.Recaccounttype, r.Reccustidentity, r.Recshopperref, r.Rectypecord, r.Recverified, r.Recvalid, r.Recrecurring, r.Reconeclick, r.Recdateentered, r.Recenteredby, r.Recnotes, r.Recusage, r.Recusagebar, r.Reccardno, r.Recsparen1, r.Recsparen2, r.Recspared1, r.Recspared2, r.EquinoxSec, r.EquinoxLrn)
	_, err = db.Exec(sqlstr, r.Recuniquesys, r.Recaccounttype, r.Reccustidentity, r.Recshopperref, r.Rectypecord, r.Recverified, r.Recvalid, r.Recrecurring, r.Reconeclick, r.Recdateentered, r.Recenteredby, r.Recnotes, r.Recusage, r.Recusagebar, r.Reccardno, r.Recsparen1, r.Recsparen2, r.Recspared1, r.Recspared2, r.EquinoxSec, r.EquinoxLrn)
	return err
}

// Save saves the Reccard to the database.
func (r *Reccard) Save(db XODB) error {
	if r.Exists() {
		return r.Update(db)
	}

	return r.Insert(db)
}

// Upsert performs an upsert for Reccard.
//
// NOTE: PostgreSQL 9.5+ only
func (r *Reccard) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if r._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.reccard (` +
		`recuniquesys, recaccounttype, reccustidentity, recshopperref, rectypecord, recverified, recvalid, recrecurring, reconeclick, recdateentered, recenteredby, recnotes, recusage, recusagebar, reccardno, recsparen1, recsparen2, recspared1, recspared2, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`recuniquesys, recaccounttype, reccustidentity, recshopperref, rectypecord, recverified, recvalid, recrecurring, reconeclick, recdateentered, recenteredby, recnotes, recusage, recusagebar, reccardno, recsparen1, recsparen2, recspared1, recspared2, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.recuniquesys, EXCLUDED.recaccounttype, EXCLUDED.reccustidentity, EXCLUDED.recshopperref, EXCLUDED.rectypecord, EXCLUDED.recverified, EXCLUDED.recvalid, EXCLUDED.recrecurring, EXCLUDED.reconeclick, EXCLUDED.recdateentered, EXCLUDED.recenteredby, EXCLUDED.recnotes, EXCLUDED.recusage, EXCLUDED.recusagebar, EXCLUDED.reccardno, EXCLUDED.recsparen1, EXCLUDED.recsparen2, EXCLUDED.recspared1, EXCLUDED.recspared2, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, r.Recuniquesys, r.Recaccounttype, r.Reccustidentity, r.Recshopperref, r.Rectypecord, r.Recverified, r.Recvalid, r.Recrecurring, r.Reconeclick, r.Recdateentered, r.Recenteredby, r.Recnotes, r.Recusage, r.Recusagebar, r.Reccardno, r.Recsparen1, r.Recsparen2, r.Recspared1, r.Recspared2, r.EquinoxLrn, r.EquinoxSec)
	_, err = db.Exec(sqlstr, r.Recuniquesys, r.Recaccounttype, r.Reccustidentity, r.Recshopperref, r.Rectypecord, r.Recverified, r.Recvalid, r.Recrecurring, r.Reconeclick, r.Recdateentered, r.Recenteredby, r.Recnotes, r.Recusage, r.Recusagebar, r.Reccardno, r.Recsparen1, r.Recsparen2, r.Recspared1, r.Recspared2, r.EquinoxLrn, r.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	r._exists = true

	return nil
}

// Delete deletes the Reccard from the database.
func (r *Reccard) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !r._exists {
		return nil
	}

	// if deleted, bail
	if r._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.reccard WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, r.EquinoxLrn)
	_, err = db.Exec(sqlstr, r.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	r._deleted = true

	return nil
}

// ReccardByEquinoxLrn retrieves a row from 'equinox.reccard' as a Reccard.
//
// Generated from index 'reccard_pkey'.
func ReccardByEquinoxLrn(db XODB, equinoxLrn int64) (*Reccard, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`recuniquesys, recaccounttype, reccustidentity, recshopperref, rectypecord, recverified, recvalid, recrecurring, reconeclick, recdateentered, recenteredby, recnotes, recusage, recusagebar, reccardno, recsparen1, recsparen2, recspared1, recspared2, equinox_lrn, equinox_sec ` +
		`FROM equinox.reccard ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	r := Reccard{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&r.Recuniquesys, &r.Recaccounttype, &r.Reccustidentity, &r.Recshopperref, &r.Rectypecord, &r.Recverified, &r.Recvalid, &r.Recrecurring, &r.Reconeclick, &r.Recdateentered, &r.Recenteredby, &r.Recnotes, &r.Recusage, &r.Recusagebar, &r.Reccardno, &r.Recsparen1, &r.Recsparen2, &r.Recspared1, &r.Recspared2, &r.EquinoxLrn, &r.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &r, nil
}
