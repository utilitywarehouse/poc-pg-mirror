// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"

	"github.com/lib/pq"
)

// Reccard represents a row from 'equinox.reccard'.
type Reccard struct {
	Recuniquesys    sql.NullFloat64 `json:"recuniquesys"`    // recuniquesys
	Recaccounttype  sql.NullString  `json:"recaccounttype"`  // recaccounttype
	Reccustidentity sql.NullString  `json:"reccustidentity"` // reccustidentity
	Recshopperref   sql.NullString  `json:"recshopperref"`   // recshopperref
	Rectypecord     sql.NullString  `json:"rectypecord"`     // rectypecord
	Recverified     sql.NullInt64   `json:"recverified"`     // recverified
	Recvalid        sql.NullInt64   `json:"recvalid"`        // recvalid
	Recrecurring    sql.NullInt64   `json:"recrecurring"`    // recrecurring
	Reconeclick     sql.NullInt64   `json:"reconeclick"`     // reconeclick
	Recdateentered  pq.NullTime     `json:"recdateentered"`  // recdateentered
	Recenteredby    sql.NullString  `json:"recenteredby"`    // recenteredby
	Recnotes        sql.NullInt64   `json:"recnotes"`        // recnotes
	Recusage        sql.NullString  `json:"recusage"`        // recusage
	Recusagebar     sql.NullString  `json:"recusagebar"`     // recusagebar
	Reccardno       sql.NullString  `json:"reccardno"`       // reccardno
	Recsparen1      sql.NullInt64   `json:"recsparen1"`      // recsparen1
	Recsparen2      sql.NullInt64   `json:"recsparen2"`      // recsparen2
	Recspared1      pq.NullTime     `json:"recspared1"`      // recspared1
	Recspared2      pq.NullTime     `json:"recspared2"`      // recspared2
	EquinoxLrn      int64           `json:"equinox_lrn"`     // equinox_lrn
	EquinoxSec      sql.NullInt64   `json:"equinox_sec"`     // equinox_sec
}

func AllReccard(db XODB, callback func(x Reccard) bool) error {

	// sql query
	const sqlstr = `SELECT ` +
		`recuniquesys, recaccounttype, reccustidentity, recshopperref, rectypecord, recverified, recvalid, recrecurring, reconeclick, recdateentered, recenteredby, recnotes, recusage, recusagebar, reccardno, recsparen1, recsparen2, recspared1, recspared2, equinox_lrn, equinox_sec ` +
		`FROM equinox.reccard `

	q, err := db.Query(sqlstr)

	if err != nil {
		return err
	}
	defer q.Close()

	// load results
	for q.Next() {
		r := Reccard{}

		// scan
		err = q.Scan(&r.Recuniquesys, &r.Recaccounttype, &r.Reccustidentity, &r.Recshopperref, &r.Rectypecord, &r.Recverified, &r.Recvalid, &r.Recrecurring, &r.Reconeclick, &r.Recdateentered, &r.Recenteredby, &r.Recnotes, &r.Recusage, &r.Recusagebar, &r.Reccardno, &r.Recsparen1, &r.Recsparen2, &r.Recspared1, &r.Recspared2, &r.EquinoxLrn, &r.EquinoxSec)
		if err != nil {
			return err
		}
		if !callback(r) {
			return nil
		}
	}

	return nil
}

// ReccardByEquinoxLrn retrieves a row from 'equinox.reccard' as a Reccard.
//
// Generated from index 'reccard_pkey'.
func ReccardByEquinoxLrn(db XODB, equinoxLrn int64) (*Reccard, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`recuniquesys, recaccounttype, reccustidentity, recshopperref, rectypecord, recverified, recvalid, recrecurring, reconeclick, recdateentered, recenteredby, recnotes, recusage, recusagebar, reccardno, recsparen1, recsparen2, recspared1, recspared2, equinox_lrn, equinox_sec ` +
		`FROM equinox.reccard ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	r := Reccard{}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&r.Recuniquesys, &r.Recaccounttype, &r.Reccustidentity, &r.Recshopperref, &r.Rectypecord, &r.Recverified, &r.Recvalid, &r.Recrecurring, &r.Reconeclick, &r.Recdateentered, &r.Recenteredby, &r.Recnotes, &r.Recusage, &r.Recusagebar, &r.Reccardno, &r.Recsparen1, &r.Recsparen2, &r.Recspared1, &r.Recspared2, &r.EquinoxLrn, &r.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &r, nil
}
