// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/lib/pq"
)

// Biscuit represents a row from 'equinox.biscuit'.
type Biscuit struct {
	Biscuittype      sql.NullString  `json:"biscuittype"`      // biscuittype
	Biscuitdate      pq.NullTime     `json:"biscuitdate"`      // biscuitdate
	Biscuitnextdate  pq.NullTime     `json:"biscuitnextdate"`  // biscuitnextdate
	Biscuitstatus    sql.NullString  `json:"biscuitstatus"`    // biscuitstatus
	Biscuitbinary    sql.NullString  `json:"biscuitbinary"`    // biscuitbinary
	Biscuitoutcome   sql.NullString  `json:"biscuitoutcome"`   // biscuitoutcome
	Biscuittocomm    pq.NullTime     `json:"biscuittocomm"`    // biscuittocomm
	Biscuitreference sql.NullFloat64 `json:"biscuitreference"` // biscuitreference
	EquinoxPrn       sql.NullInt64   `json:"equinox_prn"`      // equinox_prn
	EquinoxLrn       int64           `json:"equinox_lrn"`      // equinox_lrn
	EquinoxSec       sql.NullInt64   `json:"equinox_sec"`      // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Biscuit exists in the database.
func (b *Biscuit) Exists() bool {
	return b._exists
}

// Deleted provides information if the Biscuit has been deleted from the database.
func (b *Biscuit) Deleted() bool {
	return b._deleted
}

// Insert inserts the Biscuit to the database.
func (b *Biscuit) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if b._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.biscuit (` +
		`biscuittype, biscuitdate, biscuitnextdate, biscuitstatus, biscuitbinary, biscuitoutcome, biscuittocomm, biscuitreference, equinox_prn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, b.Biscuittype, b.Biscuitdate, b.Biscuitnextdate, b.Biscuitstatus, b.Biscuitbinary, b.Biscuitoutcome, b.Biscuittocomm, b.Biscuitreference, b.EquinoxPrn, b.EquinoxSec)
	err = db.QueryRow(sqlstr, b.Biscuittype, b.Biscuitdate, b.Biscuitnextdate, b.Biscuitstatus, b.Biscuitbinary, b.Biscuitoutcome, b.Biscuittocomm, b.Biscuitreference, b.EquinoxPrn, b.EquinoxSec).Scan(&b.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	b._exists = true

	return nil
}

// Update updates the Biscuit in the database.
func (b *Biscuit) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !b._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if b._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.biscuit SET (` +
		`biscuittype, biscuitdate, biscuitnextdate, biscuitstatus, biscuitbinary, biscuitoutcome, biscuittocomm, biscuitreference, equinox_prn, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10` +
		`) WHERE equinox_lrn = $11`

	// run query
	XOLog(sqlstr, b.Biscuittype, b.Biscuitdate, b.Biscuitnextdate, b.Biscuitstatus, b.Biscuitbinary, b.Biscuitoutcome, b.Biscuittocomm, b.Biscuitreference, b.EquinoxPrn, b.EquinoxSec, b.EquinoxLrn)
	_, err = db.Exec(sqlstr, b.Biscuittype, b.Biscuitdate, b.Biscuitnextdate, b.Biscuitstatus, b.Biscuitbinary, b.Biscuitoutcome, b.Biscuittocomm, b.Biscuitreference, b.EquinoxPrn, b.EquinoxSec, b.EquinoxLrn)
	return err
}

// Save saves the Biscuit to the database.
func (b *Biscuit) Save(db XODB) error {
	if b.Exists() {
		return b.Update(db)
	}

	return b.Insert(db)
}

// Upsert performs an upsert for Biscuit.
//
// NOTE: PostgreSQL 9.5+ only
func (b *Biscuit) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if b._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.biscuit (` +
		`biscuittype, biscuitdate, biscuitnextdate, biscuitstatus, biscuitbinary, biscuitoutcome, biscuittocomm, biscuitreference, equinox_prn, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`biscuittype, biscuitdate, biscuitnextdate, biscuitstatus, biscuitbinary, biscuitoutcome, biscuittocomm, biscuitreference, equinox_prn, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.biscuittype, EXCLUDED.biscuitdate, EXCLUDED.biscuitnextdate, EXCLUDED.biscuitstatus, EXCLUDED.biscuitbinary, EXCLUDED.biscuitoutcome, EXCLUDED.biscuittocomm, EXCLUDED.biscuitreference, EXCLUDED.equinox_prn, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, b.Biscuittype, b.Biscuitdate, b.Biscuitnextdate, b.Biscuitstatus, b.Biscuitbinary, b.Biscuitoutcome, b.Biscuittocomm, b.Biscuitreference, b.EquinoxPrn, b.EquinoxLrn, b.EquinoxSec)
	_, err = db.Exec(sqlstr, b.Biscuittype, b.Biscuitdate, b.Biscuitnextdate, b.Biscuitstatus, b.Biscuitbinary, b.Biscuitoutcome, b.Biscuittocomm, b.Biscuitreference, b.EquinoxPrn, b.EquinoxLrn, b.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	b._exists = true

	return nil
}

// Delete deletes the Biscuit from the database.
func (b *Biscuit) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !b._exists {
		return nil
	}

	// if deleted, bail
	if b._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.biscuit WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, b.EquinoxLrn)
	_, err = db.Exec(sqlstr, b.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	b._deleted = true

	return nil
}

// BiscuitByEquinoxLrn retrieves a row from 'equinox.biscuit' as a Biscuit.
//
// Generated from index 'biscuit_pkey'.
func BiscuitByEquinoxLrn(db XODB, equinoxLrn int64) (*Biscuit, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`biscuittype, biscuitdate, biscuitnextdate, biscuitstatus, biscuitbinary, biscuitoutcome, biscuittocomm, biscuitreference, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.biscuit ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	b := Biscuit{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&b.Biscuittype, &b.Biscuitdate, &b.Biscuitnextdate, &b.Biscuitstatus, &b.Biscuitbinary, &b.Biscuitoutcome, &b.Biscuittocomm, &b.Biscuitreference, &b.EquinoxPrn, &b.EquinoxLrn, &b.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &b, nil
}
