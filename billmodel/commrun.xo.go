// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"

	"github.com/lib/pq"
)

// Commrun represents a row from 'equinox.commrun'.
type Commrun struct {
	Crnumber         sql.NullInt64   `json:"crnumber"`         // crnumber
	Crperiod         sql.NullString  `json:"crperiod"`         // crperiod
	Crbillinggroup   sql.NullInt64   `json:"crbillinggroup"`   // crbillinggroup
	Crbillsperiod    sql.NullString  `json:"crbillsperiod"`    // crbillsperiod
	Crcallsperiod    sql.NullString  `json:"crcallsperiod"`    // crcallsperiod
	Crcurrenttp      sql.NullInt64   `json:"crcurrenttp"`      // crcurrenttp
	Crcurrenttml     sql.NullInt64   `json:"crcurrenttml"`     // crcurrenttml
	Crdate           pq.NullTime     `json:"crdate"`           // crdate
	Crlogfile        sql.NullString  `json:"crlogfile"`        // crlogfile
	Croutputpath     sql.NullString  `json:"croutputpath"`     // croutputpath
	Crstatementspath sql.NullString  `json:"crstatementspath"` // crstatementspath
	Crbacspath       sql.NullString  `json:"crbacspath"`       // crbacspath
	Crcmmssnblepath  sql.NullString  `json:"crcmmssnblepath"`  // crcmmssnblepath
	Crstatementsread sql.NullInt64   `json:"crstatementsread"` // crstatementsread
	Crstatementexten sql.NullString  `json:"crstatementexten"` // crstatementexten
	Crtabcommitted   pq.NullTime     `json:"crtabcommitted"`   // crtabcommitted
	Crtabsubmitted   pq.NullTime     `json:"crtabsubmitted"`   // crtabsubmitted
	Crtabdebited     pq.NullTime     `json:"crtabdebited"`     // crtabdebited
	Crloanssignedoff pq.NullTime     `json:"crloanssignedoff"` // crloanssignedoff
	Crstarted        pq.NullTime     `json:"crstarted"`        // crstarted
	Crfinished       pq.NullTime     `json:"crfinished"`       // crfinished
	Crbacssubmitted  pq.NullTime     `json:"crbacssubmitted"`  // crbacssubmitted
	Crrensubmitted   pq.NullTime     `json:"crrensubmitted"`   // crrensubmitted
	Crrendebited     pq.NullTime     `json:"crrendebited"`     // crrendebited
	Crarchived       pq.NullTime     `json:"crarchived"`       // crarchived
	Crfirstinvoiceno sql.NullString  `json:"crfirstinvoiceno"` // crfirstinvoiceno
	Crlastinvoiceno  sql.NullString  `json:"crlastinvoiceno"`  // crlastinvoiceno
	Crstatusold      sql.NullString  `json:"crstatusold"`      // crstatusold
	Cremailsent      sql.NullInt64   `json:"cremailsent"`      // cremailsent
	Cremailoutstndng sql.NullInt64   `json:"cremailoutstndng"` // cremailoutstndng
	Crprintsent      sql.NullInt64   `json:"crprintsent"`      // crprintsent
	Crprintoutstndng sql.NullInt64   `json:"crprintoutstndng"` // crprintoutstndng
	Crskipped        sql.NullInt64   `json:"crskipped"`        // crskipped
	Crrenewalcode    sql.NullString  `json:"crrenewalcode"`    // crrenewalcode
	Crsparec1        sql.NullString  `json:"crsparec1"`        // crsparec1
	Crsparec2        sql.NullString  `json:"crsparec2"`        // crsparec2
	Crsparen1        sql.NullFloat64 `json:"crsparen1"`        // crsparen1
	Crsparen2        sql.NullFloat64 `json:"crsparen2"`        // crsparen2
	Crsparel1        sql.NullInt64   `json:"crsparel1"`        // crsparel1
	Crstatus         sql.NullString  `json:"crstatus"`         // crstatus
	Crsarssignedoff  pq.NullTime     `json:"crsarssignedoff"`  // crsarssignedoff
	Crpledgercrdate  pq.NullTime     `json:"crpledgercrdate"`  // crpledgercrdate
	EquinoxLrn       int64           `json:"equinox_lrn"`      // equinox_lrn
	EquinoxSec       sql.NullInt64   `json:"equinox_sec"`      // equinox_sec
}

func AllCommrun(db XODB, callback func(x Commrun) bool) error {

	// sql query
	const sqlstr = `SELECT ` +
		`crnumber, crperiod, crbillinggroup, crbillsperiod, crcallsperiod, crcurrenttp, crcurrenttml, crdate, crlogfile, croutputpath, crstatementspath, crbacspath, crcmmssnblepath, crstatementsread, crstatementexten, crtabcommitted, crtabsubmitted, crtabdebited, crloanssignedoff, crstarted, crfinished, crbacssubmitted, crrensubmitted, crrendebited, crarchived, crfirstinvoiceno, crlastinvoiceno, crstatusold, cremailsent, cremailoutstndng, crprintsent, crprintoutstndng, crskipped, crrenewalcode, crsparec1, crsparec2, crsparen1, crsparen2, crsparel1, crstatus, crsarssignedoff, crpledgercrdate, equinox_lrn, equinox_sec ` +
		`FROM equinox.commrun `

	q, err := db.Query(sqlstr)

	if err != nil {
		return err
	}
	defer q.Close()

	// load results
	for q.Next() {
		c := Commrun{}

		// scan
		err = q.Scan(&c.Crnumber, &c.Crperiod, &c.Crbillinggroup, &c.Crbillsperiod, &c.Crcallsperiod, &c.Crcurrenttp, &c.Crcurrenttml, &c.Crdate, &c.Crlogfile, &c.Croutputpath, &c.Crstatementspath, &c.Crbacspath, &c.Crcmmssnblepath, &c.Crstatementsread, &c.Crstatementexten, &c.Crtabcommitted, &c.Crtabsubmitted, &c.Crtabdebited, &c.Crloanssignedoff, &c.Crstarted, &c.Crfinished, &c.Crbacssubmitted, &c.Crrensubmitted, &c.Crrendebited, &c.Crarchived, &c.Crfirstinvoiceno, &c.Crlastinvoiceno, &c.Crstatusold, &c.Cremailsent, &c.Cremailoutstndng, &c.Crprintsent, &c.Crprintoutstndng, &c.Crskipped, &c.Crrenewalcode, &c.Crsparec1, &c.Crsparec2, &c.Crsparen1, &c.Crsparen2, &c.Crsparel1, &c.Crstatus, &c.Crsarssignedoff, &c.Crpledgercrdate, &c.EquinoxLrn, &c.EquinoxSec)
		if err != nil {
			return err
		}
		if !callback(c) {
			return nil
		}
	}

	return nil
}

// CommrunByEquinoxLrn retrieves a row from 'equinox.commrun' as a Commrun.
//
// Generated from index 'commrun_pkey'.
func CommrunByEquinoxLrn(db XODB, equinoxLrn int64) (*Commrun, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`crnumber, crperiod, crbillinggroup, crbillsperiod, crcallsperiod, crcurrenttp, crcurrenttml, crdate, crlogfile, croutputpath, crstatementspath, crbacspath, crcmmssnblepath, crstatementsread, crstatementexten, crtabcommitted, crtabsubmitted, crtabdebited, crloanssignedoff, crstarted, crfinished, crbacssubmitted, crrensubmitted, crrendebited, crarchived, crfirstinvoiceno, crlastinvoiceno, crstatusold, cremailsent, cremailoutstndng, crprintsent, crprintoutstndng, crskipped, crrenewalcode, crsparec1, crsparec2, crsparen1, crsparen2, crsparel1, crstatus, crsarssignedoff, crpledgercrdate, equinox_lrn, equinox_sec ` +
		`FROM equinox.commrun ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	c := Commrun{}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&c.Crnumber, &c.Crperiod, &c.Crbillinggroup, &c.Crbillsperiod, &c.Crcallsperiod, &c.Crcurrenttp, &c.Crcurrenttml, &c.Crdate, &c.Crlogfile, &c.Croutputpath, &c.Crstatementspath, &c.Crbacspath, &c.Crcmmssnblepath, &c.Crstatementsread, &c.Crstatementexten, &c.Crtabcommitted, &c.Crtabsubmitted, &c.Crtabdebited, &c.Crloanssignedoff, &c.Crstarted, &c.Crfinished, &c.Crbacssubmitted, &c.Crrensubmitted, &c.Crrendebited, &c.Crarchived, &c.Crfirstinvoiceno, &c.Crlastinvoiceno, &c.Crstatusold, &c.Cremailsent, &c.Cremailoutstndng, &c.Crprintsent, &c.Crprintoutstndng, &c.Crskipped, &c.Crrenewalcode, &c.Crsparec1, &c.Crsparec2, &c.Crsparen1, &c.Crsparen2, &c.Crsparel1, &c.Crstatus, &c.Crsarssignedoff, &c.Crpledgercrdate, &c.EquinoxLrn, &c.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &c, nil
}
