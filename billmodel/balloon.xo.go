// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// Balloon represents a row from 'equinox.balloon'.
type Balloon struct {
	Bllneligible  sql.NullInt64  `json:"bllneligible"`  // bllneligible
	Bllntype      sql.NullInt64  `json:"bllntype"`      // bllntype
	Blln1903title sql.NullString `json:"blln1903title"` // blln1903title
	Blln1903group sql.NullInt64  `json:"blln1903group"` // blln1903group
	Bllndaffigold sql.NullInt64  `json:"bllndaffigold"` // bllndaffigold
	Bllngroup     sql.NullInt64  `json:"bllngroup"`     // bllngroup
	Bllnids       sql.NullInt64  `json:"bllnids"`       // bllnids
	Bllnqualified sql.NullString `json:"bllnqualified"` // bllnqualified
	EquinoxPrn    sql.NullInt64  `json:"equinox_prn"`   // equinox_prn
	EquinoxLrn    int64          `json:"equinox_lrn"`   // equinox_lrn
	EquinoxSec    sql.NullInt64  `json:"equinox_sec"`   // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Balloon exists in the database.
func (b *Balloon) Exists() bool {
	return b._exists
}

// Deleted provides information if the Balloon has been deleted from the database.
func (b *Balloon) Deleted() bool {
	return b._deleted
}

// Insert inserts the Balloon to the database.
func (b *Balloon) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if b._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.balloon (` +
		`bllneligible, bllntype, blln1903title, blln1903group, bllndaffigold, bllngroup, bllnids, bllnqualified, equinox_prn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, b.Bllneligible, b.Bllntype, b.Blln1903title, b.Blln1903group, b.Bllndaffigold, b.Bllngroup, b.Bllnids, b.Bllnqualified, b.EquinoxPrn, b.EquinoxSec)
	err = db.QueryRow(sqlstr, b.Bllneligible, b.Bllntype, b.Blln1903title, b.Blln1903group, b.Bllndaffigold, b.Bllngroup, b.Bllnids, b.Bllnqualified, b.EquinoxPrn, b.EquinoxSec).Scan(&b.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	b._exists = true

	return nil
}

// Update updates the Balloon in the database.
func (b *Balloon) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !b._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if b._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.balloon SET (` +
		`bllneligible, bllntype, blln1903title, blln1903group, bllndaffigold, bllngroup, bllnids, bllnqualified, equinox_prn, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10` +
		`) WHERE equinox_lrn = $11`

	// run query
	XOLog(sqlstr, b.Bllneligible, b.Bllntype, b.Blln1903title, b.Blln1903group, b.Bllndaffigold, b.Bllngroup, b.Bllnids, b.Bllnqualified, b.EquinoxPrn, b.EquinoxSec, b.EquinoxLrn)
	_, err = db.Exec(sqlstr, b.Bllneligible, b.Bllntype, b.Blln1903title, b.Blln1903group, b.Bllndaffigold, b.Bllngroup, b.Bllnids, b.Bllnqualified, b.EquinoxPrn, b.EquinoxSec, b.EquinoxLrn)
	return err
}

// Save saves the Balloon to the database.
func (b *Balloon) Save(db XODB) error {
	if b.Exists() {
		return b.Update(db)
	}

	return b.Insert(db)
}

// Upsert performs an upsert for Balloon.
//
// NOTE: PostgreSQL 9.5+ only
func (b *Balloon) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if b._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.balloon (` +
		`bllneligible, bllntype, blln1903title, blln1903group, bllndaffigold, bllngroup, bllnids, bllnqualified, equinox_prn, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`bllneligible, bllntype, blln1903title, blln1903group, bllndaffigold, bllngroup, bllnids, bllnqualified, equinox_prn, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.bllneligible, EXCLUDED.bllntype, EXCLUDED.blln1903title, EXCLUDED.blln1903group, EXCLUDED.bllndaffigold, EXCLUDED.bllngroup, EXCLUDED.bllnids, EXCLUDED.bllnqualified, EXCLUDED.equinox_prn, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, b.Bllneligible, b.Bllntype, b.Blln1903title, b.Blln1903group, b.Bllndaffigold, b.Bllngroup, b.Bllnids, b.Bllnqualified, b.EquinoxPrn, b.EquinoxLrn, b.EquinoxSec)
	_, err = db.Exec(sqlstr, b.Bllneligible, b.Bllntype, b.Blln1903title, b.Blln1903group, b.Bllndaffigold, b.Bllngroup, b.Bllnids, b.Bllnqualified, b.EquinoxPrn, b.EquinoxLrn, b.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	b._exists = true

	return nil
}

// Delete deletes the Balloon from the database.
func (b *Balloon) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !b._exists {
		return nil
	}

	// if deleted, bail
	if b._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.balloon WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, b.EquinoxLrn)
	_, err = db.Exec(sqlstr, b.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	b._deleted = true

	return nil
}

// BalloonByEquinoxLrn retrieves a row from 'equinox.balloon' as a Balloon.
//
// Generated from index 'balloon_pkey'.
func BalloonByEquinoxLrn(db XODB, equinoxLrn int64) (*Balloon, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`bllneligible, bllntype, blln1903title, blln1903group, bllndaffigold, bllngroup, bllnids, bllnqualified, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.balloon ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	b := Balloon{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&b.Bllneligible, &b.Bllntype, &b.Blln1903title, &b.Blln1903group, &b.Bllndaffigold, &b.Bllngroup, &b.Bllnids, &b.Bllnqualified, &b.EquinoxPrn, &b.EquinoxLrn, &b.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &b, nil
}
