// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/lib/pq"
)

// Greendl represents a row from 'equinox.greendl'.
type Greendl struct {
	Gdplanid         sql.NullString  `json:"gdplanid"`         // gdplanid
	Gdmpan           sql.NullString  `json:"gdmpan"`           // gdmpan
	Gdstartdate      pq.NullTime     `json:"gdstartdate"`      // gdstartdate
	Gdenddate        pq.NullTime     `json:"gdenddate"`        // gdenddate
	Gdannualgassave  sql.NullFloat64 `json:"gdannualgassave"`  // gdannualgassave
	Gdannualelecsave sql.NullFloat64 `json:"gdannualelecsave"` // gdannualelecsave
	EquinoxLrn       int64           `json:"equinox_lrn"`      // equinox_lrn
	EquinoxSec       sql.NullInt64   `json:"equinox_sec"`      // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Greendl exists in the database.
func (g *Greendl) Exists() bool {
	return g._exists
}

// Deleted provides information if the Greendl has been deleted from the database.
func (g *Greendl) Deleted() bool {
	return g._deleted
}

// Insert inserts the Greendl to the database.
func (g *Greendl) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if g._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.greendl (` +
		`gdplanid, gdmpan, gdstartdate, gdenddate, gdannualgassave, gdannualelecsave, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, g.Gdplanid, g.Gdmpan, g.Gdstartdate, g.Gdenddate, g.Gdannualgassave, g.Gdannualelecsave, g.EquinoxSec)
	err = db.QueryRow(sqlstr, g.Gdplanid, g.Gdmpan, g.Gdstartdate, g.Gdenddate, g.Gdannualgassave, g.Gdannualelecsave, g.EquinoxSec).Scan(&g.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	g._exists = true

	return nil
}

// Update updates the Greendl in the database.
func (g *Greendl) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !g._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if g._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.greendl SET (` +
		`gdplanid, gdmpan, gdstartdate, gdenddate, gdannualgassave, gdannualelecsave, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`) WHERE equinox_lrn = $8`

	// run query
	XOLog(sqlstr, g.Gdplanid, g.Gdmpan, g.Gdstartdate, g.Gdenddate, g.Gdannualgassave, g.Gdannualelecsave, g.EquinoxSec, g.EquinoxLrn)
	_, err = db.Exec(sqlstr, g.Gdplanid, g.Gdmpan, g.Gdstartdate, g.Gdenddate, g.Gdannualgassave, g.Gdannualelecsave, g.EquinoxSec, g.EquinoxLrn)
	return err
}

// Save saves the Greendl to the database.
func (g *Greendl) Save(db XODB) error {
	if g.Exists() {
		return g.Update(db)
	}

	return g.Insert(db)
}

// Upsert performs an upsert for Greendl.
//
// NOTE: PostgreSQL 9.5+ only
func (g *Greendl) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if g._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.greendl (` +
		`gdplanid, gdmpan, gdstartdate, gdenddate, gdannualgassave, gdannualelecsave, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`gdplanid, gdmpan, gdstartdate, gdenddate, gdannualgassave, gdannualelecsave, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.gdplanid, EXCLUDED.gdmpan, EXCLUDED.gdstartdate, EXCLUDED.gdenddate, EXCLUDED.gdannualgassave, EXCLUDED.gdannualelecsave, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, g.Gdplanid, g.Gdmpan, g.Gdstartdate, g.Gdenddate, g.Gdannualgassave, g.Gdannualelecsave, g.EquinoxLrn, g.EquinoxSec)
	_, err = db.Exec(sqlstr, g.Gdplanid, g.Gdmpan, g.Gdstartdate, g.Gdenddate, g.Gdannualgassave, g.Gdannualelecsave, g.EquinoxLrn, g.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	g._exists = true

	return nil
}

// Delete deletes the Greendl from the database.
func (g *Greendl) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !g._exists {
		return nil
	}

	// if deleted, bail
	if g._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.greendl WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, g.EquinoxLrn)
	_, err = db.Exec(sqlstr, g.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	g._deleted = true

	return nil
}

// GreendlByEquinoxLrn retrieves a row from 'equinox.greendl' as a Greendl.
//
// Generated from index 'greendl_pkey'.
func GreendlByEquinoxLrn(db XODB, equinoxLrn int64) (*Greendl, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`gdplanid, gdmpan, gdstartdate, gdenddate, gdannualgassave, gdannualelecsave, equinox_lrn, equinox_sec ` +
		`FROM equinox.greendl ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	g := Greendl{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&g.Gdplanid, &g.Gdmpan, &g.Gdstartdate, &g.Gdenddate, &g.Gdannualgassave, &g.Gdannualelecsave, &g.EquinoxLrn, &g.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &g, nil
}
