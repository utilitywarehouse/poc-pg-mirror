// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// Deladdr represents a row from 'equinox.deladdr'.
type Deladdr struct {
	DelRef       sql.NullInt64  `json:"del_ref"`       // del_ref
	DelRecipient sql.NullString `json:"del_recipient"` // del_recipient
	DelAdd1      sql.NullString `json:"del_add1"`      // del_add1
	DelAdd2      sql.NullString `json:"del_add2"`      // del_add2
	DelAdd3      sql.NullString `json:"del_add3"`      // del_add3
	DelAdd4      sql.NullString `json:"del_add4"`      // del_add4
	DelCounty    sql.NullString `json:"del_county"`    // del_county
	DelPcode     sql.NullString `json:"del_pcode"`     // del_pcode
	EquinoxLrn   int64          `json:"equinox_lrn"`   // equinox_lrn
	EquinoxSec   sql.NullInt64  `json:"equinox_sec"`   // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Deladdr exists in the database.
func (d *Deladdr) Exists() bool {
	return d._exists
}

// Deleted provides information if the Deladdr has been deleted from the database.
func (d *Deladdr) Deleted() bool {
	return d._deleted
}

// Insert inserts the Deladdr to the database.
func (d *Deladdr) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if d._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.deladdr (` +
		`del_ref, del_recipient, del_add1, del_add2, del_add3, del_add4, del_county, del_pcode, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, d.DelRef, d.DelRecipient, d.DelAdd1, d.DelAdd2, d.DelAdd3, d.DelAdd4, d.DelCounty, d.DelPcode, d.EquinoxSec)
	err = db.QueryRow(sqlstr, d.DelRef, d.DelRecipient, d.DelAdd1, d.DelAdd2, d.DelAdd3, d.DelAdd4, d.DelCounty, d.DelPcode, d.EquinoxSec).Scan(&d.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	d._exists = true

	return nil
}

// Update updates the Deladdr in the database.
func (d *Deladdr) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !d._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if d._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.deladdr SET (` +
		`del_ref, del_recipient, del_add1, del_add2, del_add3, del_add4, del_county, del_pcode, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9` +
		`) WHERE equinox_lrn = $10`

	// run query
	XOLog(sqlstr, d.DelRef, d.DelRecipient, d.DelAdd1, d.DelAdd2, d.DelAdd3, d.DelAdd4, d.DelCounty, d.DelPcode, d.EquinoxSec, d.EquinoxLrn)
	_, err = db.Exec(sqlstr, d.DelRef, d.DelRecipient, d.DelAdd1, d.DelAdd2, d.DelAdd3, d.DelAdd4, d.DelCounty, d.DelPcode, d.EquinoxSec, d.EquinoxLrn)
	return err
}

// Save saves the Deladdr to the database.
func (d *Deladdr) Save(db XODB) error {
	if d.Exists() {
		return d.Update(db)
	}

	return d.Insert(db)
}

// Upsert performs an upsert for Deladdr.
//
// NOTE: PostgreSQL 9.5+ only
func (d *Deladdr) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if d._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.deladdr (` +
		`del_ref, del_recipient, del_add1, del_add2, del_add3, del_add4, del_county, del_pcode, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`del_ref, del_recipient, del_add1, del_add2, del_add3, del_add4, del_county, del_pcode, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.del_ref, EXCLUDED.del_recipient, EXCLUDED.del_add1, EXCLUDED.del_add2, EXCLUDED.del_add3, EXCLUDED.del_add4, EXCLUDED.del_county, EXCLUDED.del_pcode, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, d.DelRef, d.DelRecipient, d.DelAdd1, d.DelAdd2, d.DelAdd3, d.DelAdd4, d.DelCounty, d.DelPcode, d.EquinoxLrn, d.EquinoxSec)
	_, err = db.Exec(sqlstr, d.DelRef, d.DelRecipient, d.DelAdd1, d.DelAdd2, d.DelAdd3, d.DelAdd4, d.DelCounty, d.DelPcode, d.EquinoxLrn, d.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	d._exists = true

	return nil
}

// Delete deletes the Deladdr from the database.
func (d *Deladdr) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !d._exists {
		return nil
	}

	// if deleted, bail
	if d._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.deladdr WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, d.EquinoxLrn)
	_, err = db.Exec(sqlstr, d.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	d._deleted = true

	return nil
}

// DeladdrByEquinoxLrn retrieves a row from 'equinox.deladdr' as a Deladdr.
//
// Generated from index 'deladdr_pkey'.
func DeladdrByEquinoxLrn(db XODB, equinoxLrn int64) (*Deladdr, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`del_ref, del_recipient, del_add1, del_add2, del_add3, del_add4, del_county, del_pcode, equinox_lrn, equinox_sec ` +
		`FROM equinox.deladdr ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	d := Deladdr{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&d.DelRef, &d.DelRecipient, &d.DelAdd1, &d.DelAdd2, &d.DelAdd3, &d.DelAdd4, &d.DelCounty, &d.DelPcode, &d.EquinoxLrn, &d.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &d, nil
}
