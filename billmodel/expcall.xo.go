// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"

	"github.com/lib/pq"
)

// Expcall represents a row from 'equinox.expcalls'.
type Expcall struct {
	Expdate         pq.NullTime     `json:"expdate"`         // expdate
	Exptime         sql.NullString  `json:"exptime"`         // exptime
	Expdestination  sql.NullString  `json:"expdestination"`  // expdestination
	Expdestnumber   sql.NullString  `json:"expdestnumber"`   // expdestnumber
	Expratingperiod sql.NullString  `json:"expratingperiod"` // expratingperiod
	Expdurationsecs sql.NullInt64   `json:"expdurationsecs"` // expdurationsecs
	Expband         sql.NullString  `json:"expband"`         // expband
	Expwholesale    sql.NullInt64   `json:"expwholesale"`    // expwholesale
	Exptypeofexecpt sql.NullFloat64 `json:"exptypeofexecpt"` // exptypeofexecpt
	Expcli          sql.NullString  `json:"expcli"`          // expcli
	Expfileid       sql.NullString  `json:"expfileid"`       // expfileid
	Expbillno       sql.NullFloat64 `json:"expbillno"`       // expbillno
	Expcarrier      sql.NullString  `json:"expcarrier"`      // expcarrier
	Expsparec1      sql.NullString  `json:"expsparec1"`      // expsparec1
	Expsparen1      sql.NullFloat64 `json:"expsparen1"`      // expsparen1
	Expspared1      pq.NullTime     `json:"expspared1"`      // expspared1
	EquinoxLrn      int64           `json:"equinox_lrn"`     // equinox_lrn
	EquinoxSec      sql.NullInt64   `json:"equinox_sec"`     // equinox_sec
}

func AllExpcall(db XODB, callback func(x Expcall) bool) error {

	// sql query
	const sqlstr = `SELECT ` +
		`expdate, exptime, expdestination, expdestnumber, expratingperiod, expdurationsecs, expband, expwholesale, exptypeofexecpt, expcli, expfileid, expbillno, expcarrier, expsparec1, expsparen1, expspared1, equinox_lrn, equinox_sec ` +
		`FROM equinox.expcalls `

	q, err := db.Query(sqlstr)

	if err != nil {
		return err
	}
	defer q.Close()

	// load results
	for q.Next() {
		e := Expcall{}

		// scan
		err = q.Scan(&e.Expdate, &e.Exptime, &e.Expdestination, &e.Expdestnumber, &e.Expratingperiod, &e.Expdurationsecs, &e.Expband, &e.Expwholesale, &e.Exptypeofexecpt, &e.Expcli, &e.Expfileid, &e.Expbillno, &e.Expcarrier, &e.Expsparec1, &e.Expsparen1, &e.Expspared1, &e.EquinoxLrn, &e.EquinoxSec)
		if err != nil {
			return err
		}
		if !callback(e) {
			return nil
		}
	}

	return nil
}

// ExpcallByEquinoxLrn retrieves a row from 'equinox.expcalls' as a Expcall.
//
// Generated from index 'expcalls_pkey'.
func ExpcallByEquinoxLrn(db XODB, equinoxLrn int64) (*Expcall, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`expdate, exptime, expdestination, expdestnumber, expratingperiod, expdurationsecs, expband, expwholesale, exptypeofexecpt, expcli, expfileid, expbillno, expcarrier, expsparec1, expsparen1, expspared1, equinox_lrn, equinox_sec ` +
		`FROM equinox.expcalls ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	e := Expcall{}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&e.Expdate, &e.Exptime, &e.Expdestination, &e.Expdestnumber, &e.Expratingperiod, &e.Expdurationsecs, &e.Expband, &e.Expwholesale, &e.Exptypeofexecpt, &e.Expcli, &e.Expfileid, &e.Expbillno, &e.Expcarrier, &e.Expsparec1, &e.Expsparen1, &e.Expspared1, &e.EquinoxLrn, &e.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &e, nil
}
