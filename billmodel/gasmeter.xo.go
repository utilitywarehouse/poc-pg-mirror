// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"

	"github.com/lib/pq"
)

// Gasmeter represents a row from 'equinox.gasmeter'.
type Gasmeter struct {
	Gmtrmprn         sql.NullString  `json:"gmtrmprn"`         // gmtrmprn
	Gmtrserialno     sql.NullString  `json:"gmtrserialno"`     // gmtrserialno
	Gmtrinstalldate  pq.NullTime     `json:"gmtrinstalldate"`  // gmtrinstalldate
	Gmtreffectdate   pq.NullTime     `json:"gmtreffectdate"`   // gmtreffectdate
	Gmtrdatesent     pq.NullTime     `json:"gmtrdatesent"`     // gmtrdatesent
	Gmtrdateupdate   pq.NullTime     `json:"gmtrdateupdate"`   // gmtrdateupdate
	Gmtrdupdatedby   sql.NullString  `json:"gmtrdupdatedby"`   // gmtrdupdatedby
	Gmtryearmake     sql.NullString  `json:"gmtryearmake"`     // gmtryearmake
	Gmtrmakecode     sql.NullString  `json:"gmtrmakecode"`     // gmtrmakecode
	Gmtrmodelcode    sql.NullString  `json:"gmtrmodelcode"`    // gmtrmodelcode
	Gmtrmetertype    sql.NullString  `json:"gmtrmetertype"`    // gmtrmetertype
	Gmtrcapacity     sql.NullString  `json:"gmtrcapacity"`     // gmtrcapacity
	Gmtrlocationcode sql.NullString  `json:"gmtrlocationcode"` // gmtrlocationcode
	Gmtrunits        sql.NullString  `json:"gmtrunits"`        // gmtrunits
	Gmtrreadfactor   sql.NullFloat64 `json:"gmtrreadfactor"`   // gmtrreadfactor
	Gmtrdials        sql.NullInt64   `json:"gmtrdials"`        // gmtrdials
	Gmtrrolecode     sql.NullString  `json:"gmtrrolecode"`     // gmtrrolecode
	Gmtrmetermech    sql.NullString  `json:"gmtrmetermech"`    // gmtrmetermech
	Gmtrcorrfactor   sql.NullFloat64 `json:"gmtrcorrfactor"`   // gmtrcorrfactor
	Gmtrstatus       sql.NullString  `json:"gmtrstatus"`       // gmtrstatus
	Gmtrpostcode     sql.NullString  `json:"gmtrpostcode"`     // gmtrpostcode
	Gmtrbuildingno   sql.NullString  `json:"gmtrbuildingno"`   // gmtrbuildingno
	Gmtrbuildingname sql.NullString  `json:"gmtrbuildingname"` // gmtrbuildingname
	Gmtrdependstreet sql.NullString  `json:"gmtrdependstreet"` // gmtrdependstreet
	Gmtrstreet       sql.NullString  `json:"gmtrstreet"`       // gmtrstreet
	Gmtrlocality     sql.NullString  `json:"gmtrlocality"`     // gmtrlocality
	Gmtrposttown     sql.NullString  `json:"gmtrposttown"`     // gmtrposttown
	Gmtrcounty       sql.NullString  `json:"gmtrcounty"`       // gmtrcounty
	Gmtrfilename     sql.NullString  `json:"gmtrfilename"`     // gmtrfilename
	Gmtrmeasureunits sql.NullString  `json:"gmtrmeasureunits"` // gmtrmeasureunits
	Gmtrmultipfactor sql.NullFloat64 `json:"gmtrmultipfactor"` // gmtrmultipfactor
	Gmtrcurrentref   sql.NullString  `json:"gmtrcurrentref"`   // gmtrcurrentref
	Gmtrsmsoid       sql.NullString  `json:"gmtrsmsoid"`       // gmtrsmsoid
	Gmtrsmsoefd      pq.NullTime     `json:"gmtrsmsoefd"`      // gmtrsmsoefd
	Gmtrserviceflag  sql.NullString  `json:"gmtrserviceflag"`  // gmtrserviceflag
	Gmtrserviceefd   pq.NullTime     `json:"gmtrserviceefd"`   // gmtrserviceefd
	Gmtrsmetsinstall pq.NullTime     `json:"gmtrsmetsinstall"` // gmtrsmetsinstall
	Gmtruprn         sql.NullString  `json:"gmtruprn"`         // gmtruprn
	Gmtrnwocode      sql.NullString  `json:"gmtrnwocode"`      // gmtrnwocode
	Gmtrnwoefd       pq.NullTime     `json:"gmtrnwoefd"`       // gmtrnwoefd
	Gmtrpaymethod    sql.NullString  `json:"gmtrpaymethod"`    // gmtrpaymethod
	Gmtrmarketscode  sql.NullString  `json:"gmtrmarketscode"`  // gmtrmarketscode
	Gmtrmapid        sql.NullString  `json:"gmtrmapid"`        // gmtrmapid
	Gmtrregion       sql.NullString  `json:"gmtrregion"`       // gmtrregion
	Gmtraccountno    sql.NullString  `json:"gmtraccountno"`    // gmtraccountno
	EquinoxLrn       int64           `json:"equinox_lrn"`      // equinox_lrn
	EquinoxSec       sql.NullInt64   `json:"equinox_sec"`      // equinox_sec
}

func AllGasmeter(db XODB, callback func(x Gasmeter) bool) error {

	// sql query
	const sqlstr = `SELECT ` +
		`gmtrmprn, gmtrserialno, gmtrinstalldate, gmtreffectdate, gmtrdatesent, gmtrdateupdate, gmtrdupdatedby, gmtryearmake, gmtrmakecode, gmtrmodelcode, gmtrmetertype, gmtrcapacity, gmtrlocationcode, gmtrunits, gmtrreadfactor, gmtrdials, gmtrrolecode, gmtrmetermech, gmtrcorrfactor, gmtrstatus, gmtrpostcode, gmtrbuildingno, gmtrbuildingname, gmtrdependstreet, gmtrstreet, gmtrlocality, gmtrposttown, gmtrcounty, gmtrfilename, gmtrmeasureunits, gmtrmultipfactor, gmtrcurrentref, gmtrsmsoid, gmtrsmsoefd, gmtrserviceflag, gmtrserviceefd, gmtrsmetsinstall, gmtruprn, gmtrnwocode, gmtrnwoefd, gmtrpaymethod, gmtrmarketscode, gmtrmapid, gmtrregion, gmtraccountno, equinox_lrn, equinox_sec ` +
		`FROM equinox.gasmeter `

	q, err := db.Query(sqlstr)

	if err != nil {
		return err
	}
	defer q.Close()

	// load results
	for q.Next() {
		g := Gasmeter{}

		// scan
		err = q.Scan(&g.Gmtrmprn, &g.Gmtrserialno, &g.Gmtrinstalldate, &g.Gmtreffectdate, &g.Gmtrdatesent, &g.Gmtrdateupdate, &g.Gmtrdupdatedby, &g.Gmtryearmake, &g.Gmtrmakecode, &g.Gmtrmodelcode, &g.Gmtrmetertype, &g.Gmtrcapacity, &g.Gmtrlocationcode, &g.Gmtrunits, &g.Gmtrreadfactor, &g.Gmtrdials, &g.Gmtrrolecode, &g.Gmtrmetermech, &g.Gmtrcorrfactor, &g.Gmtrstatus, &g.Gmtrpostcode, &g.Gmtrbuildingno, &g.Gmtrbuildingname, &g.Gmtrdependstreet, &g.Gmtrstreet, &g.Gmtrlocality, &g.Gmtrposttown, &g.Gmtrcounty, &g.Gmtrfilename, &g.Gmtrmeasureunits, &g.Gmtrmultipfactor, &g.Gmtrcurrentref, &g.Gmtrsmsoid, &g.Gmtrsmsoefd, &g.Gmtrserviceflag, &g.Gmtrserviceefd, &g.Gmtrsmetsinstall, &g.Gmtruprn, &g.Gmtrnwocode, &g.Gmtrnwoefd, &g.Gmtrpaymethod, &g.Gmtrmarketscode, &g.Gmtrmapid, &g.Gmtrregion, &g.Gmtraccountno, &g.EquinoxLrn, &g.EquinoxSec)
		if err != nil {
			return err
		}
		if !callback(g) {
			return nil
		}
	}

	return nil
}

// GasmeterByEquinoxLrn retrieves a row from 'equinox.gasmeter' as a Gasmeter.
//
// Generated from index 'gasmeter_pkey'.
func GasmeterByEquinoxLrn(db XODB, equinoxLrn int64) (*Gasmeter, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`gmtrmprn, gmtrserialno, gmtrinstalldate, gmtreffectdate, gmtrdatesent, gmtrdateupdate, gmtrdupdatedby, gmtryearmake, gmtrmakecode, gmtrmodelcode, gmtrmetertype, gmtrcapacity, gmtrlocationcode, gmtrunits, gmtrreadfactor, gmtrdials, gmtrrolecode, gmtrmetermech, gmtrcorrfactor, gmtrstatus, gmtrpostcode, gmtrbuildingno, gmtrbuildingname, gmtrdependstreet, gmtrstreet, gmtrlocality, gmtrposttown, gmtrcounty, gmtrfilename, gmtrmeasureunits, gmtrmultipfactor, gmtrcurrentref, gmtrsmsoid, gmtrsmsoefd, gmtrserviceflag, gmtrserviceefd, gmtrsmetsinstall, gmtruprn, gmtrnwocode, gmtrnwoefd, gmtrpaymethod, gmtrmarketscode, gmtrmapid, gmtrregion, gmtraccountno, equinox_lrn, equinox_sec ` +
		`FROM equinox.gasmeter ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	g := Gasmeter{}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&g.Gmtrmprn, &g.Gmtrserialno, &g.Gmtrinstalldate, &g.Gmtreffectdate, &g.Gmtrdatesent, &g.Gmtrdateupdate, &g.Gmtrdupdatedby, &g.Gmtryearmake, &g.Gmtrmakecode, &g.Gmtrmodelcode, &g.Gmtrmetertype, &g.Gmtrcapacity, &g.Gmtrlocationcode, &g.Gmtrunits, &g.Gmtrreadfactor, &g.Gmtrdials, &g.Gmtrrolecode, &g.Gmtrmetermech, &g.Gmtrcorrfactor, &g.Gmtrstatus, &g.Gmtrpostcode, &g.Gmtrbuildingno, &g.Gmtrbuildingname, &g.Gmtrdependstreet, &g.Gmtrstreet, &g.Gmtrlocality, &g.Gmtrposttown, &g.Gmtrcounty, &g.Gmtrfilename, &g.Gmtrmeasureunits, &g.Gmtrmultipfactor, &g.Gmtrcurrentref, &g.Gmtrsmsoid, &g.Gmtrsmsoefd, &g.Gmtrserviceflag, &g.Gmtrserviceefd, &g.Gmtrsmetsinstall, &g.Gmtruprn, &g.Gmtrnwocode, &g.Gmtrnwoefd, &g.Gmtrpaymethod, &g.Gmtrmarketscode, &g.Gmtrmapid, &g.Gmtrregion, &g.Gmtraccountno, &g.EquinoxLrn, &g.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &g, nil
}
