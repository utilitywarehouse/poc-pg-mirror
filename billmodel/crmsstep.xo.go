// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// Crmsstep represents a row from 'equinox.crmsstep'.
type Crmsstep struct {
	Crmsstpno      sql.NullInt64  `json:"crmsstpno"`      // crmsstpno
	Crmsstpstartok sql.NullString `json:"crmsstpstartok"` // crmsstpstartok
	Crmsstpdesc    sql.NullString `json:"crmsstpdesc"`    // crmsstpdesc
	Crmsstpstpproc sql.NullInt64  `json:"crmsstpstpproc"` // crmsstpstpproc
	Crmsstpexec    sql.NullString `json:"crmsstpexec"`    // crmsstpexec
	Crmsstpdepends sql.NullString `json:"crmsstpdepends"` // crmsstpdepends
	EquinoxPrn     sql.NullInt64  `json:"equinox_prn"`    // equinox_prn
	EquinoxLrn     int64          `json:"equinox_lrn"`    // equinox_lrn
	EquinoxSec     sql.NullInt64  `json:"equinox_sec"`    // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Crmsstep exists in the database.
func (c *Crmsstep) Exists() bool {
	return c._exists
}

// Deleted provides information if the Crmsstep has been deleted from the database.
func (c *Crmsstep) Deleted() bool {
	return c._deleted
}

// Insert inserts the Crmsstep to the database.
func (c *Crmsstep) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.crmsstep (` +
		`crmsstpno, crmsstpstartok, crmsstpdesc, crmsstpstpproc, crmsstpexec, crmsstpdepends, equinox_prn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, c.Crmsstpno, c.Crmsstpstartok, c.Crmsstpdesc, c.Crmsstpstpproc, c.Crmsstpexec, c.Crmsstpdepends, c.EquinoxPrn, c.EquinoxSec)
	err = db.QueryRow(sqlstr, c.Crmsstpno, c.Crmsstpstartok, c.Crmsstpdesc, c.Crmsstpstpproc, c.Crmsstpexec, c.Crmsstpdepends, c.EquinoxPrn, c.EquinoxSec).Scan(&c.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Update updates the Crmsstep in the database.
func (c *Crmsstep) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if c._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.crmsstep SET (` +
		`crmsstpno, crmsstpstartok, crmsstpdesc, crmsstpstpproc, crmsstpexec, crmsstpdepends, equinox_prn, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`) WHERE equinox_lrn = $9`

	// run query
	XOLog(sqlstr, c.Crmsstpno, c.Crmsstpstartok, c.Crmsstpdesc, c.Crmsstpstpproc, c.Crmsstpexec, c.Crmsstpdepends, c.EquinoxPrn, c.EquinoxSec, c.EquinoxLrn)
	_, err = db.Exec(sqlstr, c.Crmsstpno, c.Crmsstpstartok, c.Crmsstpdesc, c.Crmsstpstpproc, c.Crmsstpexec, c.Crmsstpdepends, c.EquinoxPrn, c.EquinoxSec, c.EquinoxLrn)
	return err
}

// Save saves the Crmsstep to the database.
func (c *Crmsstep) Save(db XODB) error {
	if c.Exists() {
		return c.Update(db)
	}

	return c.Insert(db)
}

// Upsert performs an upsert for Crmsstep.
//
// NOTE: PostgreSQL 9.5+ only
func (c *Crmsstep) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.crmsstep (` +
		`crmsstpno, crmsstpstartok, crmsstpdesc, crmsstpstpproc, crmsstpexec, crmsstpdepends, equinox_prn, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`crmsstpno, crmsstpstartok, crmsstpdesc, crmsstpstpproc, crmsstpexec, crmsstpdepends, equinox_prn, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.crmsstpno, EXCLUDED.crmsstpstartok, EXCLUDED.crmsstpdesc, EXCLUDED.crmsstpstpproc, EXCLUDED.crmsstpexec, EXCLUDED.crmsstpdepends, EXCLUDED.equinox_prn, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, c.Crmsstpno, c.Crmsstpstartok, c.Crmsstpdesc, c.Crmsstpstpproc, c.Crmsstpexec, c.Crmsstpdepends, c.EquinoxPrn, c.EquinoxLrn, c.EquinoxSec)
	_, err = db.Exec(sqlstr, c.Crmsstpno, c.Crmsstpstartok, c.Crmsstpdesc, c.Crmsstpstpproc, c.Crmsstpexec, c.Crmsstpdepends, c.EquinoxPrn, c.EquinoxLrn, c.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Delete deletes the Crmsstep from the database.
func (c *Crmsstep) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return nil
	}

	// if deleted, bail
	if c._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.crmsstep WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, c.EquinoxLrn)
	_, err = db.Exec(sqlstr, c.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	c._deleted = true

	return nil
}

// CrmsstepByEquinoxLrn retrieves a row from 'equinox.crmsstep' as a Crmsstep.
//
// Generated from index 'crmsstep_pkey'.
func CrmsstepByEquinoxLrn(db XODB, equinoxLrn int64) (*Crmsstep, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`crmsstpno, crmsstpstartok, crmsstpdesc, crmsstpstpproc, crmsstpexec, crmsstpdepends, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.crmsstep ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	c := Crmsstep{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&c.Crmsstpno, &c.Crmsstpstartok, &c.Crmsstpdesc, &c.Crmsstpstpproc, &c.Crmsstpexec, &c.Crmsstpdepends, &c.EquinoxPrn, &c.EquinoxLrn, &c.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &c, nil
}
