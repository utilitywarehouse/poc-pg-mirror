// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/lib/pq"
)

// Tabrtrn represents a row from 'equinox.tabrtrns'.
type Tabrtrn struct {
	Tbreventid      sql.NullString `json:"tbreventid"`      // tbreventid
	Tbrtrainerid    sql.NullString `json:"tbrtrainerid"`    // tbrtrainerid
	Tbrpartnerid    sql.NullString `json:"tbrpartnerid"`    // tbrpartnerid
	Tbrdatereturned pq.NullTime    `json:"tbrdatereturned"` // tbrdatereturned
	EquinoxPrn      sql.NullInt64  `json:"equinox_prn"`     // equinox_prn
	EquinoxLrn      int64          `json:"equinox_lrn"`     // equinox_lrn
	EquinoxSec      sql.NullInt64  `json:"equinox_sec"`     // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Tabrtrn exists in the database.
func (t *Tabrtrn) Exists() bool {
	return t._exists
}

// Deleted provides information if the Tabrtrn has been deleted from the database.
func (t *Tabrtrn) Deleted() bool {
	return t._deleted
}

// Insert inserts the Tabrtrn to the database.
func (t *Tabrtrn) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if t._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.tabrtrns (` +
		`tbreventid, tbrtrainerid, tbrpartnerid, tbrdatereturned, equinox_prn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, t.Tbreventid, t.Tbrtrainerid, t.Tbrpartnerid, t.Tbrdatereturned, t.EquinoxPrn, t.EquinoxSec)
	err = db.QueryRow(sqlstr, t.Tbreventid, t.Tbrtrainerid, t.Tbrpartnerid, t.Tbrdatereturned, t.EquinoxPrn, t.EquinoxSec).Scan(&t.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	t._exists = true

	return nil
}

// Update updates the Tabrtrn in the database.
func (t *Tabrtrn) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !t._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if t._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.tabrtrns SET (` +
		`tbreventid, tbrtrainerid, tbrpartnerid, tbrdatereturned, equinox_prn, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6` +
		`) WHERE equinox_lrn = $7`

	// run query
	XOLog(sqlstr, t.Tbreventid, t.Tbrtrainerid, t.Tbrpartnerid, t.Tbrdatereturned, t.EquinoxPrn, t.EquinoxSec, t.EquinoxLrn)
	_, err = db.Exec(sqlstr, t.Tbreventid, t.Tbrtrainerid, t.Tbrpartnerid, t.Tbrdatereturned, t.EquinoxPrn, t.EquinoxSec, t.EquinoxLrn)
	return err
}

// Save saves the Tabrtrn to the database.
func (t *Tabrtrn) Save(db XODB) error {
	if t.Exists() {
		return t.Update(db)
	}

	return t.Insert(db)
}

// Upsert performs an upsert for Tabrtrn.
//
// NOTE: PostgreSQL 9.5+ only
func (t *Tabrtrn) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if t._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.tabrtrns (` +
		`tbreventid, tbrtrainerid, tbrpartnerid, tbrdatereturned, equinox_prn, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`tbreventid, tbrtrainerid, tbrpartnerid, tbrdatereturned, equinox_prn, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.tbreventid, EXCLUDED.tbrtrainerid, EXCLUDED.tbrpartnerid, EXCLUDED.tbrdatereturned, EXCLUDED.equinox_prn, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, t.Tbreventid, t.Tbrtrainerid, t.Tbrpartnerid, t.Tbrdatereturned, t.EquinoxPrn, t.EquinoxLrn, t.EquinoxSec)
	_, err = db.Exec(sqlstr, t.Tbreventid, t.Tbrtrainerid, t.Tbrpartnerid, t.Tbrdatereturned, t.EquinoxPrn, t.EquinoxLrn, t.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	t._exists = true

	return nil
}

// Delete deletes the Tabrtrn from the database.
func (t *Tabrtrn) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !t._exists {
		return nil
	}

	// if deleted, bail
	if t._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.tabrtrns WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, t.EquinoxLrn)
	_, err = db.Exec(sqlstr, t.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	t._deleted = true

	return nil
}

// TabrtrnByEquinoxLrn retrieves a row from 'equinox.tabrtrns' as a Tabrtrn.
//
// Generated from index 'tabrtrns_pkey'.
func TabrtrnByEquinoxLrn(db XODB, equinoxLrn int64) (*Tabrtrn, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tbreventid, tbrtrainerid, tbrpartnerid, tbrdatereturned, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.tabrtrns ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	t := Tabrtrn{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&t.Tbreventid, &t.Tbrtrainerid, &t.Tbrpartnerid, &t.Tbrdatereturned, &t.EquinoxPrn, &t.EquinoxLrn, &t.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &t, nil
}
