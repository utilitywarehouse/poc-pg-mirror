// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"

	"github.com/lib/pq"
)

// Gappfile represents a row from 'equinox.gappfile'.
type Gappfile struct {
	Gappfiledate    pq.NullTime    `json:"gappfiledate"`    // gappfiledate
	Gappfilename    sql.NullString `json:"gappfilename"`    // gappfilename
	Gappfileresp    sql.NullString `json:"gappfileresp"`    // gappfileresp
	Gappfilerejcode sql.NullString `json:"gappfilerejcode"` // gappfilerejcode
	Gappnn1         sql.NullInt64  `json:"gappnn1"`         // gappnn1
	EquinoxPrn      sql.NullInt64  `json:"equinox_prn"`     // equinox_prn
	EquinoxLrn      int64          `json:"equinox_lrn"`     // equinox_lrn
	EquinoxSec      sql.NullInt64  `json:"equinox_sec"`     // equinox_sec
}

// GappfileByEquinoxLrn retrieves a row from 'equinox.gappfile' as a Gappfile.
//
// Generated from index 'gappfile_pkey'.
func GappfileByEquinoxLrn(db XODB, equinoxLrn int64) (*Gappfile, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`gappfiledate, gappfilename, gappfileresp, gappfilerejcode, gappnn1, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.gappfile ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	g := Gappfile{}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&g.Gappfiledate, &g.Gappfilename, &g.Gappfileresp, &g.Gappfilerejcode, &g.Gappnn1, &g.EquinoxPrn, &g.EquinoxLrn, &g.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &g, nil
}
