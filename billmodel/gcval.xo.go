// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"

	"github.com/lib/pq"
)

// Gcval represents a row from 'equinox.gcval'.
type Gcval struct {
	Gcvalread        sql.NullFloat64 `json:"gcvalread"`        // gcvalread
	Gcvalreaddate    pq.NullTime     `json:"gcvalreaddate"`    // gcvalreaddate
	Gcvalsource      sql.NullString  `json:"gcvalsource"`      // gcvalsource
	Gcvalreason      sql.NullString  `json:"gcvalreason"`      // gcvalreason
	Gcvaltype        sql.NullString  `json:"gcvaltype"`        // gcvaltype
	Gcvalentereddate pq.NullTime     `json:"gcvalentereddate"` // gcvalentereddate
	Gcvalstatus      sql.NullString  `json:"gcvalstatus"`      // gcvalstatus
	Gcvaldispute     sql.NullInt64   `json:"gcvaldispute"`     // gcvaldispute
	Gcvalcomplete    pq.NullTime     `json:"gcvalcomplete"`    // gcvalcomplete
	Gcmemo           sql.NullInt64   `json:"gcmemo"`           // gcmemo
	Gcvalsiteenddate pq.NullTime     `json:"gcvalsiteenddate"` // gcvalsiteenddate
	Gcregtypec1      sql.NullString  `json:"gcregtypec1"`      // gcregtypec1
	Gcvalsparec2     sql.NullString  `json:"gcvalsparec2"`     // gcvalsparec2
	Gcvalsparec3     sql.NullString  `json:"gcvalsparec3"`     // gcvalsparec3
	Gcvalspared1     pq.NullTime     `json:"gcvalspared1"`     // gcvalspared1
	Gcvalspared2     pq.NullTime     `json:"gcvalspared2"`     // gcvalspared2
	Gcvalspared3     pq.NullTime     `json:"gcvalspared3"`     // gcvalspared3
	Gcvalsparen1     sql.NullFloat64 `json:"gcvalsparen1"`     // gcvalsparen1
	Gcvalsparen2     sql.NullFloat64 `json:"gcvalsparen2"`     // gcvalsparen2
	Gcvalsparen3     sql.NullFloat64 `json:"gcvalsparen3"`     // gcvalsparen3
	EquinoxPrn       sql.NullInt64   `json:"equinox_prn"`      // equinox_prn
	EquinoxLrn       int64           `json:"equinox_lrn"`      // equinox_lrn
	EquinoxSec       sql.NullInt64   `json:"equinox_sec"`      // equinox_sec
}

func AllGcval(db XODB, callback func(x Gcval) bool) error {

	// sql query
	const sqlstr = `SELECT ` +
		`gcvalread, gcvalreaddate, gcvalsource, gcvalreason, gcvaltype, gcvalentereddate, gcvalstatus, gcvaldispute, gcvalcomplete, gcmemo, gcvalsiteenddate, gcregtypec1, gcvalsparec2, gcvalsparec3, gcvalspared1, gcvalspared2, gcvalspared3, gcvalsparen1, gcvalsparen2, gcvalsparen3, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.gcval `

	q, err := db.Query(sqlstr)

	if err != nil {
		return err
	}
	defer q.Close()

	// load results
	for q.Next() {
		g := Gcval{}

		// scan
		err = q.Scan(&g.Gcvalread, &g.Gcvalreaddate, &g.Gcvalsource, &g.Gcvalreason, &g.Gcvaltype, &g.Gcvalentereddate, &g.Gcvalstatus, &g.Gcvaldispute, &g.Gcvalcomplete, &g.Gcmemo, &g.Gcvalsiteenddate, &g.Gcregtypec1, &g.Gcvalsparec2, &g.Gcvalsparec3, &g.Gcvalspared1, &g.Gcvalspared2, &g.Gcvalspared3, &g.Gcvalsparen1, &g.Gcvalsparen2, &g.Gcvalsparen3, &g.EquinoxPrn, &g.EquinoxLrn, &g.EquinoxSec)
		if err != nil {
			return err
		}
		if !callback(g) {
			return nil
		}
	}

	return nil
}

// GcvalByEquinoxLrn retrieves a row from 'equinox.gcval' as a Gcval.
//
// Generated from index 'gcval_pkey'.
func GcvalByEquinoxLrn(db XODB, equinoxLrn int64) (*Gcval, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`gcvalread, gcvalreaddate, gcvalsource, gcvalreason, gcvaltype, gcvalentereddate, gcvalstatus, gcvaldispute, gcvalcomplete, gcmemo, gcvalsiteenddate, gcregtypec1, gcvalsparec2, gcvalsparec3, gcvalspared1, gcvalspared2, gcvalspared3, gcvalsparen1, gcvalsparen2, gcvalsparen3, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.gcval ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	g := Gcval{}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&g.Gcvalread, &g.Gcvalreaddate, &g.Gcvalsource, &g.Gcvalreason, &g.Gcvaltype, &g.Gcvalentereddate, &g.Gcvalstatus, &g.Gcvaldispute, &g.Gcvalcomplete, &g.Gcmemo, &g.Gcvalsiteenddate, &g.Gcregtypec1, &g.Gcvalsparec2, &g.Gcvalsparec3, &g.Gcvalspared1, &g.Gcvalspared2, &g.Gcvalspared3, &g.Gcvalsparen1, &g.Gcvalsparen2, &g.Gcvalsparen3, &g.EquinoxPrn, &g.EquinoxLrn, &g.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &g, nil
}
