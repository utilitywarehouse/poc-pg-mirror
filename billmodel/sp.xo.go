// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// Sp represents a row from 'equinox.sp'.
type Sp struct {
	Spname       sql.NullString `json:"spname"`       // spname
	Spref        sql.NullString `json:"spref"`        // spref
	Spenquirefax sql.NullString `json:"spenquirefax"` // spenquirefax
	Spenquire    sql.NullString `json:"spenquire"`    // spenquire
	Spesccontact sql.NullString `json:"spesccontact"` // spesccontact
	Spesctel     sql.NullString `json:"spesctel"`     // spesctel
	Spescfax     sql.NullString `json:"spescfax"`     // spescfax
	Spescemail   sql.NullString `json:"spescemail"`   // spescemail
	EquinoxLrn   int64          `json:"equinox_lrn"`  // equinox_lrn
	EquinoxSec   sql.NullInt64  `json:"equinox_sec"`  // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Sp exists in the database.
func (s *Sp) Exists() bool {
	return s._exists
}

// Deleted provides information if the Sp has been deleted from the database.
func (s *Sp) Deleted() bool {
	return s._deleted
}

// Insert inserts the Sp to the database.
func (s *Sp) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if s._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.sp (` +
		`spname, spref, spenquirefax, spenquire, spesccontact, spesctel, spescfax, spescemail, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, s.Spname, s.Spref, s.Spenquirefax, s.Spenquire, s.Spesccontact, s.Spesctel, s.Spescfax, s.Spescemail, s.EquinoxSec)
	err = db.QueryRow(sqlstr, s.Spname, s.Spref, s.Spenquirefax, s.Spenquire, s.Spesccontact, s.Spesctel, s.Spescfax, s.Spescemail, s.EquinoxSec).Scan(&s.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	s._exists = true

	return nil
}

// Update updates the Sp in the database.
func (s *Sp) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !s._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if s._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.sp SET (` +
		`spname, spref, spenquirefax, spenquire, spesccontact, spesctel, spescfax, spescemail, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9` +
		`) WHERE equinox_lrn = $10`

	// run query
	XOLog(sqlstr, s.Spname, s.Spref, s.Spenquirefax, s.Spenquire, s.Spesccontact, s.Spesctel, s.Spescfax, s.Spescemail, s.EquinoxSec, s.EquinoxLrn)
	_, err = db.Exec(sqlstr, s.Spname, s.Spref, s.Spenquirefax, s.Spenquire, s.Spesccontact, s.Spesctel, s.Spescfax, s.Spescemail, s.EquinoxSec, s.EquinoxLrn)
	return err
}

// Save saves the Sp to the database.
func (s *Sp) Save(db XODB) error {
	if s.Exists() {
		return s.Update(db)
	}

	return s.Insert(db)
}

// Upsert performs an upsert for Sp.
//
// NOTE: PostgreSQL 9.5+ only
func (s *Sp) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if s._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.sp (` +
		`spname, spref, spenquirefax, spenquire, spesccontact, spesctel, spescfax, spescemail, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`spname, spref, spenquirefax, spenquire, spesccontact, spesctel, spescfax, spescemail, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.spname, EXCLUDED.spref, EXCLUDED.spenquirefax, EXCLUDED.spenquire, EXCLUDED.spesccontact, EXCLUDED.spesctel, EXCLUDED.spescfax, EXCLUDED.spescemail, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, s.Spname, s.Spref, s.Spenquirefax, s.Spenquire, s.Spesccontact, s.Spesctel, s.Spescfax, s.Spescemail, s.EquinoxLrn, s.EquinoxSec)
	_, err = db.Exec(sqlstr, s.Spname, s.Spref, s.Spenquirefax, s.Spenquire, s.Spesccontact, s.Spesctel, s.Spescfax, s.Spescemail, s.EquinoxLrn, s.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	s._exists = true

	return nil
}

// Delete deletes the Sp from the database.
func (s *Sp) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !s._exists {
		return nil
	}

	// if deleted, bail
	if s._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.sp WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, s.EquinoxLrn)
	_, err = db.Exec(sqlstr, s.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	s._deleted = true

	return nil
}

// SpByEquinoxLrn retrieves a row from 'equinox.sp' as a Sp.
//
// Generated from index 'sp_pkey'.
func SpByEquinoxLrn(db XODB, equinoxLrn int64) (*Sp, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`spname, spref, spenquirefax, spenquire, spesccontact, spesctel, spescfax, spescemail, equinox_lrn, equinox_sec ` +
		`FROM equinox.sp ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	s := Sp{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&s.Spname, &s.Spref, &s.Spenquirefax, &s.Spenquire, &s.Spesccontact, &s.Spesctel, &s.Spescfax, &s.Spescemail, &s.EquinoxLrn, &s.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &s, nil
}
