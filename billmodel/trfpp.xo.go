// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// Trfpp represents a row from 'equinox.trfpp'.
type Trfpp struct {
	Trfpptype       sql.NullString `json:"trfpptype"`       // trfpptype
	Trfppregion     sql.NullInt64  `json:"trfppregion"`     // trfppregion
	Trfppsupplier   sql.NullInt64  `json:"trfppsupplier"`   // trfppsupplier
	Trfppcharge     sql.NullString `json:"trfppcharge"`     // trfppcharge
	Trfppprofileave sql.NullString `json:"trfppprofileave"` // trfppprofileave
	Trfppsuppname   sql.NullString `json:"trfppsuppname"`   // trfppsuppname
	EquinoxLrn      int64          `json:"equinox_lrn"`     // equinox_lrn
	EquinoxSec      sql.NullInt64  `json:"equinox_sec"`     // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Trfpp exists in the database.
func (t *Trfpp) Exists() bool {
	return t._exists
}

// Deleted provides information if the Trfpp has been deleted from the database.
func (t *Trfpp) Deleted() bool {
	return t._deleted
}

// Insert inserts the Trfpp to the database.
func (t *Trfpp) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if t._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.trfpp (` +
		`trfpptype, trfppregion, trfppsupplier, trfppcharge, trfppprofileave, trfppsuppname, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, t.Trfpptype, t.Trfppregion, t.Trfppsupplier, t.Trfppcharge, t.Trfppprofileave, t.Trfppsuppname, t.EquinoxSec)
	err = db.QueryRow(sqlstr, t.Trfpptype, t.Trfppregion, t.Trfppsupplier, t.Trfppcharge, t.Trfppprofileave, t.Trfppsuppname, t.EquinoxSec).Scan(&t.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	t._exists = true

	return nil
}

// Update updates the Trfpp in the database.
func (t *Trfpp) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !t._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if t._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.trfpp SET (` +
		`trfpptype, trfppregion, trfppsupplier, trfppcharge, trfppprofileave, trfppsuppname, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`) WHERE equinox_lrn = $8`

	// run query
	XOLog(sqlstr, t.Trfpptype, t.Trfppregion, t.Trfppsupplier, t.Trfppcharge, t.Trfppprofileave, t.Trfppsuppname, t.EquinoxSec, t.EquinoxLrn)
	_, err = db.Exec(sqlstr, t.Trfpptype, t.Trfppregion, t.Trfppsupplier, t.Trfppcharge, t.Trfppprofileave, t.Trfppsuppname, t.EquinoxSec, t.EquinoxLrn)
	return err
}

// Save saves the Trfpp to the database.
func (t *Trfpp) Save(db XODB) error {
	if t.Exists() {
		return t.Update(db)
	}

	return t.Insert(db)
}

// Upsert performs an upsert for Trfpp.
//
// NOTE: PostgreSQL 9.5+ only
func (t *Trfpp) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if t._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.trfpp (` +
		`trfpptype, trfppregion, trfppsupplier, trfppcharge, trfppprofileave, trfppsuppname, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`trfpptype, trfppregion, trfppsupplier, trfppcharge, trfppprofileave, trfppsuppname, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.trfpptype, EXCLUDED.trfppregion, EXCLUDED.trfppsupplier, EXCLUDED.trfppcharge, EXCLUDED.trfppprofileave, EXCLUDED.trfppsuppname, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, t.Trfpptype, t.Trfppregion, t.Trfppsupplier, t.Trfppcharge, t.Trfppprofileave, t.Trfppsuppname, t.EquinoxLrn, t.EquinoxSec)
	_, err = db.Exec(sqlstr, t.Trfpptype, t.Trfppregion, t.Trfppsupplier, t.Trfppcharge, t.Trfppprofileave, t.Trfppsuppname, t.EquinoxLrn, t.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	t._exists = true

	return nil
}

// Delete deletes the Trfpp from the database.
func (t *Trfpp) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !t._exists {
		return nil
	}

	// if deleted, bail
	if t._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.trfpp WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, t.EquinoxLrn)
	_, err = db.Exec(sqlstr, t.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	t._deleted = true

	return nil
}

// TrfppByEquinoxLrn retrieves a row from 'equinox.trfpp' as a Trfpp.
//
// Generated from index 'trfpp_pkey'.
func TrfppByEquinoxLrn(db XODB, equinoxLrn int64) (*Trfpp, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`trfpptype, trfppregion, trfppsupplier, trfppcharge, trfppprofileave, trfppsuppname, equinox_lrn, equinox_sec ` +
		`FROM equinox.trfpp ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	t := Trfpp{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&t.Trfpptype, &t.Trfppregion, &t.Trfppsupplier, &t.Trfppcharge, &t.Trfppprofileave, &t.Trfppsuppname, &t.EquinoxLrn, &t.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &t, nil
}
