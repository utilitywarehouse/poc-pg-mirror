// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/lib/pq"
)

// Cnxmy8 represents a row from 'equinox.cnxmy8'.
type Cnxmy8 struct {
	Cnxmy8cli        sql.NullString  `json:"cnxmy8cli"`        // cnxmy8cli
	Cnxmy8termcli    sql.NullString  `json:"cnxmy8termcli"`    // cnxmy8termcli
	Cnxmy8datetorsl  pq.NullTime     `json:"cnxmy8datetorsl"`  // cnxmy8datetorsl
	Cnxmy8datefrmrsl pq.NullTime     `json:"cnxmy8datefrmrsl"` // cnxmy8datefrmrsl
	Cnxmy8billopt    sql.NullString  `json:"cnxmy8billopt"`    // cnxmy8billopt
	Cnxmy8dateentere pq.NullTime     `json:"cnxmy8dateentere"` // cnxmy8dateentere
	Cnxmy8weborder   sql.NullInt64   `json:"cnxmy8weborder"`   // cnxmy8weborder
	Cnxmy8datetobill pq.NullTime     `json:"cnxmy8datetobill"` // cnxmy8datetobill
	Cnxmy8dateletter pq.NullTime     `json:"cnxmy8dateletter"` // cnxmy8dateletter
	Cnxmy8enteredby  sql.NullString  `json:"cnxmy8enteredby"`  // cnxmy8enteredby
	Cnxmy8servicelvl sql.NullString  `json:"cnxmy8servicelvl"` // cnxmy8servicelvl
	Cnxmy8dateprepay pq.NullTime     `json:"cnxmy8dateprepay"` // cnxmy8dateprepay
	Cnxmy8promocode  sql.NullString  `json:"cnxmy8promocode"`  // cnxmy8promocode
	Cnxmy8subtariff  sql.NullString  `json:"cnxmy8subtariff"`  // cnxmy8subtariff
	Cnxmy8linerental sql.NullString  `json:"cnxmy8linerental"` // cnxmy8linerental
	Cnxmy8setup      sql.NullString  `json:"cnxmy8setup"`      // cnxmy8setup
	Cnxmy8ordtype    sql.NullString  `json:"cnxmy8ordtype"`    // cnxmy8ordtype
	Cnxmy8tariff     sql.NullString  `json:"cnxmy8tariff"`     // cnxmy8tariff
	Cnxmy8sparec2    sql.NullString  `json:"cnxmy8sparec2"`    // cnxmy8sparec2
	Cnxmy8sparec3    sql.NullString  `json:"cnxmy8sparec3"`    // cnxmy8sparec3
	Cnxmy8sparen1    sql.NullFloat64 `json:"cnxmy8sparen1"`    // cnxmy8sparen1
	Cnxmy8sparen2    sql.NullFloat64 `json:"cnxmy8sparen2"`    // cnxmy8sparen2
	Cnxmy8sparen3    sql.NullFloat64 `json:"cnxmy8sparen3"`    // cnxmy8sparen3
	Cnxmy8csigndate  pq.NullTime     `json:"cnxmy8csigndate"`  // cnxmy8csigndate
	Cnxmy8spared2    pq.NullTime     `json:"cnxmy8spared2"`    // cnxmy8spared2
	Cnxmy8spared3    pq.NullTime     `json:"cnxmy8spared3"`    // cnxmy8spared3
	Cnxmy8sparec4    sql.NullString  `json:"cnxmy8sparec4"`    // cnxmy8sparec4
	Cnxmy8donoracc   sql.NullString  `json:"cnxmy8donoracc"`   // cnxmy8donoracc
	Cnxmy8doncliuni  sql.NullInt64   `json:"cnxmy8doncliuni"`  // cnxmy8doncliuni
	Cnxmy8holduntil  pq.NullTime     `json:"cnxmy8holduntil"`  // cnxmy8holduntil
	Cnxmy8hmdate     pq.NullTime     `json:"cnxmy8hmdate"`     // cnxmy8hmdate
	Cnxmy8addserv    sql.NullInt64   `json:"cnxmy8addserv"`    // cnxmy8addserv
	Cnxmy8validdate  pq.NullTime     `json:"cnxmy8validdate"`  // cnxmy8validdate
	Cnxmy8validby    sql.NullString  `json:"cnxmy8validby"`    // cnxmy8validby
	EquinoxPrn       sql.NullInt64   `json:"equinox_prn"`      // equinox_prn
	EquinoxLrn       int64           `json:"equinox_lrn"`      // equinox_lrn
	EquinoxSec       sql.NullInt64   `json:"equinox_sec"`      // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Cnxmy8 exists in the database.
func (c *Cnxmy8) Exists() bool {
	return c._exists
}

// Deleted provides information if the Cnxmy8 has been deleted from the database.
func (c *Cnxmy8) Deleted() bool {
	return c._deleted
}

// Insert inserts the Cnxmy8 to the database.
func (c *Cnxmy8) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.cnxmy8 (` +
		`cnxmy8cli, cnxmy8termcli, cnxmy8datetorsl, cnxmy8datefrmrsl, cnxmy8billopt, cnxmy8dateentere, cnxmy8weborder, cnxmy8datetobill, cnxmy8dateletter, cnxmy8enteredby, cnxmy8servicelvl, cnxmy8dateprepay, cnxmy8promocode, cnxmy8subtariff, cnxmy8linerental, cnxmy8setup, cnxmy8ordtype, cnxmy8tariff, cnxmy8sparec2, cnxmy8sparec3, cnxmy8sparen1, cnxmy8sparen2, cnxmy8sparen3, cnxmy8csigndate, cnxmy8spared2, cnxmy8spared3, cnxmy8sparec4, cnxmy8donoracc, cnxmy8doncliuni, cnxmy8holduntil, cnxmy8hmdate, cnxmy8addserv, cnxmy8validdate, cnxmy8validby, equinox_prn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, c.Cnxmy8cli, c.Cnxmy8termcli, c.Cnxmy8datetorsl, c.Cnxmy8datefrmrsl, c.Cnxmy8billopt, c.Cnxmy8dateentere, c.Cnxmy8weborder, c.Cnxmy8datetobill, c.Cnxmy8dateletter, c.Cnxmy8enteredby, c.Cnxmy8servicelvl, c.Cnxmy8dateprepay, c.Cnxmy8promocode, c.Cnxmy8subtariff, c.Cnxmy8linerental, c.Cnxmy8setup, c.Cnxmy8ordtype, c.Cnxmy8tariff, c.Cnxmy8sparec2, c.Cnxmy8sparec3, c.Cnxmy8sparen1, c.Cnxmy8sparen2, c.Cnxmy8sparen3, c.Cnxmy8csigndate, c.Cnxmy8spared2, c.Cnxmy8spared3, c.Cnxmy8sparec4, c.Cnxmy8donoracc, c.Cnxmy8doncliuni, c.Cnxmy8holduntil, c.Cnxmy8hmdate, c.Cnxmy8addserv, c.Cnxmy8validdate, c.Cnxmy8validby, c.EquinoxPrn, c.EquinoxSec)
	err = db.QueryRow(sqlstr, c.Cnxmy8cli, c.Cnxmy8termcli, c.Cnxmy8datetorsl, c.Cnxmy8datefrmrsl, c.Cnxmy8billopt, c.Cnxmy8dateentere, c.Cnxmy8weborder, c.Cnxmy8datetobill, c.Cnxmy8dateletter, c.Cnxmy8enteredby, c.Cnxmy8servicelvl, c.Cnxmy8dateprepay, c.Cnxmy8promocode, c.Cnxmy8subtariff, c.Cnxmy8linerental, c.Cnxmy8setup, c.Cnxmy8ordtype, c.Cnxmy8tariff, c.Cnxmy8sparec2, c.Cnxmy8sparec3, c.Cnxmy8sparen1, c.Cnxmy8sparen2, c.Cnxmy8sparen3, c.Cnxmy8csigndate, c.Cnxmy8spared2, c.Cnxmy8spared3, c.Cnxmy8sparec4, c.Cnxmy8donoracc, c.Cnxmy8doncliuni, c.Cnxmy8holduntil, c.Cnxmy8hmdate, c.Cnxmy8addserv, c.Cnxmy8validdate, c.Cnxmy8validby, c.EquinoxPrn, c.EquinoxSec).Scan(&c.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Update updates the Cnxmy8 in the database.
func (c *Cnxmy8) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if c._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.cnxmy8 SET (` +
		`cnxmy8cli, cnxmy8termcli, cnxmy8datetorsl, cnxmy8datefrmrsl, cnxmy8billopt, cnxmy8dateentere, cnxmy8weborder, cnxmy8datetobill, cnxmy8dateletter, cnxmy8enteredby, cnxmy8servicelvl, cnxmy8dateprepay, cnxmy8promocode, cnxmy8subtariff, cnxmy8linerental, cnxmy8setup, cnxmy8ordtype, cnxmy8tariff, cnxmy8sparec2, cnxmy8sparec3, cnxmy8sparen1, cnxmy8sparen2, cnxmy8sparen3, cnxmy8csigndate, cnxmy8spared2, cnxmy8spared3, cnxmy8sparec4, cnxmy8donoracc, cnxmy8doncliuni, cnxmy8holduntil, cnxmy8hmdate, cnxmy8addserv, cnxmy8validdate, cnxmy8validby, equinox_prn, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36` +
		`) WHERE equinox_lrn = $37`

	// run query
	XOLog(sqlstr, c.Cnxmy8cli, c.Cnxmy8termcli, c.Cnxmy8datetorsl, c.Cnxmy8datefrmrsl, c.Cnxmy8billopt, c.Cnxmy8dateentere, c.Cnxmy8weborder, c.Cnxmy8datetobill, c.Cnxmy8dateletter, c.Cnxmy8enteredby, c.Cnxmy8servicelvl, c.Cnxmy8dateprepay, c.Cnxmy8promocode, c.Cnxmy8subtariff, c.Cnxmy8linerental, c.Cnxmy8setup, c.Cnxmy8ordtype, c.Cnxmy8tariff, c.Cnxmy8sparec2, c.Cnxmy8sparec3, c.Cnxmy8sparen1, c.Cnxmy8sparen2, c.Cnxmy8sparen3, c.Cnxmy8csigndate, c.Cnxmy8spared2, c.Cnxmy8spared3, c.Cnxmy8sparec4, c.Cnxmy8donoracc, c.Cnxmy8doncliuni, c.Cnxmy8holduntil, c.Cnxmy8hmdate, c.Cnxmy8addserv, c.Cnxmy8validdate, c.Cnxmy8validby, c.EquinoxPrn, c.EquinoxSec, c.EquinoxLrn)
	_, err = db.Exec(sqlstr, c.Cnxmy8cli, c.Cnxmy8termcli, c.Cnxmy8datetorsl, c.Cnxmy8datefrmrsl, c.Cnxmy8billopt, c.Cnxmy8dateentere, c.Cnxmy8weborder, c.Cnxmy8datetobill, c.Cnxmy8dateletter, c.Cnxmy8enteredby, c.Cnxmy8servicelvl, c.Cnxmy8dateprepay, c.Cnxmy8promocode, c.Cnxmy8subtariff, c.Cnxmy8linerental, c.Cnxmy8setup, c.Cnxmy8ordtype, c.Cnxmy8tariff, c.Cnxmy8sparec2, c.Cnxmy8sparec3, c.Cnxmy8sparen1, c.Cnxmy8sparen2, c.Cnxmy8sparen3, c.Cnxmy8csigndate, c.Cnxmy8spared2, c.Cnxmy8spared3, c.Cnxmy8sparec4, c.Cnxmy8donoracc, c.Cnxmy8doncliuni, c.Cnxmy8holduntil, c.Cnxmy8hmdate, c.Cnxmy8addserv, c.Cnxmy8validdate, c.Cnxmy8validby, c.EquinoxPrn, c.EquinoxSec, c.EquinoxLrn)
	return err
}

// Save saves the Cnxmy8 to the database.
func (c *Cnxmy8) Save(db XODB) error {
	if c.Exists() {
		return c.Update(db)
	}

	return c.Insert(db)
}

// Upsert performs an upsert for Cnxmy8.
//
// NOTE: PostgreSQL 9.5+ only
func (c *Cnxmy8) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.cnxmy8 (` +
		`cnxmy8cli, cnxmy8termcli, cnxmy8datetorsl, cnxmy8datefrmrsl, cnxmy8billopt, cnxmy8dateentere, cnxmy8weborder, cnxmy8datetobill, cnxmy8dateletter, cnxmy8enteredby, cnxmy8servicelvl, cnxmy8dateprepay, cnxmy8promocode, cnxmy8subtariff, cnxmy8linerental, cnxmy8setup, cnxmy8ordtype, cnxmy8tariff, cnxmy8sparec2, cnxmy8sparec3, cnxmy8sparen1, cnxmy8sparen2, cnxmy8sparen3, cnxmy8csigndate, cnxmy8spared2, cnxmy8spared3, cnxmy8sparec4, cnxmy8donoracc, cnxmy8doncliuni, cnxmy8holduntil, cnxmy8hmdate, cnxmy8addserv, cnxmy8validdate, cnxmy8validby, equinox_prn, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`cnxmy8cli, cnxmy8termcli, cnxmy8datetorsl, cnxmy8datefrmrsl, cnxmy8billopt, cnxmy8dateentere, cnxmy8weborder, cnxmy8datetobill, cnxmy8dateletter, cnxmy8enteredby, cnxmy8servicelvl, cnxmy8dateprepay, cnxmy8promocode, cnxmy8subtariff, cnxmy8linerental, cnxmy8setup, cnxmy8ordtype, cnxmy8tariff, cnxmy8sparec2, cnxmy8sparec3, cnxmy8sparen1, cnxmy8sparen2, cnxmy8sparen3, cnxmy8csigndate, cnxmy8spared2, cnxmy8spared3, cnxmy8sparec4, cnxmy8donoracc, cnxmy8doncliuni, cnxmy8holduntil, cnxmy8hmdate, cnxmy8addserv, cnxmy8validdate, cnxmy8validby, equinox_prn, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.cnxmy8cli, EXCLUDED.cnxmy8termcli, EXCLUDED.cnxmy8datetorsl, EXCLUDED.cnxmy8datefrmrsl, EXCLUDED.cnxmy8billopt, EXCLUDED.cnxmy8dateentere, EXCLUDED.cnxmy8weborder, EXCLUDED.cnxmy8datetobill, EXCLUDED.cnxmy8dateletter, EXCLUDED.cnxmy8enteredby, EXCLUDED.cnxmy8servicelvl, EXCLUDED.cnxmy8dateprepay, EXCLUDED.cnxmy8promocode, EXCLUDED.cnxmy8subtariff, EXCLUDED.cnxmy8linerental, EXCLUDED.cnxmy8setup, EXCLUDED.cnxmy8ordtype, EXCLUDED.cnxmy8tariff, EXCLUDED.cnxmy8sparec2, EXCLUDED.cnxmy8sparec3, EXCLUDED.cnxmy8sparen1, EXCLUDED.cnxmy8sparen2, EXCLUDED.cnxmy8sparen3, EXCLUDED.cnxmy8csigndate, EXCLUDED.cnxmy8spared2, EXCLUDED.cnxmy8spared3, EXCLUDED.cnxmy8sparec4, EXCLUDED.cnxmy8donoracc, EXCLUDED.cnxmy8doncliuni, EXCLUDED.cnxmy8holduntil, EXCLUDED.cnxmy8hmdate, EXCLUDED.cnxmy8addserv, EXCLUDED.cnxmy8validdate, EXCLUDED.cnxmy8validby, EXCLUDED.equinox_prn, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, c.Cnxmy8cli, c.Cnxmy8termcli, c.Cnxmy8datetorsl, c.Cnxmy8datefrmrsl, c.Cnxmy8billopt, c.Cnxmy8dateentere, c.Cnxmy8weborder, c.Cnxmy8datetobill, c.Cnxmy8dateletter, c.Cnxmy8enteredby, c.Cnxmy8servicelvl, c.Cnxmy8dateprepay, c.Cnxmy8promocode, c.Cnxmy8subtariff, c.Cnxmy8linerental, c.Cnxmy8setup, c.Cnxmy8ordtype, c.Cnxmy8tariff, c.Cnxmy8sparec2, c.Cnxmy8sparec3, c.Cnxmy8sparen1, c.Cnxmy8sparen2, c.Cnxmy8sparen3, c.Cnxmy8csigndate, c.Cnxmy8spared2, c.Cnxmy8spared3, c.Cnxmy8sparec4, c.Cnxmy8donoracc, c.Cnxmy8doncliuni, c.Cnxmy8holduntil, c.Cnxmy8hmdate, c.Cnxmy8addserv, c.Cnxmy8validdate, c.Cnxmy8validby, c.EquinoxPrn, c.EquinoxLrn, c.EquinoxSec)
	_, err = db.Exec(sqlstr, c.Cnxmy8cli, c.Cnxmy8termcli, c.Cnxmy8datetorsl, c.Cnxmy8datefrmrsl, c.Cnxmy8billopt, c.Cnxmy8dateentere, c.Cnxmy8weborder, c.Cnxmy8datetobill, c.Cnxmy8dateletter, c.Cnxmy8enteredby, c.Cnxmy8servicelvl, c.Cnxmy8dateprepay, c.Cnxmy8promocode, c.Cnxmy8subtariff, c.Cnxmy8linerental, c.Cnxmy8setup, c.Cnxmy8ordtype, c.Cnxmy8tariff, c.Cnxmy8sparec2, c.Cnxmy8sparec3, c.Cnxmy8sparen1, c.Cnxmy8sparen2, c.Cnxmy8sparen3, c.Cnxmy8csigndate, c.Cnxmy8spared2, c.Cnxmy8spared3, c.Cnxmy8sparec4, c.Cnxmy8donoracc, c.Cnxmy8doncliuni, c.Cnxmy8holduntil, c.Cnxmy8hmdate, c.Cnxmy8addserv, c.Cnxmy8validdate, c.Cnxmy8validby, c.EquinoxPrn, c.EquinoxLrn, c.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Delete deletes the Cnxmy8 from the database.
func (c *Cnxmy8) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return nil
	}

	// if deleted, bail
	if c._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.cnxmy8 WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, c.EquinoxLrn)
	_, err = db.Exec(sqlstr, c.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	c._deleted = true

	return nil
}

// Cnxmy8ByEquinoxLrn retrieves a row from 'equinox.cnxmy8' as a Cnxmy8.
//
// Generated from index 'cnxmy8_pkey'.
func Cnxmy8ByEquinoxLrn(db XODB, equinoxLrn int64) (*Cnxmy8, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`cnxmy8cli, cnxmy8termcli, cnxmy8datetorsl, cnxmy8datefrmrsl, cnxmy8billopt, cnxmy8dateentere, cnxmy8weborder, cnxmy8datetobill, cnxmy8dateletter, cnxmy8enteredby, cnxmy8servicelvl, cnxmy8dateprepay, cnxmy8promocode, cnxmy8subtariff, cnxmy8linerental, cnxmy8setup, cnxmy8ordtype, cnxmy8tariff, cnxmy8sparec2, cnxmy8sparec3, cnxmy8sparen1, cnxmy8sparen2, cnxmy8sparen3, cnxmy8csigndate, cnxmy8spared2, cnxmy8spared3, cnxmy8sparec4, cnxmy8donoracc, cnxmy8doncliuni, cnxmy8holduntil, cnxmy8hmdate, cnxmy8addserv, cnxmy8validdate, cnxmy8validby, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.cnxmy8 ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	c := Cnxmy8{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&c.Cnxmy8cli, &c.Cnxmy8termcli, &c.Cnxmy8datetorsl, &c.Cnxmy8datefrmrsl, &c.Cnxmy8billopt, &c.Cnxmy8dateentere, &c.Cnxmy8weborder, &c.Cnxmy8datetobill, &c.Cnxmy8dateletter, &c.Cnxmy8enteredby, &c.Cnxmy8servicelvl, &c.Cnxmy8dateprepay, &c.Cnxmy8promocode, &c.Cnxmy8subtariff, &c.Cnxmy8linerental, &c.Cnxmy8setup, &c.Cnxmy8ordtype, &c.Cnxmy8tariff, &c.Cnxmy8sparec2, &c.Cnxmy8sparec3, &c.Cnxmy8sparen1, &c.Cnxmy8sparen2, &c.Cnxmy8sparen3, &c.Cnxmy8csigndate, &c.Cnxmy8spared2, &c.Cnxmy8spared3, &c.Cnxmy8sparec4, &c.Cnxmy8donoracc, &c.Cnxmy8doncliuni, &c.Cnxmy8holduntil, &c.Cnxmy8hmdate, &c.Cnxmy8addserv, &c.Cnxmy8validdate, &c.Cnxmy8validby, &c.EquinoxPrn, &c.EquinoxLrn, &c.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &c, nil
}
