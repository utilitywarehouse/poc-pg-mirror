// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// Crcode represents a row from 'equinox.crcodes'.
type Crcode struct {
	Crccodeid       sql.NullInt64   `json:"crccodeid"`       // crccodeid
	Crccode         sql.NullString  `json:"crccode"`         // crccode
	Crcsetdispflags sql.NullString  `json:"crcsetdispflags"` // crcsetdispflags
	Crcdisplay1     sql.NullString  `json:"crcdisplay1"`     // crcdisplay1
	Crcdisplay2     sql.NullString  `json:"crcdisplay2"`     // crcdisplay2
	Crcdisplay3     sql.NullString  `json:"crcdisplay3"`     // crcdisplay3
	Crcdisplay4     sql.NullString  `json:"crcdisplay4"`     // crcdisplay4
	Crcount         sql.NullInt64   `json:"crcount"`         // crcount
	Crtotal1        sql.NullFloat64 `json:"crtotal1"`        // crtotal1
	Crtotal2        sql.NullFloat64 `json:"crtotal2"`        // crtotal2
	Crcsparenum1    sql.NullFloat64 `json:"crcsparenum1"`    // crcsparenum1
	Crcsparenum2    sql.NullFloat64 `json:"crcsparenum2"`    // crcsparenum2
	Crcsparec1      sql.NullString  `json:"crcsparec1"`      // crcsparec1
	Crcsparec2      sql.NullString  `json:"crcsparec2"`      // crcsparec2
	EquinoxPrn      sql.NullInt64   `json:"equinox_prn"`     // equinox_prn
	EquinoxLrn      int64           `json:"equinox_lrn"`     // equinox_lrn
	EquinoxSec      sql.NullInt64   `json:"equinox_sec"`     // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Crcode exists in the database.
func (c *Crcode) Exists() bool {
	return c._exists
}

// Deleted provides information if the Crcode has been deleted from the database.
func (c *Crcode) Deleted() bool {
	return c._deleted
}

// Insert inserts the Crcode to the database.
func (c *Crcode) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.crcodes (` +
		`crccodeid, crccode, crcsetdispflags, crcdisplay1, crcdisplay2, crcdisplay3, crcdisplay4, crcount, crtotal1, crtotal2, crcsparenum1, crcsparenum2, crcsparec1, crcsparec2, equinox_prn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, c.Crccodeid, c.Crccode, c.Crcsetdispflags, c.Crcdisplay1, c.Crcdisplay2, c.Crcdisplay3, c.Crcdisplay4, c.Crcount, c.Crtotal1, c.Crtotal2, c.Crcsparenum1, c.Crcsparenum2, c.Crcsparec1, c.Crcsparec2, c.EquinoxPrn, c.EquinoxSec)
	err = db.QueryRow(sqlstr, c.Crccodeid, c.Crccode, c.Crcsetdispflags, c.Crcdisplay1, c.Crcdisplay2, c.Crcdisplay3, c.Crcdisplay4, c.Crcount, c.Crtotal1, c.Crtotal2, c.Crcsparenum1, c.Crcsparenum2, c.Crcsparec1, c.Crcsparec2, c.EquinoxPrn, c.EquinoxSec).Scan(&c.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Update updates the Crcode in the database.
func (c *Crcode) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if c._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.crcodes SET (` +
		`crccodeid, crccode, crcsetdispflags, crcdisplay1, crcdisplay2, crcdisplay3, crcdisplay4, crcount, crtotal1, crtotal2, crcsparenum1, crcsparenum2, crcsparec1, crcsparec2, equinox_prn, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16` +
		`) WHERE equinox_lrn = $17`

	// run query
	XOLog(sqlstr, c.Crccodeid, c.Crccode, c.Crcsetdispflags, c.Crcdisplay1, c.Crcdisplay2, c.Crcdisplay3, c.Crcdisplay4, c.Crcount, c.Crtotal1, c.Crtotal2, c.Crcsparenum1, c.Crcsparenum2, c.Crcsparec1, c.Crcsparec2, c.EquinoxPrn, c.EquinoxSec, c.EquinoxLrn)
	_, err = db.Exec(sqlstr, c.Crccodeid, c.Crccode, c.Crcsetdispflags, c.Crcdisplay1, c.Crcdisplay2, c.Crcdisplay3, c.Crcdisplay4, c.Crcount, c.Crtotal1, c.Crtotal2, c.Crcsparenum1, c.Crcsparenum2, c.Crcsparec1, c.Crcsparec2, c.EquinoxPrn, c.EquinoxSec, c.EquinoxLrn)
	return err
}

// Save saves the Crcode to the database.
func (c *Crcode) Save(db XODB) error {
	if c.Exists() {
		return c.Update(db)
	}

	return c.Insert(db)
}

// Upsert performs an upsert for Crcode.
//
// NOTE: PostgreSQL 9.5+ only
func (c *Crcode) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.crcodes (` +
		`crccodeid, crccode, crcsetdispflags, crcdisplay1, crcdisplay2, crcdisplay3, crcdisplay4, crcount, crtotal1, crtotal2, crcsparenum1, crcsparenum2, crcsparec1, crcsparec2, equinox_prn, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`crccodeid, crccode, crcsetdispflags, crcdisplay1, crcdisplay2, crcdisplay3, crcdisplay4, crcount, crtotal1, crtotal2, crcsparenum1, crcsparenum2, crcsparec1, crcsparec2, equinox_prn, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.crccodeid, EXCLUDED.crccode, EXCLUDED.crcsetdispflags, EXCLUDED.crcdisplay1, EXCLUDED.crcdisplay2, EXCLUDED.crcdisplay3, EXCLUDED.crcdisplay4, EXCLUDED.crcount, EXCLUDED.crtotal1, EXCLUDED.crtotal2, EXCLUDED.crcsparenum1, EXCLUDED.crcsparenum2, EXCLUDED.crcsparec1, EXCLUDED.crcsparec2, EXCLUDED.equinox_prn, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, c.Crccodeid, c.Crccode, c.Crcsetdispflags, c.Crcdisplay1, c.Crcdisplay2, c.Crcdisplay3, c.Crcdisplay4, c.Crcount, c.Crtotal1, c.Crtotal2, c.Crcsparenum1, c.Crcsparenum2, c.Crcsparec1, c.Crcsparec2, c.EquinoxPrn, c.EquinoxLrn, c.EquinoxSec)
	_, err = db.Exec(sqlstr, c.Crccodeid, c.Crccode, c.Crcsetdispflags, c.Crcdisplay1, c.Crcdisplay2, c.Crcdisplay3, c.Crcdisplay4, c.Crcount, c.Crtotal1, c.Crtotal2, c.Crcsparenum1, c.Crcsparenum2, c.Crcsparec1, c.Crcsparec2, c.EquinoxPrn, c.EquinoxLrn, c.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Delete deletes the Crcode from the database.
func (c *Crcode) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return nil
	}

	// if deleted, bail
	if c._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.crcodes WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, c.EquinoxLrn)
	_, err = db.Exec(sqlstr, c.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	c._deleted = true

	return nil
}

// CrcodeByEquinoxLrn retrieves a row from 'equinox.crcodes' as a Crcode.
//
// Generated from index 'crcodes_pkey'.
func CrcodeByEquinoxLrn(db XODB, equinoxLrn int64) (*Crcode, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`crccodeid, crccode, crcsetdispflags, crcdisplay1, crcdisplay2, crcdisplay3, crcdisplay4, crcount, crtotal1, crtotal2, crcsparenum1, crcsparenum2, crcsparec1, crcsparec2, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.crcodes ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	c := Crcode{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&c.Crccodeid, &c.Crccode, &c.Crcsetdispflags, &c.Crcdisplay1, &c.Crcdisplay2, &c.Crcdisplay3, &c.Crcdisplay4, &c.Crcount, &c.Crtotal1, &c.Crtotal2, &c.Crcsparenum1, &c.Crcsparenum2, &c.Crcsparec1, &c.Crcsparec2, &c.EquinoxPrn, &c.EquinoxLrn, &c.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &c, nil
}
