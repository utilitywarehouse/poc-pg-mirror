// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import "database/sql"

// Acluser represents a row from 'equinox.aclusers'.
type Acluser struct {
	Acluuserid  sql.NullString `json:"acluuserid"`  // acluuserid
	Acluoptions sql.NullString `json:"acluoptions"` // acluoptions
	Aclusparec1 sql.NullString `json:"aclusparec1"` // aclusparec1
	Aclusparec2 sql.NullString `json:"aclusparec2"` // aclusparec2
	EquinoxPrn  sql.NullInt64  `json:"equinox_prn"` // equinox_prn
	EquinoxLrn  int64          `json:"equinox_lrn"` // equinox_lrn
	EquinoxSec  sql.NullInt64  `json:"equinox_sec"` // equinox_sec
}

func AllAcluser(db XODB, callback func(x Acluser) bool) error {

	// sql query
	const sqlstr = `SELECT ` +
		`acluuserid, acluoptions, aclusparec1, aclusparec2, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.aclusers `

	q, err := db.Query(sqlstr)

	if err != nil {
		return err
	}
	defer q.Close()

	// load results
	for q.Next() {
		a := Acluser{}

		// scan
		err = q.Scan(&a.Acluuserid, &a.Acluoptions, &a.Aclusparec1, &a.Aclusparec2, &a.EquinoxPrn, &a.EquinoxLrn, &a.EquinoxSec)
		if err != nil {
			return err
		}
		if !callback(a) {
			return nil
		}
	}

	return nil
}

// AcluserByEquinoxLrn retrieves a row from 'equinox.aclusers' as a Acluser.
//
// Generated from index 'aclusers_pkey'.
func AcluserByEquinoxLrn(db XODB, equinoxLrn int64) (*Acluser, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`acluuserid, acluoptions, aclusparec1, aclusparec2, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.aclusers ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	a := Acluser{}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&a.Acluuserid, &a.Acluoptions, &a.Aclusparec1, &a.Aclusparec2, &a.EquinoxPrn, &a.EquinoxLrn, &a.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &a, nil
}
