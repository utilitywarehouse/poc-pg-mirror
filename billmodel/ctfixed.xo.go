// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// Ctfixed represents a row from 'equinox.ctfixed'.
type Ctfixed struct {
	Ctfixeduser      sql.NullString  `json:"ctfixeduser"`      // ctfixeduser
	Ctfixedscgd      sql.NullFloat64 `json:"ctfixedscgd"`      // ctfixedscgd
	Ctfixedgdrate    sql.NullFloat64 `json:"ctfixedgdrate"`    // ctfixedgdrate
	Ctfixedsce7      sql.NullFloat64 `json:"ctfixedsce7"`      // ctfixedsce7
	Ctfixede7r1      sql.NullFloat64 `json:"ctfixede7r1"`      // ctfixede7r1
	Ctfixede7r2      sql.NullFloat64 `json:"ctfixede7r2"`      // ctfixede7r2
	Ctfixedscgas     sql.NullFloat64 `json:"ctfixedscgas"`     // ctfixedscgas
	Ctfixedgasrate   sql.NullFloat64 `json:"ctfixedgasrate"`   // ctfixedgasrate
	Ctfixedannualg   sql.NullFloat64 `json:"ctfixedannualg"`   // ctfixedannualg
	Ctfixedannuale   sql.NullFloat64 `json:"ctfixedannuale"`   // ctfixedannuale
	Ctfixedannuald   sql.NullFloat64 `json:"ctfixedannuald"`   // ctfixedannuald
	Ctfixedannualde7 sql.NullFloat64 `json:"ctfixedannualde7"` // ctfixedannualde7
	Ctfixedn1        sql.NullFloat64 `json:"ctfixedn1"`        // ctfixedn1
	EquinoxPrn       sql.NullInt64   `json:"equinox_prn"`      // equinox_prn
	EquinoxLrn       int64           `json:"equinox_lrn"`      // equinox_lrn
	EquinoxSec       sql.NullInt64   `json:"equinox_sec"`      // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Ctfixed exists in the database.
func (c *Ctfixed) Exists() bool {
	return c._exists
}

// Deleted provides information if the Ctfixed has been deleted from the database.
func (c *Ctfixed) Deleted() bool {
	return c._deleted
}

// Insert inserts the Ctfixed to the database.
func (c *Ctfixed) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.ctfixed (` +
		`ctfixeduser, ctfixedscgd, ctfixedgdrate, ctfixedsce7, ctfixede7r1, ctfixede7r2, ctfixedscgas, ctfixedgasrate, ctfixedannualg, ctfixedannuale, ctfixedannuald, ctfixedannualde7, ctfixedn1, equinox_prn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, c.Ctfixeduser, c.Ctfixedscgd, c.Ctfixedgdrate, c.Ctfixedsce7, c.Ctfixede7r1, c.Ctfixede7r2, c.Ctfixedscgas, c.Ctfixedgasrate, c.Ctfixedannualg, c.Ctfixedannuale, c.Ctfixedannuald, c.Ctfixedannualde7, c.Ctfixedn1, c.EquinoxPrn, c.EquinoxSec)
	err = db.QueryRow(sqlstr, c.Ctfixeduser, c.Ctfixedscgd, c.Ctfixedgdrate, c.Ctfixedsce7, c.Ctfixede7r1, c.Ctfixede7r2, c.Ctfixedscgas, c.Ctfixedgasrate, c.Ctfixedannualg, c.Ctfixedannuale, c.Ctfixedannuald, c.Ctfixedannualde7, c.Ctfixedn1, c.EquinoxPrn, c.EquinoxSec).Scan(&c.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Update updates the Ctfixed in the database.
func (c *Ctfixed) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if c._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.ctfixed SET (` +
		`ctfixeduser, ctfixedscgd, ctfixedgdrate, ctfixedsce7, ctfixede7r1, ctfixede7r2, ctfixedscgas, ctfixedgasrate, ctfixedannualg, ctfixedannuale, ctfixedannuald, ctfixedannualde7, ctfixedn1, equinox_prn, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15` +
		`) WHERE equinox_lrn = $16`

	// run query
	XOLog(sqlstr, c.Ctfixeduser, c.Ctfixedscgd, c.Ctfixedgdrate, c.Ctfixedsce7, c.Ctfixede7r1, c.Ctfixede7r2, c.Ctfixedscgas, c.Ctfixedgasrate, c.Ctfixedannualg, c.Ctfixedannuale, c.Ctfixedannuald, c.Ctfixedannualde7, c.Ctfixedn1, c.EquinoxPrn, c.EquinoxSec, c.EquinoxLrn)
	_, err = db.Exec(sqlstr, c.Ctfixeduser, c.Ctfixedscgd, c.Ctfixedgdrate, c.Ctfixedsce7, c.Ctfixede7r1, c.Ctfixede7r2, c.Ctfixedscgas, c.Ctfixedgasrate, c.Ctfixedannualg, c.Ctfixedannuale, c.Ctfixedannuald, c.Ctfixedannualde7, c.Ctfixedn1, c.EquinoxPrn, c.EquinoxSec, c.EquinoxLrn)
	return err
}

// Save saves the Ctfixed to the database.
func (c *Ctfixed) Save(db XODB) error {
	if c.Exists() {
		return c.Update(db)
	}

	return c.Insert(db)
}

// Upsert performs an upsert for Ctfixed.
//
// NOTE: PostgreSQL 9.5+ only
func (c *Ctfixed) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.ctfixed (` +
		`ctfixeduser, ctfixedscgd, ctfixedgdrate, ctfixedsce7, ctfixede7r1, ctfixede7r2, ctfixedscgas, ctfixedgasrate, ctfixedannualg, ctfixedannuale, ctfixedannuald, ctfixedannualde7, ctfixedn1, equinox_prn, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`ctfixeduser, ctfixedscgd, ctfixedgdrate, ctfixedsce7, ctfixede7r1, ctfixede7r2, ctfixedscgas, ctfixedgasrate, ctfixedannualg, ctfixedannuale, ctfixedannuald, ctfixedannualde7, ctfixedn1, equinox_prn, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.ctfixeduser, EXCLUDED.ctfixedscgd, EXCLUDED.ctfixedgdrate, EXCLUDED.ctfixedsce7, EXCLUDED.ctfixede7r1, EXCLUDED.ctfixede7r2, EXCLUDED.ctfixedscgas, EXCLUDED.ctfixedgasrate, EXCLUDED.ctfixedannualg, EXCLUDED.ctfixedannuale, EXCLUDED.ctfixedannuald, EXCLUDED.ctfixedannualde7, EXCLUDED.ctfixedn1, EXCLUDED.equinox_prn, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, c.Ctfixeduser, c.Ctfixedscgd, c.Ctfixedgdrate, c.Ctfixedsce7, c.Ctfixede7r1, c.Ctfixede7r2, c.Ctfixedscgas, c.Ctfixedgasrate, c.Ctfixedannualg, c.Ctfixedannuale, c.Ctfixedannuald, c.Ctfixedannualde7, c.Ctfixedn1, c.EquinoxPrn, c.EquinoxLrn, c.EquinoxSec)
	_, err = db.Exec(sqlstr, c.Ctfixeduser, c.Ctfixedscgd, c.Ctfixedgdrate, c.Ctfixedsce7, c.Ctfixede7r1, c.Ctfixede7r2, c.Ctfixedscgas, c.Ctfixedgasrate, c.Ctfixedannualg, c.Ctfixedannuale, c.Ctfixedannuald, c.Ctfixedannualde7, c.Ctfixedn1, c.EquinoxPrn, c.EquinoxLrn, c.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Delete deletes the Ctfixed from the database.
func (c *Ctfixed) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return nil
	}

	// if deleted, bail
	if c._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.ctfixed WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, c.EquinoxLrn)
	_, err = db.Exec(sqlstr, c.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	c._deleted = true

	return nil
}

// CtfixedByEquinoxLrn retrieves a row from 'equinox.ctfixed' as a Ctfixed.
//
// Generated from index 'ctfixed_pkey'.
func CtfixedByEquinoxLrn(db XODB, equinoxLrn int64) (*Ctfixed, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`ctfixeduser, ctfixedscgd, ctfixedgdrate, ctfixedsce7, ctfixede7r1, ctfixede7r2, ctfixedscgas, ctfixedgasrate, ctfixedannualg, ctfixedannuale, ctfixedannuald, ctfixedannualde7, ctfixedn1, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.ctfixed ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	c := Ctfixed{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&c.Ctfixeduser, &c.Ctfixedscgd, &c.Ctfixedgdrate, &c.Ctfixedsce7, &c.Ctfixede7r1, &c.Ctfixede7r2, &c.Ctfixedscgas, &c.Ctfixedgasrate, &c.Ctfixedannualg, &c.Ctfixedannuale, &c.Ctfixedannuald, &c.Ctfixedannualde7, &c.Ctfixedn1, &c.EquinoxPrn, &c.EquinoxLrn, &c.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &c, nil
}
