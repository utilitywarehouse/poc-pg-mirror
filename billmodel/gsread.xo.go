// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/lib/pq"
)

// Gsread represents a row from 'equinox.gsread'.
type Gsread struct {
	Gsraccountno    sql.NullString `json:"gsraccountno"`    // gsraccountno
	Gsrreference    sql.NullString `json:"gsrreference"`    // gsrreference
	Gsrmeterref     sql.NullString `json:"gsrmeterref"`     // gsrmeterref
	Gsrreaddate     pq.NullTime    `json:"gsrreaddate"`     // gsrreaddate
	Gsrreading      sql.NullInt64  `json:"gsrreading"`      // gsrreading
	Gsrtype         sql.NullString `json:"gsrtype"`         // gsrtype
	Gsrcode         sql.NullString `json:"gsrcode"`         // gsrcode
	Gsrcodearb      sql.NullString `json:"gsrcodearb"`      // gsrcodearb
	Gsrguduniquesys sql.NullInt64  `json:"gsrguduniquesys"` // gsrguduniquesys
	Gsrlastmoddate  pq.NullTime    `json:"gsrlastmoddate"`  // gsrlastmoddate
	Gsrlastmodtime  pq.NullTime    `json:"gsrlastmodtime"`  // gsrlastmodtime
	Gsrupdatedfrom  sql.NullString `json:"gsrupdatedfrom"`  // gsrupdatedfrom
	EquinoxLrn      int64          `json:"equinox_lrn"`     // equinox_lrn
	EquinoxSec      sql.NullInt64  `json:"equinox_sec"`     // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Gsread exists in the database.
func (g *Gsread) Exists() bool {
	return g._exists
}

// Deleted provides information if the Gsread has been deleted from the database.
func (g *Gsread) Deleted() bool {
	return g._deleted
}

// Insert inserts the Gsread to the database.
func (g *Gsread) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if g._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.gsread (` +
		`gsraccountno, gsrreference, gsrmeterref, gsrreaddate, gsrreading, gsrtype, gsrcode, gsrcodearb, gsrguduniquesys, gsrlastmoddate, gsrlastmodtime, gsrupdatedfrom, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, g.Gsraccountno, g.Gsrreference, g.Gsrmeterref, g.Gsrreaddate, g.Gsrreading, g.Gsrtype, g.Gsrcode, g.Gsrcodearb, g.Gsrguduniquesys, g.Gsrlastmoddate, g.Gsrlastmodtime, g.Gsrupdatedfrom, g.EquinoxSec)
	err = db.QueryRow(sqlstr, g.Gsraccountno, g.Gsrreference, g.Gsrmeterref, g.Gsrreaddate, g.Gsrreading, g.Gsrtype, g.Gsrcode, g.Gsrcodearb, g.Gsrguduniquesys, g.Gsrlastmoddate, g.Gsrlastmodtime, g.Gsrupdatedfrom, g.EquinoxSec).Scan(&g.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	g._exists = true

	return nil
}

// Update updates the Gsread in the database.
func (g *Gsread) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !g._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if g._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.gsread SET (` +
		`gsraccountno, gsrreference, gsrmeterref, gsrreaddate, gsrreading, gsrtype, gsrcode, gsrcodearb, gsrguduniquesys, gsrlastmoddate, gsrlastmodtime, gsrupdatedfrom, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13` +
		`) WHERE equinox_lrn = $14`

	// run query
	XOLog(sqlstr, g.Gsraccountno, g.Gsrreference, g.Gsrmeterref, g.Gsrreaddate, g.Gsrreading, g.Gsrtype, g.Gsrcode, g.Gsrcodearb, g.Gsrguduniquesys, g.Gsrlastmoddate, g.Gsrlastmodtime, g.Gsrupdatedfrom, g.EquinoxSec, g.EquinoxLrn)
	_, err = db.Exec(sqlstr, g.Gsraccountno, g.Gsrreference, g.Gsrmeterref, g.Gsrreaddate, g.Gsrreading, g.Gsrtype, g.Gsrcode, g.Gsrcodearb, g.Gsrguduniquesys, g.Gsrlastmoddate, g.Gsrlastmodtime, g.Gsrupdatedfrom, g.EquinoxSec, g.EquinoxLrn)
	return err
}

// Save saves the Gsread to the database.
func (g *Gsread) Save(db XODB) error {
	if g.Exists() {
		return g.Update(db)
	}

	return g.Insert(db)
}

// Upsert performs an upsert for Gsread.
//
// NOTE: PostgreSQL 9.5+ only
func (g *Gsread) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if g._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.gsread (` +
		`gsraccountno, gsrreference, gsrmeterref, gsrreaddate, gsrreading, gsrtype, gsrcode, gsrcodearb, gsrguduniquesys, gsrlastmoddate, gsrlastmodtime, gsrupdatedfrom, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`gsraccountno, gsrreference, gsrmeterref, gsrreaddate, gsrreading, gsrtype, gsrcode, gsrcodearb, gsrguduniquesys, gsrlastmoddate, gsrlastmodtime, gsrupdatedfrom, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.gsraccountno, EXCLUDED.gsrreference, EXCLUDED.gsrmeterref, EXCLUDED.gsrreaddate, EXCLUDED.gsrreading, EXCLUDED.gsrtype, EXCLUDED.gsrcode, EXCLUDED.gsrcodearb, EXCLUDED.gsrguduniquesys, EXCLUDED.gsrlastmoddate, EXCLUDED.gsrlastmodtime, EXCLUDED.gsrupdatedfrom, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, g.Gsraccountno, g.Gsrreference, g.Gsrmeterref, g.Gsrreaddate, g.Gsrreading, g.Gsrtype, g.Gsrcode, g.Gsrcodearb, g.Gsrguduniquesys, g.Gsrlastmoddate, g.Gsrlastmodtime, g.Gsrupdatedfrom, g.EquinoxLrn, g.EquinoxSec)
	_, err = db.Exec(sqlstr, g.Gsraccountno, g.Gsrreference, g.Gsrmeterref, g.Gsrreaddate, g.Gsrreading, g.Gsrtype, g.Gsrcode, g.Gsrcodearb, g.Gsrguduniquesys, g.Gsrlastmoddate, g.Gsrlastmodtime, g.Gsrupdatedfrom, g.EquinoxLrn, g.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	g._exists = true

	return nil
}

// Delete deletes the Gsread from the database.
func (g *Gsread) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !g._exists {
		return nil
	}

	// if deleted, bail
	if g._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.gsread WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, g.EquinoxLrn)
	_, err = db.Exec(sqlstr, g.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	g._deleted = true

	return nil
}

// GsreadByEquinoxLrn retrieves a row from 'equinox.gsread' as a Gsread.
//
// Generated from index 'gsread_pkey'.
func GsreadByEquinoxLrn(db XODB, equinoxLrn int64) (*Gsread, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`gsraccountno, gsrreference, gsrmeterref, gsrreaddate, gsrreading, gsrtype, gsrcode, gsrcodearb, gsrguduniquesys, gsrlastmoddate, gsrlastmodtime, gsrupdatedfrom, equinox_lrn, equinox_sec ` +
		`FROM equinox.gsread ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	g := Gsread{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&g.Gsraccountno, &g.Gsrreference, &g.Gsrmeterref, &g.Gsrreaddate, &g.Gsrreading, &g.Gsrtype, &g.Gsrcode, &g.Gsrcodearb, &g.Gsrguduniquesys, &g.Gsrlastmoddate, &g.Gsrlastmodtime, &g.Gsrupdatedfrom, &g.EquinoxLrn, &g.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &g, nil
}
