// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"

	"github.com/lib/pq"
)

// Gsread represents a row from 'equinox.gsread'.
type Gsread struct {
	Gsraccountno    sql.NullString `json:"gsraccountno"`    // gsraccountno
	Gsrreference    sql.NullString `json:"gsrreference"`    // gsrreference
	Gsrmeterref     sql.NullString `json:"gsrmeterref"`     // gsrmeterref
	Gsrreaddate     pq.NullTime    `json:"gsrreaddate"`     // gsrreaddate
	Gsrreading      sql.NullInt64  `json:"gsrreading"`      // gsrreading
	Gsrtype         sql.NullString `json:"gsrtype"`         // gsrtype
	Gsrcode         sql.NullString `json:"gsrcode"`         // gsrcode
	Gsrcodearb      sql.NullString `json:"gsrcodearb"`      // gsrcodearb
	Gsrguduniquesys sql.NullInt64  `json:"gsrguduniquesys"` // gsrguduniquesys
	Gsrlastmoddate  pq.NullTime    `json:"gsrlastmoddate"`  // gsrlastmoddate
	Gsrlastmodtime  pq.NullTime    `json:"gsrlastmodtime"`  // gsrlastmodtime
	Gsrupdatedfrom  sql.NullString `json:"gsrupdatedfrom"`  // gsrupdatedfrom
	EquinoxLrn      int64          `json:"equinox_lrn"`     // equinox_lrn
	EquinoxSec      sql.NullInt64  `json:"equinox_sec"`     // equinox_sec
}

// GsreadByEquinoxLrn retrieves a row from 'equinox.gsread' as a Gsread.
//
// Generated from index 'gsread_pkey'.
func GsreadByEquinoxLrn(db XODB, equinoxLrn int64) (*Gsread, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`gsraccountno, gsrreference, gsrmeterref, gsrreaddate, gsrreading, gsrtype, gsrcode, gsrcodearb, gsrguduniquesys, gsrlastmoddate, gsrlastmodtime, gsrupdatedfrom, equinox_lrn, equinox_sec ` +
		`FROM equinox.gsread ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	g := Gsread{}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&g.Gsraccountno, &g.Gsrreference, &g.Gsrmeterref, &g.Gsrreaddate, &g.Gsrreading, &g.Gsrtype, &g.Gsrcode, &g.Gsrcodearb, &g.Gsrguduniquesys, &g.Gsrlastmoddate, &g.Gsrlastmodtime, &g.Gsrupdatedfrom, &g.EquinoxLrn, &g.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &g, nil
}
