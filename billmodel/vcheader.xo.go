// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// Vcheader represents a row from 'equinox.vcheader'.
type Vcheader struct {
	Vchdealer      sql.NullString  `json:"vchdealer"`      // vchdealer
	Vchclawbackbal sql.NullFloat64 `json:"vchclawbackbal"` // vchclawbackbal
	EquinoxPrn     sql.NullInt64   `json:"equinox_prn"`    // equinox_prn
	EquinoxLrn     int64           `json:"equinox_lrn"`    // equinox_lrn
	EquinoxSec     sql.NullInt64   `json:"equinox_sec"`    // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Vcheader exists in the database.
func (v *Vcheader) Exists() bool {
	return v._exists
}

// Deleted provides information if the Vcheader has been deleted from the database.
func (v *Vcheader) Deleted() bool {
	return v._deleted
}

// Insert inserts the Vcheader to the database.
func (v *Vcheader) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if v._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.vcheader (` +
		`vchdealer, vchclawbackbal, equinox_prn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, v.Vchdealer, v.Vchclawbackbal, v.EquinoxPrn, v.EquinoxSec)
	err = db.QueryRow(sqlstr, v.Vchdealer, v.Vchclawbackbal, v.EquinoxPrn, v.EquinoxSec).Scan(&v.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	v._exists = true

	return nil
}

// Update updates the Vcheader in the database.
func (v *Vcheader) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !v._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if v._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.vcheader SET (` +
		`vchdealer, vchclawbackbal, equinox_prn, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4` +
		`) WHERE equinox_lrn = $5`

	// run query
	XOLog(sqlstr, v.Vchdealer, v.Vchclawbackbal, v.EquinoxPrn, v.EquinoxSec, v.EquinoxLrn)
	_, err = db.Exec(sqlstr, v.Vchdealer, v.Vchclawbackbal, v.EquinoxPrn, v.EquinoxSec, v.EquinoxLrn)
	return err
}

// Save saves the Vcheader to the database.
func (v *Vcheader) Save(db XODB) error {
	if v.Exists() {
		return v.Update(db)
	}

	return v.Insert(db)
}

// Upsert performs an upsert for Vcheader.
//
// NOTE: PostgreSQL 9.5+ only
func (v *Vcheader) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if v._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.vcheader (` +
		`vchdealer, vchclawbackbal, equinox_prn, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`vchdealer, vchclawbackbal, equinox_prn, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.vchdealer, EXCLUDED.vchclawbackbal, EXCLUDED.equinox_prn, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, v.Vchdealer, v.Vchclawbackbal, v.EquinoxPrn, v.EquinoxLrn, v.EquinoxSec)
	_, err = db.Exec(sqlstr, v.Vchdealer, v.Vchclawbackbal, v.EquinoxPrn, v.EquinoxLrn, v.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	v._exists = true

	return nil
}

// Delete deletes the Vcheader from the database.
func (v *Vcheader) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !v._exists {
		return nil
	}

	// if deleted, bail
	if v._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.vcheader WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, v.EquinoxLrn)
	_, err = db.Exec(sqlstr, v.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	v._deleted = true

	return nil
}

// VcheaderByEquinoxLrn retrieves a row from 'equinox.vcheader' as a Vcheader.
//
// Generated from index 'vcheader_pkey'.
func VcheaderByEquinoxLrn(db XODB, equinoxLrn int64) (*Vcheader, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`vchdealer, vchclawbackbal, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.vcheader ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	v := Vcheader{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&v.Vchdealer, &v.Vchclawbackbal, &v.EquinoxPrn, &v.EquinoxLrn, &v.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &v, nil
}
