// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// Tprtoreg represents a row from 'equinox.tprtoreg'.
type Tprtoreg struct {
	Tprid      sql.NullInt64  `json:"tprid"`       // tprid
	Tprtype    sql.NullString `json:"tprtype"`     // tprtype
	EquinoxLrn int64          `json:"equinox_lrn"` // equinox_lrn
	EquinoxSec sql.NullInt64  `json:"equinox_sec"` // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Tprtoreg exists in the database.
func (t *Tprtoreg) Exists() bool {
	return t._exists
}

// Deleted provides information if the Tprtoreg has been deleted from the database.
func (t *Tprtoreg) Deleted() bool {
	return t._deleted
}

// Insert inserts the Tprtoreg to the database.
func (t *Tprtoreg) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if t._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.tprtoreg (` +
		`tprid, tprtype, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, t.Tprid, t.Tprtype, t.EquinoxSec)
	err = db.QueryRow(sqlstr, t.Tprid, t.Tprtype, t.EquinoxSec).Scan(&t.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	t._exists = true

	return nil
}

// Update updates the Tprtoreg in the database.
func (t *Tprtoreg) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !t._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if t._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.tprtoreg SET (` +
		`tprid, tprtype, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3` +
		`) WHERE equinox_lrn = $4`

	// run query
	XOLog(sqlstr, t.Tprid, t.Tprtype, t.EquinoxSec, t.EquinoxLrn)
	_, err = db.Exec(sqlstr, t.Tprid, t.Tprtype, t.EquinoxSec, t.EquinoxLrn)
	return err
}

// Save saves the Tprtoreg to the database.
func (t *Tprtoreg) Save(db XODB) error {
	if t.Exists() {
		return t.Update(db)
	}

	return t.Insert(db)
}

// Upsert performs an upsert for Tprtoreg.
//
// NOTE: PostgreSQL 9.5+ only
func (t *Tprtoreg) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if t._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.tprtoreg (` +
		`tprid, tprtype, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`tprid, tprtype, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.tprid, EXCLUDED.tprtype, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, t.Tprid, t.Tprtype, t.EquinoxLrn, t.EquinoxSec)
	_, err = db.Exec(sqlstr, t.Tprid, t.Tprtype, t.EquinoxLrn, t.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	t._exists = true

	return nil
}

// Delete deletes the Tprtoreg from the database.
func (t *Tprtoreg) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !t._exists {
		return nil
	}

	// if deleted, bail
	if t._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.tprtoreg WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, t.EquinoxLrn)
	_, err = db.Exec(sqlstr, t.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	t._deleted = true

	return nil
}

// TprtoregByEquinoxLrn retrieves a row from 'equinox.tprtoreg' as a Tprtoreg.
//
// Generated from index 'tprtoreg_pkey'.
func TprtoregByEquinoxLrn(db XODB, equinoxLrn int64) (*Tprtoreg, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tprid, tprtype, equinox_lrn, equinox_sec ` +
		`FROM equinox.tprtoreg ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	t := Tprtoreg{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&t.Tprid, &t.Tprtype, &t.EquinoxLrn, &t.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &t, nil
}
