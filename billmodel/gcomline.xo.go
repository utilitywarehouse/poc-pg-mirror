// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/lib/pq"
)

// Gcomline represents a row from 'equinox.gcomline'.
type Gcomline struct {
	Gcomlineid       sql.NullFloat64 `json:"gcomlineid"`       // gcomlineid
	Gcomlinempan     sql.NullString  `json:"gcomlinempan"`     // gcomlinempan
	Gcomlineserial   sql.NullString  `json:"gcomlineserial"`   // gcomlineserial
	Gcomlineregno    sql.NullString  `json:"gcomlineregno"`    // gcomlineregno
	Gcomlinedescrip  sql.NullString  `json:"gcomlinedescrip"`  // gcomlinedescrip
	Gcomlinedate1    pq.NullTime     `json:"gcomlinedate1"`    // gcomlinedate1
	Gcomlinedate2    pq.NullTime     `json:"gcomlinedate2"`    // gcomlinedate2
	Gcomlineunits    sql.NullInt64   `json:"gcomlineunits"`    // gcomlineunits
	Gcomlineprice    sql.NullFloat64 `json:"gcomlineprice"`    // gcomlineprice
	Gcomlinevalue    sql.NullFloat64 `json:"gcomlinevalue"`    // gcomlinevalue
	Gcomlinetype     sql.NullFloat64 `json:"gcomlinetype"`     // gcomlinetype
	Gcomlineunitdisp sql.NullString  `json:"gcomlineunitdisp"` // gcomlineunitdisp
	Gcomlinepricedis sql.NullString  `json:"gcomlinepricedis"` // gcomlinepricedis
	Gcomlineread1    sql.NullInt64   `json:"gcomlineread1"`    // gcomlineread1
	Gcomlineread2    sql.NullInt64   `json:"gcomlineread2"`    // gcomlineread2
	Gcomlineperiod   sql.NullString  `json:"gcomlineperiod"`   // gcomlineperiod
	Gcomlinemultiply sql.NullFloat64 `json:"gcomlinemultiply"` // gcomlinemultiply
	EquinoxPrn       sql.NullInt64   `json:"equinox_prn"`      // equinox_prn
	EquinoxLrn       int64           `json:"equinox_lrn"`      // equinox_lrn
	EquinoxSec       sql.NullInt64   `json:"equinox_sec"`      // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Gcomline exists in the database.
func (g *Gcomline) Exists() bool {
	return g._exists
}

// Deleted provides information if the Gcomline has been deleted from the database.
func (g *Gcomline) Deleted() bool {
	return g._deleted
}

// Insert inserts the Gcomline to the database.
func (g *Gcomline) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if g._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.gcomline (` +
		`gcomlineid, gcomlinempan, gcomlineserial, gcomlineregno, gcomlinedescrip, gcomlinedate1, gcomlinedate2, gcomlineunits, gcomlineprice, gcomlinevalue, gcomlinetype, gcomlineunitdisp, gcomlinepricedis, gcomlineread1, gcomlineread2, gcomlineperiod, gcomlinemultiply, equinox_prn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, g.Gcomlineid, g.Gcomlinempan, g.Gcomlineserial, g.Gcomlineregno, g.Gcomlinedescrip, g.Gcomlinedate1, g.Gcomlinedate2, g.Gcomlineunits, g.Gcomlineprice, g.Gcomlinevalue, g.Gcomlinetype, g.Gcomlineunitdisp, g.Gcomlinepricedis, g.Gcomlineread1, g.Gcomlineread2, g.Gcomlineperiod, g.Gcomlinemultiply, g.EquinoxPrn, g.EquinoxSec)
	err = db.QueryRow(sqlstr, g.Gcomlineid, g.Gcomlinempan, g.Gcomlineserial, g.Gcomlineregno, g.Gcomlinedescrip, g.Gcomlinedate1, g.Gcomlinedate2, g.Gcomlineunits, g.Gcomlineprice, g.Gcomlinevalue, g.Gcomlinetype, g.Gcomlineunitdisp, g.Gcomlinepricedis, g.Gcomlineread1, g.Gcomlineread2, g.Gcomlineperiod, g.Gcomlinemultiply, g.EquinoxPrn, g.EquinoxSec).Scan(&g.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	g._exists = true

	return nil
}

// Update updates the Gcomline in the database.
func (g *Gcomline) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !g._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if g._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.gcomline SET (` +
		`gcomlineid, gcomlinempan, gcomlineserial, gcomlineregno, gcomlinedescrip, gcomlinedate1, gcomlinedate2, gcomlineunits, gcomlineprice, gcomlinevalue, gcomlinetype, gcomlineunitdisp, gcomlinepricedis, gcomlineread1, gcomlineread2, gcomlineperiod, gcomlinemultiply, equinox_prn, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19` +
		`) WHERE equinox_lrn = $20`

	// run query
	XOLog(sqlstr, g.Gcomlineid, g.Gcomlinempan, g.Gcomlineserial, g.Gcomlineregno, g.Gcomlinedescrip, g.Gcomlinedate1, g.Gcomlinedate2, g.Gcomlineunits, g.Gcomlineprice, g.Gcomlinevalue, g.Gcomlinetype, g.Gcomlineunitdisp, g.Gcomlinepricedis, g.Gcomlineread1, g.Gcomlineread2, g.Gcomlineperiod, g.Gcomlinemultiply, g.EquinoxPrn, g.EquinoxSec, g.EquinoxLrn)
	_, err = db.Exec(sqlstr, g.Gcomlineid, g.Gcomlinempan, g.Gcomlineserial, g.Gcomlineregno, g.Gcomlinedescrip, g.Gcomlinedate1, g.Gcomlinedate2, g.Gcomlineunits, g.Gcomlineprice, g.Gcomlinevalue, g.Gcomlinetype, g.Gcomlineunitdisp, g.Gcomlinepricedis, g.Gcomlineread1, g.Gcomlineread2, g.Gcomlineperiod, g.Gcomlinemultiply, g.EquinoxPrn, g.EquinoxSec, g.EquinoxLrn)
	return err
}

// Save saves the Gcomline to the database.
func (g *Gcomline) Save(db XODB) error {
	if g.Exists() {
		return g.Update(db)
	}

	return g.Insert(db)
}

// Upsert performs an upsert for Gcomline.
//
// NOTE: PostgreSQL 9.5+ only
func (g *Gcomline) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if g._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.gcomline (` +
		`gcomlineid, gcomlinempan, gcomlineserial, gcomlineregno, gcomlinedescrip, gcomlinedate1, gcomlinedate2, gcomlineunits, gcomlineprice, gcomlinevalue, gcomlinetype, gcomlineunitdisp, gcomlinepricedis, gcomlineread1, gcomlineread2, gcomlineperiod, gcomlinemultiply, equinox_prn, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`gcomlineid, gcomlinempan, gcomlineserial, gcomlineregno, gcomlinedescrip, gcomlinedate1, gcomlinedate2, gcomlineunits, gcomlineprice, gcomlinevalue, gcomlinetype, gcomlineunitdisp, gcomlinepricedis, gcomlineread1, gcomlineread2, gcomlineperiod, gcomlinemultiply, equinox_prn, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.gcomlineid, EXCLUDED.gcomlinempan, EXCLUDED.gcomlineserial, EXCLUDED.gcomlineregno, EXCLUDED.gcomlinedescrip, EXCLUDED.gcomlinedate1, EXCLUDED.gcomlinedate2, EXCLUDED.gcomlineunits, EXCLUDED.gcomlineprice, EXCLUDED.gcomlinevalue, EXCLUDED.gcomlinetype, EXCLUDED.gcomlineunitdisp, EXCLUDED.gcomlinepricedis, EXCLUDED.gcomlineread1, EXCLUDED.gcomlineread2, EXCLUDED.gcomlineperiod, EXCLUDED.gcomlinemultiply, EXCLUDED.equinox_prn, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, g.Gcomlineid, g.Gcomlinempan, g.Gcomlineserial, g.Gcomlineregno, g.Gcomlinedescrip, g.Gcomlinedate1, g.Gcomlinedate2, g.Gcomlineunits, g.Gcomlineprice, g.Gcomlinevalue, g.Gcomlinetype, g.Gcomlineunitdisp, g.Gcomlinepricedis, g.Gcomlineread1, g.Gcomlineread2, g.Gcomlineperiod, g.Gcomlinemultiply, g.EquinoxPrn, g.EquinoxLrn, g.EquinoxSec)
	_, err = db.Exec(sqlstr, g.Gcomlineid, g.Gcomlinempan, g.Gcomlineserial, g.Gcomlineregno, g.Gcomlinedescrip, g.Gcomlinedate1, g.Gcomlinedate2, g.Gcomlineunits, g.Gcomlineprice, g.Gcomlinevalue, g.Gcomlinetype, g.Gcomlineunitdisp, g.Gcomlinepricedis, g.Gcomlineread1, g.Gcomlineread2, g.Gcomlineperiod, g.Gcomlinemultiply, g.EquinoxPrn, g.EquinoxLrn, g.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	g._exists = true

	return nil
}

// Delete deletes the Gcomline from the database.
func (g *Gcomline) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !g._exists {
		return nil
	}

	// if deleted, bail
	if g._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.gcomline WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, g.EquinoxLrn)
	_, err = db.Exec(sqlstr, g.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	g._deleted = true

	return nil
}

// GcomlineByEquinoxLrn retrieves a row from 'equinox.gcomline' as a Gcomline.
//
// Generated from index 'gcomline_pkey'.
func GcomlineByEquinoxLrn(db XODB, equinoxLrn int64) (*Gcomline, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`gcomlineid, gcomlinempan, gcomlineserial, gcomlineregno, gcomlinedescrip, gcomlinedate1, gcomlinedate2, gcomlineunits, gcomlineprice, gcomlinevalue, gcomlinetype, gcomlineunitdisp, gcomlinepricedis, gcomlineread1, gcomlineread2, gcomlineperiod, gcomlinemultiply, equinox_prn, equinox_lrn, equinox_sec ` +
		`FROM equinox.gcomline ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	g := Gcomline{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&g.Gcomlineid, &g.Gcomlinempan, &g.Gcomlineserial, &g.Gcomlineregno, &g.Gcomlinedescrip, &g.Gcomlinedate1, &g.Gcomlinedate2, &g.Gcomlineunits, &g.Gcomlineprice, &g.Gcomlinevalue, &g.Gcomlinetype, &g.Gcomlineunitdisp, &g.Gcomlinepricedis, &g.Gcomlineread1, &g.Gcomlineread2, &g.Gcomlineperiod, &g.Gcomlinemultiply, &g.EquinoxPrn, &g.EquinoxLrn, &g.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &g, nil
}
