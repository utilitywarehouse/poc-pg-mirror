// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import "database/sql"

// Ppexcept represents a row from 'equinox.ppexcept'.
type Ppexcept struct {
	Ppexcode     sql.NullString `json:"ppexcode"`     // ppexcode
	Ppexdescript sql.NullString `json:"ppexdescript"` // ppexdescript
	EquinoxLrn   int64          `json:"equinox_lrn"`  // equinox_lrn
	EquinoxSec   sql.NullInt64  `json:"equinox_sec"`  // equinox_sec
}

func AllPpexcept(db XODB, callback func(x Ppexcept) bool) error {

	// sql query
	const sqlstr = `SELECT ` +
		`ppexcode, ppexdescript, equinox_lrn, equinox_sec ` +
		`FROM equinox.ppexcept `

	q, err := db.Query(sqlstr)

	if err != nil {
		return err
	}
	defer q.Close()

	// load results
	for q.Next() {
		p := Ppexcept{}

		// scan
		err = q.Scan(&p.Ppexcode, &p.Ppexdescript, &p.EquinoxLrn, &p.EquinoxSec)
		if err != nil {
			return err
		}
		if !callback(p) {
			return nil
		}
	}

	return nil
}

// PpexceptByEquinoxLrn retrieves a row from 'equinox.ppexcept' as a Ppexcept.
//
// Generated from index 'ppexcept_pkey'.
func PpexceptByEquinoxLrn(db XODB, equinoxLrn int64) (*Ppexcept, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`ppexcode, ppexdescript, equinox_lrn, equinox_sec ` +
		`FROM equinox.ppexcept ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	p := Ppexcept{}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&p.Ppexcode, &p.Ppexdescript, &p.EquinoxLrn, &p.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &p, nil
}
