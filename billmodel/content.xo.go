// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/lib/pq"
)

// Content represents a row from 'equinox.content'.
type Content struct {
	Cntid           sql.NullString `json:"cntid"`           // cntid
	Cnttitle        sql.NullInt64  `json:"cnttitle"`        // cnttitle
	Cntbody         sql.NullInt64  `json:"cntbody"`         // cntbody
	Cntdestination  sql.NullString `json:"cntdestination"`  // cntdestination
	Cntoriginator   sql.NullString `json:"cntoriginator"`   // cntoriginator
	Cntcc           sql.NullString `json:"cntcc"`           // cntcc
	Cntbc           sql.NullString `json:"cntbc"`           // cntbc
	Cntcategory     sql.NullString `json:"cntcategory"`     // cntcategory
	Cntlastchange   sql.NullString `json:"cntlastchange"`   // cntlastchange
	Cntdateadded    pq.NullTime    `json:"cntdateadded"`    // cntdateadded
	Cntparentid     sql.NullString `json:"cntparentid"`     // cntparentid
	Cntversion      sql.NullString `json:"cntversion"`      // cntversion
	Cntlastreview   pq.NullTime    `json:"cntlastreview"`   // cntlastreview
	Cntdept         sql.NullString `json:"cntdept"`         // cntdept
	Cntteam         sql.NullString `json:"cntteam"`         // cntteam
	Cntlastused     pq.NullTime    `json:"cntlastused"`     // cntlastused
	Cntnextreview   pq.NullTime    `json:"cntnextreview"`   // cntnextreview
	Cntproposed     sql.NullInt64  `json:"cntproposed"`     // cntproposed
	Cntinuse        sql.NullInt64  `json:"cntinuse"`        // cntinuse
	Cntletterid     sql.NullString `json:"cntletterid"`     // cntletterid
	Cntbounceaction sql.NullString `json:"cntbounceaction"` // cntbounceaction
	EquinoxLrn      int64          `json:"equinox_lrn"`     // equinox_lrn
	EquinoxSec      sql.NullInt64  `json:"equinox_sec"`     // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Content exists in the database.
func (c *Content) Exists() bool {
	return c._exists
}

// Deleted provides information if the Content has been deleted from the database.
func (c *Content) Deleted() bool {
	return c._deleted
}

// Insert inserts the Content to the database.
func (c *Content) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.content (` +
		`cntid, cnttitle, cntbody, cntdestination, cntoriginator, cntcc, cntbc, cntcategory, cntlastchange, cntdateadded, cntparentid, cntversion, cntlastreview, cntdept, cntteam, cntlastused, cntnextreview, cntproposed, cntinuse, cntletterid, cntbounceaction, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, c.Cntid, c.Cnttitle, c.Cntbody, c.Cntdestination, c.Cntoriginator, c.Cntcc, c.Cntbc, c.Cntcategory, c.Cntlastchange, c.Cntdateadded, c.Cntparentid, c.Cntversion, c.Cntlastreview, c.Cntdept, c.Cntteam, c.Cntlastused, c.Cntnextreview, c.Cntproposed, c.Cntinuse, c.Cntletterid, c.Cntbounceaction, c.EquinoxSec)
	err = db.QueryRow(sqlstr, c.Cntid, c.Cnttitle, c.Cntbody, c.Cntdestination, c.Cntoriginator, c.Cntcc, c.Cntbc, c.Cntcategory, c.Cntlastchange, c.Cntdateadded, c.Cntparentid, c.Cntversion, c.Cntlastreview, c.Cntdept, c.Cntteam, c.Cntlastused, c.Cntnextreview, c.Cntproposed, c.Cntinuse, c.Cntletterid, c.Cntbounceaction, c.EquinoxSec).Scan(&c.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Update updates the Content in the database.
func (c *Content) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if c._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.content SET (` +
		`cntid, cnttitle, cntbody, cntdestination, cntoriginator, cntcc, cntbc, cntcategory, cntlastchange, cntdateadded, cntparentid, cntversion, cntlastreview, cntdept, cntteam, cntlastused, cntnextreview, cntproposed, cntinuse, cntletterid, cntbounceaction, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22` +
		`) WHERE equinox_lrn = $23`

	// run query
	XOLog(sqlstr, c.Cntid, c.Cnttitle, c.Cntbody, c.Cntdestination, c.Cntoriginator, c.Cntcc, c.Cntbc, c.Cntcategory, c.Cntlastchange, c.Cntdateadded, c.Cntparentid, c.Cntversion, c.Cntlastreview, c.Cntdept, c.Cntteam, c.Cntlastused, c.Cntnextreview, c.Cntproposed, c.Cntinuse, c.Cntletterid, c.Cntbounceaction, c.EquinoxSec, c.EquinoxLrn)
	_, err = db.Exec(sqlstr, c.Cntid, c.Cnttitle, c.Cntbody, c.Cntdestination, c.Cntoriginator, c.Cntcc, c.Cntbc, c.Cntcategory, c.Cntlastchange, c.Cntdateadded, c.Cntparentid, c.Cntversion, c.Cntlastreview, c.Cntdept, c.Cntteam, c.Cntlastused, c.Cntnextreview, c.Cntproposed, c.Cntinuse, c.Cntletterid, c.Cntbounceaction, c.EquinoxSec, c.EquinoxLrn)
	return err
}

// Save saves the Content to the database.
func (c *Content) Save(db XODB) error {
	if c.Exists() {
		return c.Update(db)
	}

	return c.Insert(db)
}

// Upsert performs an upsert for Content.
//
// NOTE: PostgreSQL 9.5+ only
func (c *Content) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.content (` +
		`cntid, cnttitle, cntbody, cntdestination, cntoriginator, cntcc, cntbc, cntcategory, cntlastchange, cntdateadded, cntparentid, cntversion, cntlastreview, cntdept, cntteam, cntlastused, cntnextreview, cntproposed, cntinuse, cntletterid, cntbounceaction, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`cntid, cnttitle, cntbody, cntdestination, cntoriginator, cntcc, cntbc, cntcategory, cntlastchange, cntdateadded, cntparentid, cntversion, cntlastreview, cntdept, cntteam, cntlastused, cntnextreview, cntproposed, cntinuse, cntletterid, cntbounceaction, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.cntid, EXCLUDED.cnttitle, EXCLUDED.cntbody, EXCLUDED.cntdestination, EXCLUDED.cntoriginator, EXCLUDED.cntcc, EXCLUDED.cntbc, EXCLUDED.cntcategory, EXCLUDED.cntlastchange, EXCLUDED.cntdateadded, EXCLUDED.cntparentid, EXCLUDED.cntversion, EXCLUDED.cntlastreview, EXCLUDED.cntdept, EXCLUDED.cntteam, EXCLUDED.cntlastused, EXCLUDED.cntnextreview, EXCLUDED.cntproposed, EXCLUDED.cntinuse, EXCLUDED.cntletterid, EXCLUDED.cntbounceaction, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, c.Cntid, c.Cnttitle, c.Cntbody, c.Cntdestination, c.Cntoriginator, c.Cntcc, c.Cntbc, c.Cntcategory, c.Cntlastchange, c.Cntdateadded, c.Cntparentid, c.Cntversion, c.Cntlastreview, c.Cntdept, c.Cntteam, c.Cntlastused, c.Cntnextreview, c.Cntproposed, c.Cntinuse, c.Cntletterid, c.Cntbounceaction, c.EquinoxLrn, c.EquinoxSec)
	_, err = db.Exec(sqlstr, c.Cntid, c.Cnttitle, c.Cntbody, c.Cntdestination, c.Cntoriginator, c.Cntcc, c.Cntbc, c.Cntcategory, c.Cntlastchange, c.Cntdateadded, c.Cntparentid, c.Cntversion, c.Cntlastreview, c.Cntdept, c.Cntteam, c.Cntlastused, c.Cntnextreview, c.Cntproposed, c.Cntinuse, c.Cntletterid, c.Cntbounceaction, c.EquinoxLrn, c.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Delete deletes the Content from the database.
func (c *Content) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return nil
	}

	// if deleted, bail
	if c._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.content WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, c.EquinoxLrn)
	_, err = db.Exec(sqlstr, c.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	c._deleted = true

	return nil
}

// ContentByEquinoxLrn retrieves a row from 'equinox.content' as a Content.
//
// Generated from index 'content_pkey'.
func ContentByEquinoxLrn(db XODB, equinoxLrn int64) (*Content, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`cntid, cnttitle, cntbody, cntdestination, cntoriginator, cntcc, cntbc, cntcategory, cntlastchange, cntdateadded, cntparentid, cntversion, cntlastreview, cntdept, cntteam, cntlastused, cntnextreview, cntproposed, cntinuse, cntletterid, cntbounceaction, equinox_lrn, equinox_sec ` +
		`FROM equinox.content ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	c := Content{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&c.Cntid, &c.Cnttitle, &c.Cntbody, &c.Cntdestination, &c.Cntoriginator, &c.Cntcc, &c.Cntbc, &c.Cntcategory, &c.Cntlastchange, &c.Cntdateadded, &c.Cntparentid, &c.Cntversion, &c.Cntlastreview, &c.Cntdept, &c.Cntteam, &c.Cntlastused, &c.Cntnextreview, &c.Cntproposed, &c.Cntinuse, &c.Cntletterid, &c.Cntbounceaction, &c.EquinoxLrn, &c.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &c, nil
}
