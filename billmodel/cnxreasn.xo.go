// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// Cnxreasn represents a row from 'equinox.cnxreasn'.
type Cnxreasn struct {
	CnxreasonID    sql.NullString `json:"cnxreason_id"`    // cnxreason_id
	CnxreasonDescr sql.NullString `json:"cnxreason_descr"` // cnxreason_descr
	CnxreasonSusp  sql.NullInt64  `json:"cnxreason_susp"`  // cnxreason_susp
	EquinoxLrn     int64          `json:"equinox_lrn"`     // equinox_lrn
	EquinoxSec     sql.NullInt64  `json:"equinox_sec"`     // equinox_sec

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Cnxreasn exists in the database.
func (c *Cnxreasn) Exists() bool {
	return c._exists
}

// Deleted provides information if the Cnxreasn has been deleted from the database.
func (c *Cnxreasn) Deleted() bool {
	return c._deleted
}

// Insert inserts the Cnxreasn to the database.
func (c *Cnxreasn) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.cnxreasn (` +
		`cnxreason_id, cnxreason_descr, cnxreason_susp, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) RETURNING equinox_lrn`

	// run query
	XOLog(sqlstr, c.CnxreasonID, c.CnxreasonDescr, c.CnxreasonSusp, c.EquinoxSec)
	err = db.QueryRow(sqlstr, c.CnxreasonID, c.CnxreasonDescr, c.CnxreasonSusp, c.EquinoxSec).Scan(&c.EquinoxLrn)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Update updates the Cnxreasn in the database.
func (c *Cnxreasn) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if c._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE equinox.cnxreasn SET (` +
		`cnxreason_id, cnxreason_descr, cnxreason_susp, equinox_sec` +
		`) = ( ` +
		`$1, $2, $3, $4` +
		`) WHERE equinox_lrn = $5`

	// run query
	XOLog(sqlstr, c.CnxreasonID, c.CnxreasonDescr, c.CnxreasonSusp, c.EquinoxSec, c.EquinoxLrn)
	_, err = db.Exec(sqlstr, c.CnxreasonID, c.CnxreasonDescr, c.CnxreasonSusp, c.EquinoxSec, c.EquinoxLrn)
	return err
}

// Save saves the Cnxreasn to the database.
func (c *Cnxreasn) Save(db XODB) error {
	if c.Exists() {
		return c.Update(db)
	}

	return c.Insert(db)
}

// Upsert performs an upsert for Cnxreasn.
//
// NOTE: PostgreSQL 9.5+ only
func (c *Cnxreasn) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO equinox.cnxreasn (` +
		`cnxreason_id, cnxreason_descr, cnxreason_susp, equinox_lrn, equinox_sec` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`) ON CONFLICT (equinox_lrn) DO UPDATE SET (` +
		`cnxreason_id, cnxreason_descr, cnxreason_susp, equinox_lrn, equinox_sec` +
		`) = (` +
		`EXCLUDED.cnxreason_id, EXCLUDED.cnxreason_descr, EXCLUDED.cnxreason_susp, EXCLUDED.equinox_lrn, EXCLUDED.equinox_sec` +
		`)`

	// run query
	XOLog(sqlstr, c.CnxreasonID, c.CnxreasonDescr, c.CnxreasonSusp, c.EquinoxLrn, c.EquinoxSec)
	_, err = db.Exec(sqlstr, c.CnxreasonID, c.CnxreasonDescr, c.CnxreasonSusp, c.EquinoxLrn, c.EquinoxSec)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Delete deletes the Cnxreasn from the database.
func (c *Cnxreasn) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return nil
	}

	// if deleted, bail
	if c._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM equinox.cnxreasn WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, c.EquinoxLrn)
	_, err = db.Exec(sqlstr, c.EquinoxLrn)
	if err != nil {
		return err
	}

	// set deleted
	c._deleted = true

	return nil
}

// CnxreasnByEquinoxLrn retrieves a row from 'equinox.cnxreasn' as a Cnxreasn.
//
// Generated from index 'cnxreasn_pkey'.
func CnxreasnByEquinoxLrn(db XODB, equinoxLrn int64) (*Cnxreasn, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`cnxreason_id, cnxreason_descr, cnxreason_susp, equinox_lrn, equinox_sec ` +
		`FROM equinox.cnxreasn ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	c := Cnxreasn{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&c.CnxreasonID, &c.CnxreasonDescr, &c.CnxreasonSusp, &c.EquinoxLrn, &c.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &c, nil
}
