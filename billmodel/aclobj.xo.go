// Package billmodel contains the types for schema 'equinox'.
package billmodel

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"

	"github.com/lib/pq"
)

// Aclobj represents a row from 'equinox.aclobj'.
type Aclobj struct {
	Aclobjectid    sql.NullInt64   `json:"aclobjectid"`    // aclobjectid
	Aclobjecttype  sql.NullString  `json:"aclobjecttype"`  // aclobjecttype
	Aclobjectname  sql.NullString  `json:"aclobjectname"`  // aclobjectname
	Acldescription sql.NullString  `json:"acldescription"` // acldescription
	Aclnotes       sql.NullInt64   `json:"aclnotes"`       // aclnotes
	Aclocount      sql.NullInt64   `json:"aclocount"`      // aclocount
	Aclosparec1    sql.NullString  `json:"aclosparec1"`    // aclosparec1
	Aclosparec2    sql.NullString  `json:"aclosparec2"`    // aclosparec2
	Aclosparen1    sql.NullFloat64 `json:"aclosparen1"`    // aclosparen1
	Aclosparen2    sql.NullFloat64 `json:"aclosparen2"`    // aclosparen2
	Aclolastaction pq.NullTime     `json:"aclolastaction"` // aclolastaction
	Aclolastuser   sql.NullString  `json:"aclolastuser"`   // aclolastuser
	EquinoxLrn     int64           `json:"equinox_lrn"`    // equinox_lrn
	EquinoxSec     sql.NullInt64   `json:"equinox_sec"`    // equinox_sec
}

func AllAclobj(db XODB, callback func(x Aclobj) bool) error {

	// sql query
	const sqlstr = `SELECT ` +
		`aclobjectid, aclobjecttype, aclobjectname, acldescription, aclnotes, aclocount, aclosparec1, aclosparec2, aclosparen1, aclosparen2, aclolastaction, aclolastuser, equinox_lrn, equinox_sec ` +
		`FROM equinox.aclobj `

	q, err := db.Query(sqlstr)

	if err != nil {
		return err
	}
	defer q.Close()

	// load results
	for q.Next() {
		a := Aclobj{}

		// scan
		err = q.Scan(&a.Aclobjectid, &a.Aclobjecttype, &a.Aclobjectname, &a.Acldescription, &a.Aclnotes, &a.Aclocount, &a.Aclosparec1, &a.Aclosparec2, &a.Aclosparen1, &a.Aclosparen2, &a.Aclolastaction, &a.Aclolastuser, &a.EquinoxLrn, &a.EquinoxSec)
		if err != nil {
			return err
		}
		if !callback(a) {
			return nil
		}
	}

	return nil
}

// AclobjByEquinoxLrn retrieves a row from 'equinox.aclobj' as a Aclobj.
//
// Generated from index 'aclobj_pkey'.
func AclobjByEquinoxLrn(db XODB, equinoxLrn int64) (*Aclobj, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`aclobjectid, aclobjecttype, aclobjectname, acldescription, aclnotes, aclocount, aclosparec1, aclosparec2, aclosparen1, aclosparen2, aclolastaction, aclolastuser, equinox_lrn, equinox_sec ` +
		`FROM equinox.aclobj ` +
		`WHERE equinox_lrn = $1`

	// run query
	XOLog(sqlstr, equinoxLrn)
	a := Aclobj{}

	err = db.QueryRow(sqlstr, equinoxLrn).Scan(&a.Aclobjectid, &a.Aclobjecttype, &a.Aclobjectname, &a.Acldescription, &a.Aclnotes, &a.Aclocount, &a.Aclosparec1, &a.Aclosparec2, &a.Aclosparen1, &a.Aclosparen2, &a.Aclolastaction, &a.Aclolastuser, &a.EquinoxLrn, &a.EquinoxSec)
	if err != nil {
		return nil, err
	}

	return &a, nil
}
